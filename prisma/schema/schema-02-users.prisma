/// User account records - This implements requirements from 'User Architecture' in the specification, providing the persistent business anchor for user authentication, role assignment, RBAC, and system session management.
///
/// Business: Represents a single system-level authenticated identity, mapped to a unique login (email/username/SSO/external). Also the foundation for customer, seller, and admin roles, supporting multi-channel and external integrations.
///
/// Normalization: Strict 3NFâ€”holds only authentication primary key information; detailed attributes live in user_profiles. Example: On login, the user authenticates with 'users', then profile/address are loaded via relation.
///
/// Key relationships: Links to user_profiles (1:1), user_sessions (1:N), user_addresses (1:N), rbac_assignments (1:N), and audit_logs (1:N). Each channel/platform login is managed externally via user_external_auths.
/// Special behaviors: Soft delete (deleted_at), unique email/username, fully normalized. Changing to seller/admin triggers RBAC updates.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model users {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique system identifier for the user.
  id String @id @db.Uuid
  
  /// Email address for user login - Implements unique credential requirement. Critical for account access, RBAC linking, and notification routing. Ensures normalization by guaranteeing one email per user, loading related identities separately. Example: 'user@email.com'. Unique, required.
  email String
  
  /// Unique username/login handle - Enables both email and username authentication as required by specification. Maintains normalization by storing only identifier, not profile data. Example: 'john_doe_77'. Unique, required.
  username String
  
  /// Password hash - Implements secure password storage. Never stores cleartext. Example: bcrypt hash string. Ensures authentication data is kept separate from identity/profile info (normalization). Required unless using SSO.
  password_hash String?
  
  /// User creation timestamp - For audit and compliance. Normalized atomic timestamp field. Example: '2025-06-09T15:28:59.983Z'. Required.
  created_at DateTime @db.Timestamptz
  
  /// Last account update timestamp - Maintains last known change. Example: '2025-06-09T15:28:59.983Z'. Required.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete marker - Implements the 'immutable history, no destructive delete' requirement. On user request/ban, marks user deleted for audit, normalization by separating status field. Example: '2025-06-09T15:28:59.983Z' or null if active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user_profiles user_profiles?
  user_addresses user_addresses[]
  user_sessions user_sessions[]
  user_consents user_consents[]
  user_identity_verifications user_identity_verifications[]
  user_external_auths user_external_auths[]
  rbac_assignments rbac_assignments[]
  audit_logs audit_logs[]
  sellers sellers?
  admins admins?
  product_snapshots product_snapshots[]
  search_query_logs search_query_logs[]
  board_posts board_posts[]
  product_bulletins product_bulletins[]
  product_reviews product_reviews[]
  favorites favorites[]
  carts carts[]
  cart_templates cart_templates[]
  orders orders[]
  order_status_histories order_status_histories[]
  payments payments[]
  shipments shipments[]
  returns returns[]
  exchanges exchanges[]
  order_snapshots order_snapshots[]
  order_audit_logs order_audit_logs[]
  ai_fraud_checks ai_fraud_checks[]
  coupon_redemptions coupon_redemptions[]
  user_balances user_balances[]
  user_deposits user_deposits[]
  user_mileages user_mileages[]
  balance_audit_logs balance_audit_logs[]
  refunds refunds[]
  donations donations[]
  notifications notifications[]
  notification_preferences notification_preferences[]
  recommendation recommendation[]
  fraud_check fraud_check[]
  ai_log ai_log[]
  
  @@unique([email])
  @@unique([username])
  @@index([created_at])
}

/// Extended personal profile data for users - Implements the requirement for field-level encryption, regional residency, and GDPR-compliant profile management.
///
/// Business: Contains enriched (and potentially encrypted) identity information, such as legal name, locale, and marketing preferences, mapped 1:1 to a users record. Segregates PII and preference control for compliance, making all changes audit-logged.
///
/// Normalization: 3NF: Separated from authentication (users), atomic fields only. Example: When a user updates their display name, user_profiles is updated, not users.
///
/// Key relationships: References users (1:1), user_addresses (1:N for history), user_consents (1:N, by audit), and audit_log (profile changes).
/// Special: PII required to be field-encrypted. Consents linked for compliance. Soft delete supported individually.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_profiles {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each profile record.
  id String @id @db.Uuid
  
  /// Owner's users.id - The user to whom this profile belongs. Required for mapping to the main authentication entity.
  user_id String @db.Uuid
  
  /// Name shown in UIs. Implements display customization. Ensures normalization by storing only display value (no denormalized extra PII here). Example: 'Jane Kim'. Required.
  display_name String
  
  /// Legal name (field-encrypted) - Implements compliance for regional regulations (AML, GDPR). Normalized, atomic, not repeated elsewhere. Example: 'Jane Eunyoung Kim'.
  legal_name String?
  
  /// Birth date (field-encrypted) - Enables verification flows and segmentation. Normalized (YYYY-MM-DD). Use datetime for atomic compliance.
  birth_date DateTime? @db.Timestamptz
  
  /// Gender string/enum - Implements marketing/analytics/audit requirement. Normalized, supports enums or free text for inclusivity. Example: 'F', 'M', 'Non-binary'.
  gender String?
  
  /// Preferred user locale (i18n) - For language settings/personalization. Example: 'ko-KR'. Normalized for filtering/user experience.
  locale String?
  
  /// IANA Timezone string (personalization/compliance) - Example: 'Asia/Seoul'. Normalized, atomic, not repeated. Enables compliance for region-specific data retention.
  timezone String?
  
  /// Marketing consent flag - Implements explicit opt-in tracking. Normalized, atomic, example: true/false.
  marketing_opt_in Boolean
  
  /// Profile created timestamp - For audit and rollback. Normalized, atomic.
  created_at DateTime @db.Timestamptz
  
  /// Last profile update timestamp. Required for GDPR/audit. Normalized, atomic.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete marker for profile (audit/legal). Normalized, atomic. Null if active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id])
  @@index([locale])
  @@index([display_name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// User address book - Implements requirements for multi-address support, geo-hierarchy, and per-channel regional compliance.
///
/// Business: Stores shipping, billing, or pickup addresses linked to a user. Each user may have multiple addresses supporting history and types.
///
/// Normalization: 3NF, atomic address parts (street, city, etc.), country/regional codes for localization. Address book changes logged by audit.
///
/// Key relationships: Linked to user_profiles (preferential, can also link to users), used in order flows, potentially favorited.
/// Special: Null soft-delete field for history compliance. No redundant computed fields.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_addresses {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for the address.
  id String @id @db.Uuid
  
  /// Owner users.id - The user to whom this address belongs. Required.
  user_id String @db.Uuid
  
  /// Address type (shipping/billing/pickup/custom) - Implements multi-type address requirement. Ensures normalization by atomic type mapping, not repeated info. Example: 'shipping'. Required.
  type String
  
  /// Name of the recipient at this address - Normalized for compliance. Example: 'Jisoo Park'.
  recipient_name String
  
  /// Recipient's phone (field-encrypted) - Implements notification requirement. Kept atomic.
  phone String?
  
  /// Country code (ISO 3166-1 alpha-2) - For localization. Example: 'KR', 'US'. Required.
  country String
  
  /// State/province/region string - For localization/routing. Required in some countries.
  state String?
  
  /// City/town for delivery. Example: 'Seoul'. Normalized, atomic. Required.
  city String
  
  /// Street address (line1+line2 if needed) - Fully normalized atomic string.
  street String
  
  /// Postal/ZIP code - For delivery compliance. Atomic and normalized. Example: '03187'.
  postal_code String
  
  /// Primary address flag - Enables business logic for default selection. Only one per type can be true. Ensures normalization by not duplicating default logic. Example: true/false.
  primary Boolean
  
  /// Address record creation time - For audit/logging. Normalized.
  created_at DateTime @db.Timestamptz
  
  /// Last update time for address - For ordering/audit. Normalized.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete marker for address - Implements audit and immutable history per compliance sections. Null if active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, type, primary])
  @@index([country, state, city])
  @@index([recipient_name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Session records for authenticating users - Implements persistent login, cross-device/session revocation, and audit trailing from 'User Architecture'.
///
/// Business: Each session represents a logged-in device/session for a user. Used for audit, revocation, anomaly detection. Example: User logs in from web and mobile (has two sessions).
///
/// Normalization: 3NF, contains only session data, not user profile info.
///
/// Key relationships: Linked to users, referenced by audit logs. Special: IP/device fingerprint for security.
/// Special behaviors: Session expiry logic, soft delete.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_sessions {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for the session.
  id String @id @db.Uuid
  
  /// Session owner - users.id. Required.
  user_id String @db.Uuid
  
  /// Hashed session token - Implements security, avoids cleartext storage. Example: JWT hash.
  token_hash String
  
  /// Session IP address (normalized, IPv4/6) - For audit/compliance/anomaly checks. Example: '120.44.1.10'
  ip_address String?
  
  /// Session user agent string for device/client logging - Maintains atomicity and normalization. Example: Chrome/99.0.
  user_agent String?
  
  /// Session expiration timestamp. Implements expiry/auto-logout requirement. Null for non-expiring sessions.
  expires_at DateTime? @db.Timestamptz
  
  /// Session creation timestamp - Required for compliance/audit. Atomic.
  created_at DateTime @db.Timestamptz
  
  /// Revocation timestamp (null if active) - For force logout flows, audit. Normalized.
  revoked_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([token_hash])
  @@index([user_id, created_at])
}

/// Consent audit log for user profile/privacy preferences - Implements compliance (GDPR, CCPA) and explicit tracking of user sharing/marketing/data export preferences.
///
/// Business: Each consent row maps to a user (by user_id) and records a timestamp, scope, and outcome (opt-in/out) with immutable audit trail. Consent changes tracked by user, updated by admin/system.
///
/// Normalization: 3NF, only atomic, non-derived consent data recorded. Normalized away from user_records / user_profile for historical tracking.
///
/// Key relationships: Links to user_profiles, users (via user_id), audit log for audit trail. Special: Exported in regulatory requests.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_consents {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique row per consent action.
  id String @id @db.Uuid
  
  /// Consent owner - users.id. Required for consent mapping and regulatory traceability.
  user_id String @db.Uuid
  
  /// Consent scope string - E.g., 'marketing', 'data_export'. Implements explicit consent scopes under GDPR/etc. Ensures normalization by recording just the scope here. Example: 'marketing_email'.
  scope String
  
  /// Consent flag - true (consented), false (withdrawn). Required for audit. Ensures normalization: one flag per row, use history for changes.
  opt_in Boolean
  
  /// Consent record timestamp - Required for legal audit/audit log mapping. Normalized.
  recorded_at DateTime @db.Timestamptz
  
  /// Timestamp if consent withdrawn/revoked (null if active). Ensures auditability and normalization.
  revoked_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, scope, recorded_at])
  @@index([user_id, scope])
}

/// History of external/regional identity verification attempts per user - Implements KYC/KYB/AML workflow logging as required by regulatory guidelines.
///
/// Business: Stores each verification event (success/failure/status) for each user to permit compliance audit trails and dynamic escalation. Includes provider response, timestamps, and evidence of outcome.
///
/// Normalization: 3NF, each event atomic, no denormalization. Example: On initiation of KYC, record created; updated with response.
///
/// Key relationships: Linked to users. Cross-referenced for audit by admins.
/// Special: Notifies risk/fraud modules. Used in onboarding/escalation.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_identity_verifications {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for verification event.
  id String @id @db.Uuid
  
  /// Verification target user (users.id). Required for traceability/audit mapping.
  user_id String @db.Uuid
  
  /// External provider/service name - Implements integration with pluggable external KYC/KYB. Normalized atomic string (e.g., 'Stripe ID', 'PASS Auth').
  provider String
  
  /// Verification request summary (encrypted/hashed for privacy). Normalized for audit and compliance reporting.
  request_payload String?
  
  /// Provider response/record (encrypted/anonymized). Normalized data for compliance audit. Never denormalized here.
  response_payload String?
  
  /// Verification outcome code (success/failure/pending/etc) - For audit log. Normalized atomic string. Example: 'success'.
  status String
  
  /// When verification passed (null if not yet passed/failed). Needed for escalation/tracking/regulatory export.
  verified_at DateTime? @db.Timestamptz
  
  /// Attempt creation timestamp - For immutable history trail. Normalized.
  created_at DateTime @db.Timestamptz
  
  /// Last update to verification attempt. Required for compliance history.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, provider, created_at])
  @@index([user_id, provider, status])
}

/// User external authentication mapping records - Implements SSO/OAuth/vnd platform login compliance. Provides M:N mapping of user records to external providers, as per system modular login requirements.
///
/// Business: Each row assigns a system user to an external auth provider account (Google, Apple, Kakao, etc.). Enables users to have multiple linked providers. Workflows: Association/disassociation is logged and auditable.
///
/// Normalization: 3NF, each mapping atomic, one provider per row, never stores profile info (only identifier reference). Used by sign-in logic and internal account merge/federation flows.
///
/// Key relationships: Linked to users on system side, provider/user_id on platform side. Used for cross-system SSO and onboarding.
/// Special: Never stores provider credentials/secrets hereâ€”only identifiers.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model user_external_auths {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique mapping per user/provider combination.
  id String @id @db.Uuid
  
  /// System user account - users.id (for access control and login mapping). Required.
  user_id String @db.Uuid
  
  /// External provider (e.g., 'google', 'apple', 'naver') - Required. Normalized string. Used for sign-in logic.
  provider String
  
  /// Provider's user identifier (atomic, not a full profile) - Required. Used for federated login. Normalizedâ€”never computed from other info.
  external_user_id String
  
  /// Date of this provider link - For audit/compliance and sign-in history. Normalized.
  linked_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([provider, external_user_id])
  @@unique([user_id, provider])
}

/// Role definitions for RBAC - Implements the fundmental permission system for users/sellers/admins. Required by granularity and escalation logic in the requirements.
///
/// Business: Each row represents a RBAC role (e.g., 'customer', 'seller', 'admin'). Used by the RBAC engine to grant users context-specific rights. Roles are applied per assignment for context/channel/section flexibility.
///
/// Normalization: 3NF, role attributes only, associations live in rbac_assignments. Example: Role 'admin' may have multiple permissions.
///
/// Key relationships: Linked to rbac_assignments (many-to-many via assignment), rbac_permissions (many-to-many via assignment/permission matrix).
/// Special: Built-in and custom roles differentiated by code/flags.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model rbac_roles {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier per role record.
  id String @id @db.Uuid
  
  /// Role code (unique per type) - E.g., 'customer', 'seller', 'super_admin'. Used for reference/assignments. Enforces normalization: atomic string-per-row, not denormalized list.
  code String
  
  /// Role description string (admin UI/help) - For admins to understand purpose. Normalized, never repeated.
  description String?
  
  /// Built-in/system-programmable role flag - Indicates system-generated roles not editable by admin. Enforces normalization by separating custom roles. Example: true/false.
  is_builtin Boolean
  
  /// Role definition time - For audit/versioning. Normalized.
  created_at DateTime @db.Timestamptz
  
  /// Last role update (admin edits/customization). For audit/history. Normalized.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  rbac_assignments rbac_assignments[]
  
  @@unique([code])
  @@index([description(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// RBAC permission definitions - Implements permission matrix (CRUD/resource-based) for assignment to roles. Requirement: permissions are granular and versionable.
///
/// Business: Each row is a unique permission (e.g., 'order_read', 'product_edit'). Matrixed to roles (M:N) via assignment tables.
///
/// Normalization: 3NF, atomic permission code per row. Never stores mapping (association only in assignments).
///
/// Key relationships: Linked via rbac_assignments (M:N). Used to derive rights at runtime.
/// Special: Built-in flag distinguishes system vs admin-defined permissions.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model rbac_permissions {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique permission row.
  id String @id @db.Uuid
  
  /// Permission code (unique system-wide) - Implements ability to grant matrixed permissions. E.g. 'order_create', 'user_data_erase'. Enforces normalization: one per row.
  code String
  
  /// Permission textual description - For admin UI. Normalized atomic string. Never used for logic, only for help.
  description String?
  
  /// System permission flag - Indicates core permissions, differentiated from admin-custom. Example: true/false. Maintains normalization/compliance with infrastructure Evolution.
  is_builtin Boolean
  
  /// Permission creation timestamp. For system audit/audit of custom permission logic.
  created_at DateTime @db.Timestamptz
  
  /// Last permission update - For admin extension/retiring of permission. Normalized for audit.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  rbac_assignments rbac_assignments[]
  
  @@unique([code])
  @@index([description(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// RBAC assignment matrix - Implements all requirements for granular, contextual, and temporal permissions/scoping. Supports multi-channel and workload isolation.
///
/// Business: Each row maps a user (or seller/admin) to a role and permission with optional scope (channel, section, temporal validity). Enables complex scenarios like emergency escalation, temporal roles, compliance auditing.
///
/// Normalization: 3NF, one tuple per assignment, never denormalized role/permission lists. Assignment changes fully audit-logged.
///
/// Key relationships: Links users, roles, permissions; referenced in audit_log for compliance. Used by escalation logic and UI bulk update flows.
/// Special: Assignment expiry/auto-revocation stores timing atomicity. No computed/aggregated info stored.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model rbac_assignments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique row per assignment role/permission/user/triple.
  id String @id @db.Uuid
  
  /// Assigned user (users.id) - Required. Links to assigned user.
  user_id String @db.Uuid
  
  /// Linked role (rbac_roles.id) - Required. Links to role being assigned.
  role_id String @db.Uuid
  
  /// Linked permission (rbac_permissions.id) - Required. Links to permission for the role/context.
  permission_id String @db.Uuid
  
  /// Optional channel scoping (if role is specific to a channel). Maintains strict normalization by separating channel context per assignment. Example: channel-specific 'seller' role. Nullable.
  scope_channel_id String? @db.Uuid
  
  /// Optional section scoping (if role is only valid in a section within channel). Maintains normalization by isolating section context. Nullable.
  scope_section_id String? @db.Uuid
  
  /// Assignment expiration (null = permanent). Implements compliance for auto-revocation scenarios. Required for temporal roles.
  expires_at DateTime? @db.Timestamptz
  
  /// Assignment record timestamp - Required (for audit, traceability, rollback). Atomic/normalized.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role rbac_roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission rbac_permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  
  @@index([permission_id])
  
  @@unique([user_id, role_id, permission_id, scope_channel_id, scope_section_id])
  @@index([role_id, permission_id])
}

/// Comprehensive audit log for user-related actions and RBAC events - Implements 'full auditability', GDPR/CCPA audit, and regional compliance requirements, as well as rollback capability and suspicious event tracking.
///
/// Business: Each row is a logged event (login, RBAC change, consent, escalation, KYC, etc.), timestamped, reasoned, and actor-attributed. Provides immutable record for all user/account/permission/consent operations. Supports filtering/export for compliance requests.
///
/// Normalization: 3NF, all information atomic (who, what, when), no derived/denormalized audit summaries here. Bulk exports for compliance run off this table.
///
/// Key relationships: Links to users, rbac_assignments, user_profile changes. Used for admin review and security analytics.
/// Special: field-level masking on PII as required by compliance.
///
/// @namespace Users
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model audit_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each audit log entry.
  id String @id @db.Uuid
  
  /// Target user (users.id) for the event being logged. Required for traceability, audit, and compliance exports.
  user_id String @db.Uuid
  
  /// Event log code (e.g., 'login', 'profile_update', 'rbac_assign', 'consent_withdraw'). Implements the requirement for strictly atomic, codified audit event typing. Required.
  event_type String
  
  /// Short, human-readable reason for event - Used for admin/audit panels. Normalized string; details for compliance/legal tracking.
  event_reason String?
  
  /// Event metadata/context detail (JSON string, field-encrypted if needed) - Used for trace/audit scenarios. Maintains normalization by storing only atomic context, never denormalized audit summaries. Optional.
  event_context String?
  
  /// ID of actor responsible (users.id or admin id if not user) - For compliance, rollbacks, and root cause analysis. Nullable for system events. Normalized atomic link.
  actor_id String? @db.Uuid
  
  /// Audit event timestamp - Required for legal, rollback, and compliance/Audit reporting. Atomic, normalized.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, event_type, created_at])
  @@index([event_type, created_at])
  @@index([event_reason(ops: raw("gin_trgm_ops"))], type: Gin)
}
/// Product master (core SKU/group) - This implements the comprehensive product catalog requirement from the Product Management document. Central record for all products listed across the platform. Holds product metadata, primary relationships (category, seller), and references to options and bundles. Maintains 3NF by not duplicating inventory, option, or category data – all relationships via foreign keys. For example, sellers define products here, and inventory or options are in linked tables. Key relationships: links to aimall_backend_sellers (already created table) and aimall_backend_categories. Special behaviors: Only normalized product master data; no precomputed inventory, price, or reviews.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_products {
  //----
  // COLUMNS
  //----
  /// Primary Key. Uniquely identifies each product.
  id String @id
  
  /// Category's {@link aimall_backend_categories.id}. References which category this product belongs to.
  category_id String
  
  /// Seller's {@link aimall_backend_sellers.id} - Who owns this product (from Actors domain; reference only).
  seller_id String
  
  /// Product title - Implements product listing requirement. Human-readable product name. Ensures normalization as only master copy here. Example: 'Apple AirPods Pro 2'.
  title String
  
  /// Product detail/description - Implements product content requirement. Long text explaining features. Normalized; not duplicated elsewhere. Example: 'Latest model, improved noise cancellation.'
  description String?
  
  /// Main thumbnail image URI - Implements image management requirement. Single main image URI. Only stored here, not duplicated in options. Example: 'https://cdn/airpods2-thumb.jpg'.
  main_thumbnail_uri String?
  
  /// Status of product (active, inactive, out_of_stock, deleted) - Tracks whether product is available. Normalized field. Example: 'active'.
  status String
  
  /// Created timestamp - Implements audit and snapshot needs. Creation datetime. Example: 2024-05-01T10:00:00Z.
  created_at DateTime
  
  /// Updated timestamp. To support change and audit needs. Example: 2024-05-02T15:10:00Z.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_products_category_id aimall_backend_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  fk_aimall_backend_products_seller_id aimall_backend_sellers @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  
  aimall_backend_product_options aimall_backend_product_options[]
  aimall_backend_product_bundles_of_bundle_product_id aimall_backend_product_bundles[] @relation("aimall_backend_product_bundles_of_bundle_product_id")
  aimall_backend_product_bundles_of_component_product_id aimall_backend_product_bundles[] @relation("aimall_backend_product_bundles_of_component_product_id")
  aimall_backend_skus aimall_backend_skus[]
  aimall_backend_inventory_snapshots aimall_backend_inventory_snapshots[]
  aimall_backend_channel_assignments aimall_backend_channel_assignments[]
  aimall_backend_reviews aimall_backend_reviews[]
  aimall_backend_snapshots aimall_backend_snapshots[]
  aimall_backend_cart_items aimall_backend_cart_items[]
  aimall_backend_order_items aimall_backend_order_items[]
  
  @@unique([seller_id, title])
  @@index([category_id])
  @@index([created_at])
}

/// Product options (variant definitions) - Implements the SKU/variant requirement in the Product Management and ERD. Stores all option variants for products (e.g., color, size). Maintains 3NF by only referencing products and not duplicating inventory or price. For example, 'Color: Black', 'Size: M' for given product. Key relationships: links to aimall_backend_products. Special behaviors: One record per option value; combinations for full SKU are stored in aimall_backend_skus.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_product_options {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per product option.
  id String @id
  
  /// Product's {@link aimall_backend_products.id} - Which product this option belongs to.
  product_id String
  
  /// Option name (e.g., Color, Size) - Implements option specification requirement. Atomic; not duplicated. For example, 'Color'.
  name String
  
  /// Option value (e.g., Red, Large) - Option value per option type. Ensures full normalization. For example, 'Black'.
  value String
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_product_options_product_id aimall_backend_products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  aimall_backend_cart_items aimall_backend_cart_items[]
  aimall_backend_order_items aimall_backend_order_items[]
  
  @@unique([product_id, name, value])
  @@index([product_id])
}

/// Product bundles (set/group of products) - Implements the bundle/package product requirement from Product Management. Defines relationships between products that are sold together as bundles. Strictly normalized: just references to master products and role (main vs component). Never includes precomputed price or stock. For example, 'Gift Set' containing three products. Key relationships: links to main product and bundled product (both aimall_backend_products). Special behaviors: For M:N bundles, each row links a bundle and a bundled component.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_product_bundles {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per bundle-member relation.
  id String @id
  
  /// Main bundle product's {@link aimall_backend_products.id}. Represents the product that is a bundle group/master.
  bundle_product_id String
  
  /// Bundled component product's {@link aimall_backend_products.id}. Represents the directly included (child) product.
  component_product_id String
  
  /// Indicates if the component is required for the bundle - Implements bundle rule requirement. For example, requiring all components for fixed set; false for optional (e.g., gift add-on).
  is_required Boolean
  
  /// Quantity of this component in the bundle - How many units included per bundle. Maintains normalization by not duplicating product details. Example: 2 means two of this item per bundle.
  quantity Int
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_product_bundles_bundle_product_id aimall_backend_products @relation("aimall_backend_product_bundles_of_bundle_product_id", fields: [bundle_product_id], references: [id], onDelete: Cascade)
  fk_aimall_backend_product_bundles_component_product_id aimall_backend_products @relation("aimall_backend_product_bundles_of_component_product_id", fields: [component_product_id], references: [id], onDelete: Cascade)
  
  @@index([component_product_id])
  
  @@unique([bundle_product_id, component_product_id], map: "aimall_backend_product_bundles_bundle_product_id_compo_b1a8e08d")
  @@index([bundle_product_id])
}

/// Product categories (taxonomy) - Implements category management and classification from Product Management. Defines the product taxonomy hierarchy (main/sub/section levels). Maintains 3NF – only category data; no product fields here. For example, 'Electronics > Phones > Accessories'. Key relationships: can be hierarchical via parent_id (self-reference); products reference categories. Special behaviors: Hierarchical nesting is optional (nullable parent_id); root categories have null parent_id.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_categories {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per category.
  id String @id
  
  /// Parent category's {@link aimall_backend_categories.id}. Hierarchical parent, or null for root categories.
  parent_id String?
  
  /// Category name - Implements taxonomy labeling. Atomic; no category hierarchy in this field. For example: 'Electronics'.
  name String
  
  /// Hierarchy depth - Root=1, increasing with subcategories. Implements hierarchy requirement. For example, 2 for subcategory.
  depth Int
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_categories_parent_id aimall_backend_categories? @relation("recursive", fields: [parent_id], references: [id], onDelete: Cascade)
  
  aimall_backend_products aimall_backend_products[]
  recursive aimall_backend_categories[] @relation("recursive")
  
  @@unique([parent_id, name])
  @@index([parent_id])
}

/// SKU master (variant combinations) - Implements complete variant/SKU specification from Product Management. Defines each purchasable SKU (combination of product + options), with references to all option values selected. Fully normalized: no pricing, inventory, or calculated data; only references and atomic SKU codes. For example, a unique SKU for 'AirPods Pro 2, Color: Black, Case: Yes'. Key relationships: links to product and all relevant options. Special behaviors: Unique per product and option combination.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_skus {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per SKU.
  id String @id
  
  /// Product's {@link aimall_backend_products.id} for which this SKU is defined.
  product_id String
  
  /// Platform-unique SKU code - Implements SKU referencing. Example: 'APPRO2-BLK-CASEY'.
  sku_code String
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_skus_product_id aimall_backend_products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  aimall_backend_inventory_snapshots aimall_backend_inventory_snapshots[]
  aimall_backend_cart_items aimall_backend_cart_items[]
  
  @@unique([sku_code])
  @@index([product_id])
}

/// Inventory snapshot logger - Implements inventory audit trail, atomicity, and change tracking from Product Management. Records all changes to inventory for audit and temporal reconstruction. Fully normalized: references the SKU, never precomputes total inventory. For example, logs each change when inventory is updated due to sales, restock, or manual adjustment. Key relationships: links to SKUs and products. Special behaviors: Can reconstruct point-in-time inventory by aggregating snapshots for a SKU/product.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_inventory_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per inventory change event.
  id String @id
  
  /// SKU's {@link aimall_backend_skus.id} for which inventory was changed.
  sku_id String
  
  /// Product's {@link aimall_backend_products.id} (denormalized FK for easier audit).
  product_id String
  
  /// Type of inventory change - Implements stock mutation requirement. Examples: 'sale', 'restock', 'manual_adjust'.
  change_type String
  
  /// Quantity of change (positive/negative) - Atomic per event. For example, -1 for sale, +5 for restock.
  change_quantity Int
  
  /// Actor's user id (e.g. admin or seller) - Who caused the change. Ensures proper audit trail. Example: seller UUID.
  changed_by String
  
  /// Timestamp when snapshot created. Implements audit/compliance.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_inventory_snapshots_sku_id aimall_backend_skus @relation(fields: [sku_id], references: [id], onDelete: Cascade)
  fk_aimall_backend_inventory_snapshots_product_id aimall_backend_products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@index([sku_id])
  @@index([product_id])
  @@index([created_at])
}

/// Channel assignment for product listing - Implements cross-channel management from Product Management. Records product's registration and mapping to multiple channels (e.g. online store, section, marketplace). Maintains 3NF by only referencing IDs. Example: A product may be listed on two channels; each row here for a channel. No pricing or denormalized status fields. Key relationships: links to aimall_backend_products and already created aimall_backend_channels. Special behaviors: Each tuple is unique: a product appears at most once per channel.
///
/// @namespace Products
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_channel_assignments {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique per product/channel tuple.
  id String @id
  
  /// Product's {@link aimall_backend_products.id} for this listing.
  product_id String
  
  /// Channel's {@link aimall_backend_channels.id} (already implemented in Systematic domain).
  channel_id String
  
  /// Assignment timestamp - When product was listed on this channel. Maintains correct timeline for audit/rollback. Example: 2024-05-02T13:20:00Z.
  assigned_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_aimall_backend_channel_assignments_product_id aimall_backend_products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  fk_aimall_backend_channel_assignments_channel_id aimall_backend_channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@unique([product_id, channel_id])
  @@index([channel_id])
}
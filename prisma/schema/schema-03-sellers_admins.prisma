/// Seller account and profile information - This implements onboarding and core seller management as per 03_user_architecture.md (User Architecture) and 04_product_domain.md (Product Domain). 
///
/// Provides the central entity for sellers, supporting multi-stage onboarding, role and status tracking, channel assignments, and linkage to user identity. Maintains 3NF by holding only seller-specific, atomic fields, delegating roles, verifications, and assignments to separate tables. For example, when a new merchant registers or is invited, a record is created here, while elevated permissions or verifications are in related tables. 
///
/// Key relationships: {@link sellers.id} is referenced by seller_verification, seller_permission, and seller_channel_assignment. Relates to user identity via a foreign key. 
/// Special behaviors: Soft-deletion via deleted_at, seller suspension through status tracking, channel/role links only via junction tables.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model sellers {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Owning user's {@link users.id}
  ///
  /// Links seller legal/account to unified user system.
  user_id String @db.Uuid
  
  /// Seller display or trade name - Implements display/branding aspect.
  ///
  /// Used publicly across the system; atomic, not calculated.
  nickname String
  
  /// Status state (pending, active, suspended) - Implements compliance/workflow states. 
  ///
  /// Atomic, not derived; controls onboarding and operational flows. E.g., transitions managed through admin review.
  status String
  
  /// Registration timestamp - Implements onboarding and compliance timeline.
  ///
  /// Set at insert, never modified.
  created_at DateTime @db.Timestamptz
  
  /// Last profile update timestamp - Tracks profile changes for audit.
  ///
  /// Changed on update, never calculated.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deletion timestamp - Complies with non-destructive delete/audit trail. Null unless deleted; regular table, keeps 3NF.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  seller_verifications seller_verifications[]
  seller_permissions seller_permissions[]
  seller_channel_assignments seller_channel_assignments[]
  
  @@unique([user_id])
  @@index([status])
  @@index([nickname(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Seller verification workflow entries - Implements the compliance and onboarding verification as per 03_user_architecture.md (Seller Management Workflows).
///
/// Each row logs a verification step (e.g., KYC, business doc, bank, tax) tied to a seller. All data fully normalized; no status/history fields here intermixed with other entities. Example: when a KYC check is started for a seller, a row is created here referencing {@link sellers.id}, with outcome and timestamps.
///
/// Key relationships: Linked to sellers via seller_id. 
/// Special behavior: Each verification is its own entry—multiple rows per seller allowed. Atomic, fulfills 3NF.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model seller_verifications {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked seller's {@link sellers.id}.
  ///
  /// Who this verification entry is for.
  seller_id String @db.Uuid
  
  /// Verification type - e.g., KYC, business_license, bank, tax.
  /// Complies with 3NF; not calculated.
  type String
  
  /// Outcome result - Implements compliance result state (pending, approved, rejected).
  /// Atomic result for audit/history.
  outcome String?
  
  /// External verification ID/reference from provider APIs.
  /// Atomic, for audit only; not calculated.
  reference_id String?
  
  /// Verification requested timestamp.
  /// Audit/trace timeline; not derived.
  requested_at DateTime @db.Timestamptz
  
  /// Completion timestamp (null if still open/pending).
  /// Maintains time series without denormalization.
  completed_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  seller sellers @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  
  @@index([seller_id, type])
  @@index([requested_at])
}

/// Seller additional permission assignments - Implements dynamic, granular access and elevated powers as specified in user architecture/RBAC flows (03_user_architecture.md).
///
/// Each row grants an optional, context-sensitive permission (e.g., new category, analytics access) to a seller, referencing permission catalog elsewhere. Fulfills 3NF by representing only assignments, not holding permission logic or profile data. Example: to grant a seller new analytics rights, an entry here links seller, permission, and timestamp.
///
/// Key relationships: References sellers and admin (who granted). 
/// Special: Allows temporal/conditional assignment, each row is audit-traceable, atomic.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model seller_permissions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Grantee seller's {@link sellers.id}.
  seller_id String @db.Uuid
  
  /// Admin who granted permission's {@link admins.id}.
  granted_by_admin_id String @db.Uuid
  
  /// Permission code/key - Corresponds to system's permission catalog.
  /// Atomic assignment only.
  permission_code String
  
  /// Timestamp when permission assigned, for compliance/audit trail.
  granted_at DateTime @db.Timestamptz
  
  /// Expiration timestamp for temporary permissions.
  /// Null if permanent.
  expires_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  seller sellers @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  granted_by_admin admins @relation(fields: [granted_by_admin_id], references: [id], onDelete: Cascade)
  
  @@index([granted_by_admin_id])
  
  @@unique([seller_id, permission_code])
}

/// Seller-to-channel assignment (junction table) - Implements multi-channel enablement as in Core System Concepts and onboarding workflow.
///
/// Each record links a seller to a channel they're allowed to operate in. Pure M:N assignment table, strictly 3NF—atomic links only, no denormalized details. Example: granting a seller access to a new storefront/channel is a new row here.
///
/// Key relationships: References sellers and channels. 
/// Special: Assignment-specific permissions handled via permission or role granting, not here.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model seller_channel_assignments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Seller's {@link sellers.id}.
  ///
  /// Who is granted access.
  seller_id String @db.Uuid
  
  /// Channel's {@link channels.id}
  ///
  /// Channel/storefront assigned.
  channel_id String @db.Uuid
  
  /// Timestamp of assignment - Implements workflow step and audit.
  /// Atomic, set on insert; not derived.
  assigned_at DateTime @db.Timestamptz
  
  /// Revocation/removal timestamp.
  /// Null unless channel access is revoked. Maintains normalized timeline.
  revoked_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  seller sellers @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@index([channel_id])
  
  @@unique([seller_id, channel_id])
}

/// Admin account/identity - Implements system/admin staff definitions as described in 03_user_architecture.md (Admin Controls).
///
/// Central entity for staff/admin management, separate from user for RBAC and compliance flows. 3NF maintained by having only ID, status, and reference to user (profile, PII stored in user). Example: onboarding a new admin creates this record; updating roles is managed via assignments table.
///
/// Key relationships: Linked to user, roles/assignments/audit logs reference this ID. 
/// Special: Soft-deletion via deleted_at, admin status (active/suspended/etc.) only in this table.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model admins {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked user's {@link users.id}.
  /// Centralized identity; PII etc. delegated to user subsystem.
  user_id String @db.Uuid
  
  /// Admin status (active, suspended, pending) - Maintains atomic admin workflow state.
  /// Never calculated; enables escalation/checks.
  status String
  
  /// Admin creation timestamp - Audit/track admin onboarding.
  created_at DateTime @db.Timestamptz
  
  /// Last admin update timestamp - For audit; not denormalized.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deletion. Null unless deleted; implements non-destructive removal for compliance.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  seller_permissions seller_permissions[]
  admin_assignments admin_assignments[]
  admin_action_logs admin_action_logs[]
  
  @@unique([user_id])
  @@index([status])
}

/// Admin roles definitions - Implements RBAC structure for admins as specified in 03_user_architecture.md (RBAC & Access Escalation).
///
/// Defines system roles (superadmin, manager, reviewer, etc.), separate from assignments/membership. Maintains normalization by never storing user/admin data; this is a role catalog only. Example: a superadmin role is defined here, but not assigned to any admin until linked by admin_assignments. 
///
/// Special: No denormalization, 3NF enforced. Permissions linked in separate table, not here.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model admin_roles {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// System-wide role code - e.g. 'superadmin', 'manager'. Unique by code.
  code String
  
  /// Human-visible role name, for admin UI.
  name String
  
  /// Multi-line description for explainability/export.
  /// Never includes usage examples; atomic, textual info only.
  description String?
  
  //----
  // RELATIONS
  //----
  admin_assignments admin_assignments[]
  
  @@unique([code])
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Admin permissions catalog - Implements granularity required by permission matrix.
///
/// Defines each permission (by unique code)—separate catalog; individual grant/assignment in other tables. Maintains normalization; no user/admin linkage here. Example: permission to access audit logs is defined here, later assigned to roles/admins via assignments table.
///
/// Special: 3NF enforced, atomic codes only.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model admin_permissions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// System permission code/key, e.g., 'manage_users', 'view_logs'.
  code String
  
  /// Human-readable permission label.
  name String
  
  /// Long-form permission info.
  description String?
  
  //----
  // RELATIONS
  //----
  admin_assignments admin_assignments[]
  
  @@unique([code])
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Admin assignment/junction: which admins have which roles/permissions - Implements dynamic RBAC assignment workflow (see 03_user_architecture.md RBAC & Escalation).
///
/// Each row grants a role/permission to an admin. Fully normalized: only references/junction, no denormalized details. Example: assigning 'superadmin' to an admin is a row here; updating/removing is deleting/inserting rows (no pre-calculated, all atomic). 
///
/// Key relationships: Links admins, roles, permissions. 
/// Special: No status, only atomic links and audit timestamps.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model admin_assignments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked admin's {@link admins.id}.
  admin_id String @db.Uuid
  
  /// Linked role's {@link admin_roles.id}.
  role_id String? @db.Uuid
  
  /// Linked permission's {@link admin_permissions.id}.
  permission_id String? @db.Uuid
  
  /// Assignment timestamp - for RBAC and audit.
  /// Never calculated, atomic only.
  assigned_at DateTime @db.Timestamptz
  
  /// Assignment expiration (null if permanent). Maintains full normalization.
  expires_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  admin admins @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  role admin_roles? @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission admin_permissions? @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  
  @@index([role_id])
  @@index([permission_id])
  
  @@unique([admin_id, role_id, permission_id])
}

/// Admin action/audit logs - Implements required compliance and supervision per section 03_user_architecture.md (Admin Controls & Auditing).
///
/// Records all actions performed by admins for full traceability. Each row is a single atomic event. Enforces normalization—no denormalized summary/calculation; details (entity, type, timestamp, outcome) only. Example: if an admin escalates a role or processes a permission change, writes a row here.
///
/// Key relationships: Linked to admin, references which admin performed the action. 
/// Special: Details (outcome, entity, etc.) always atomic.
///
/// @namespace SellersAndAdmins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model admin_action_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Performing admin's {@link admins.id}.
  admin_id String @db.Uuid
  
  /// Type of action (e.g., 'role_escalation', 'account_review').
  /// Atomic, string only; not calculated.
  action_type String
  
  /// Entity affected (e.g., 'seller', 'order', 'user').
  entity_type String
  
  /// UUID of the affected entity, if any.
  entity_id String? @db.Uuid
  
  /// Outcome/result (e.g., 'success', 'failure', 'pending review').
  outcome String
  
  /// Optional text detail for extra context (never denormalized summary).
  /// Always atomic.
  details String?
  
  /// Action timestamp (occurrence time).
  /// Atomic and always set at insert, not calculated.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  admin admins @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  
  @@index([admin_id, created_at])
  @@index([action_type])
  @@index([details(ops: raw("gin_trgm_ops"))], type: Gin)
}
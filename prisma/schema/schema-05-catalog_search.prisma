/// Tag entity - Implements Product Domain's requirement for flexible, channel-customizable tags supporting advanced search, recommendations, and campaign targeting. 
///
/// Allows products to be grouped/found by arbitrary tags (e.g., 'Summer', 'AI', 'Eco-friendly'). Ensures 3NF by not storing tag lists in product directly and by normalizing to a separate entity linked by assignments.
///
/// Key relationships: channel, products via assignment. Special: channel-unique codes, i18n display names, soft delete for audit.
///
/// @namespace CatalogSearch
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model tags {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Belonged channel's {@link channels.id}. Fulfills the per-channel customization of taxonomies requirement.
  channel_id String @db.Uuid
  
  /// Unique tag code within a channel. Used for search URL, campaign linkage. Maintains 3NF as unique atomic value.
  code String
  
  /// Display label for tag. Enables i18n. Not derived. For example, 'Limited Edition'.
  name String
  
  /// Creation timestamp for auditing/tag lifecycle per compliance.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp for audit/triggers.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp; for legal/audit compliance. Null if active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@unique([channel_id, code])
  @@index([created_at])
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Product-Category Assignment - This implements the M:N linkage between products and categories as required in product ERD. Enables products to appear in multiple, channel-specific categories without denormalizing product/category records.
///
/// Maintains 3NF compliance via atomic product-category references. For example, one laptop listed under "Computers" and "Bestsellers". Key: bridges products to categories, channel is implicit via category. Composite PK prevents duplicate assignments.
/// Special: disallow duplicate, supports audit trail (created_at).
///
/// @namespace CatalogSearch
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model product_category_assignments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Assigned product's {@link products.id}. Fulfills ERD's need for category-product joins. Enforces atomic relationship for strict normalization.
  product_id String @db.Uuid
  
  /// Assigned category's {@link categories.id}. Permits products having multiple categories. Not nullable.
  category_id String @db.Uuid
  
  /// Assignment timestamp; satisfies audit requirement for all changes.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  product products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  
  @@unique([product_id, category_id])
  @@index([category_id])
}

/// Product Search Index - Implements advanced, AI-searchable, full-text search capabilities as required by Product Domain and Core System Concepts. 
///
/// Caches denormalized searchable representations of products for fast, faceted, and AI-optimized queries; all denormalized data is stored here, not in product table. For example, multi-field concatenated, language-keyed tokens, snapshot ref. 
///
/// Strictly materialized (material: true) per denormalization rules. Source-of-truth always in normalized tables; search_index is rebuilt as needed.
///
/// Key relationships: product, latest product_snapshot. Special: supports multilingual tokens, GIN index for fast query.
///
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model search_index {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Target product's {@link products.id}. Implements requirement to link searches to Living product record.
  product_id String @db.Uuid
  
  /// Latest product_snapshot used to build index. For AI-powered search and auditability; enables snapshot rollback rebuilding index.
  product_snapshot_id String @db.Uuid
  
  /// Full-text search tokens (multilingual, denormalized). Implements rapid, AI-optimized search over product fields/tags/cats. Strictly denormalized here as per materialized view policy. Atomic in materialized context.
  tokens String
  
  /// Language code for i18n tokenization. Enables full i18n search; compliant with localization requirements. For example, 'en', 'ko'.
  language String
  
  /// Index build timestamp for refresh/audit. Maintains integrity.
  created_at DateTime @db.Timestamptz
  
  /// Index last update.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  product products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_snapshot product_snapshots @relation(fields: [product_snapshot_id], references: [id], onDelete: Cascade)
  
  @@index([product_snapshot_id])
  
  @@unique([product_id])
  @@unique([product_id, language])
  @@index([tokens(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Search Query Log - Implements requirement for full auditability and AI/analytics for product search as outlined in AI/ML & Analytics requirements. Logs all user or system search queries for traceability, analytics, and dashboard features.
///
/// Maintains 3NF, each search event atomic and cross-linked; no aggregations here. For example, customer searches 'laptop under $1000', or admin sees trending queries. Key: references user (nullable), query string, metadata for analysis.
///
/// @namespace CatalogSearch
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model search_query_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// User's {@link users.id} if member. Nullable for guests as required. Enables cross-user analytics without breaking 3NF.
  user_id String? @db.Uuid
  
  /// Raw search input. Not pre-analyzed for normalization purposes. Used for recommendation, analytics. For example, 'wireless gaming mouse'.
  query String
  
  /// Language code for query as per localization requirement. For analysis and i18n.
  language String
  
  /// JSON-encoded filters (e.g., price range, categories). Atomic at this layer, denormalized summaries only in analytics/reporting. 3NF compliant as single value.
  filters String?
  
  /// Returned result count as direct metric, not derived. Used in analytics. Maintains atomicity.
  result_count Int @db.Integer
  
  /// Timestamp of the search event. Required for analytics/audit/log retention.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  @@index([created_at])
  @@index([query(ops: raw("gin_trgm_ops"))], type: Gin)
}
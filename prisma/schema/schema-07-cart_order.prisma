/// Persistent Shopping Cart - This implements requirements F1, F2, and the persistence requirements from section 5 of the requirements document (Cart & Order). 
///
/// Enables the creation and maintenance of persistent carts for both guest and logged-in users, supporting add-to-cart, cart migration, and cart session flows. Maintains 3NF compliance by storing only cart metadata and foreign keys; items are linked separately via cart_items. 
/// For example, a user adds items to a cart as a guest, then on login the cart is preserved and merged. Key relationships: links to users, cart_templates, and cart_items. Special behaviors: Cart soft delete, cross-session merging, and expiry logic.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model carts {
  //----
  // COLUMNS
  //----
  /// Primary Key. Unique identifier for each cart instance.
  id String @id @db.Uuid
  
  /// Belonged user's {@link users.id}. 
  /// Represents ownership or shopper identity if known, for migration and analytics. Can be null for guest carts.
  user_id String? @db.Uuid
  
  /// Session identifier - Implements cart persistence and migration requirements.
  /// Links this cart to a specific device/session, especially for guests. Ensures normalization by storing only reference, not user detail. For example, allows linking guest cart to user upon login.
  session_token String
  
  /// Cart expiry time - Implements session/expiry requirements.
  /// Business meaning: When this cart is scheduled for auto-deletion if not acted upon. Enforces cart lifecycle logic without embedding status logic in this table. For example, if the cart is inactive past this datetime, it is eligible for auto-removal.
  expires_at DateTime @db.Timestamptz
  
  /// Creation timestamp - Implements audit/auditability requirements.
  /// Records true creation time. Ensures temporal data tracking without redundant calculation. For example, aids in tracking abandoned carts via analytics.
  created_at DateTime @db.Timestamptz
  
  /// Last update timestamp - Implements audit tracking.
  /// Marks when the cart was last modified. For example, supports abandonment analytics.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-delete timestamp - Implements compliance/immutability requirements.
  /// Soft deletion for recovery/audit. For example, a user 'deletes' a cart but data is retained for audit.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  cart_items cart_items[]
  orders orders[]
  
  @@unique([user_id, session_token])
  @@index([expires_at, updated_at])
}

/// Individual Item in Cart - Fulfills persistence, auditability, and normalization requirements from section 5.4. 
///
/// Represents a single product entry in a cart, fully normalized (3NF) with references to cart, product_variant, and all option selections. No calculated totals stored here; only atomic data and references. Example: a line for 2 units of a specific variant in John Doe's cart. Key relationships: cart, product_variant, references option values via assignment tables. Special behaviors: None—snapshotted via cart/session, not here.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model cart_items {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Belonged cart's {@link carts.id}. 
  /// Links this item to a parent cart; preserves normalization by not duplicating any cart metadata.
  cart_id String @db.Uuid
  
  /// Product variant reference {@link product_variants.id}. 
  /// Points to exact variant, allowing for flexible options/attributes. Maintains atomic linkage for inventory, pricing, and fulfillment.
  product_variant_id String @db.Uuid
  
  /// Quantity of product - Fulfills cart line persistence. How many units user intends to purchase of this variant. Not calculated—updated atomically by user only. For example, quantity=3 if adding 3 T-shirts of same color/size.
  quantity Int @db.Integer
  
  /// User-provided memo - (Optional) e.g., gift message or customization. Ensures normalization by not embedding user meta in main cart table. For example, note = 'birthday surprise'.
  note String?
  
  /// Creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-delete timestamp for recovery, audit trails. Marked when removed from cart but still retained in DB for analytics/audit.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  cart carts @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product_variant product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  
  @@index([product_variant_id])
  
  @@unique([cart_id, product_variant_id])
  @@index([cart_id])
}

/// Saved Cart Template - Implements requirements for saved, repeatable cart configurations (section 5.4). 
///
/// Enables users to save named cart configurations for quick future purchases. Maintains normalization by separating template meta from items. Example: 'Monthly groceries' template for easy re-use. Key relationships: user, template items (references to cart_items reused or copied). Special behaviors: None; versioned for snapshotted audit elsewhere.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model cart_templates {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Owner user's {@link users.id}. For access-control and per-user template folders.
  user_id String @db.Uuid
  
  /// Template name - Required; e.g., 'Weekly shopping'. Business meaning: user-facing and used for selection/listing. Only the name and reference, not contents, are stored here.
  name String
  
  /// Creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, name])
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Order Parent Record - Fulfills requirements for full order workflow, auditability, and partial/after-sales support from section 5.4–5.6.
///
/// Contains high-level order metadata, referencing user, channel, payment, etc. Snapshot enables immutable audit history; all workflow status/timing handled via separate status and item tables for strict normalization. Example: an order placed after checkout, tracking status but not calculated totals. Key relationships: user, channel, status history, items, payments. Special behaviors: soft delete, audit log linkage.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model orders {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order owner user {@link users.id} for permission, fulfillment, and analytics.
  user_id String @db.Uuid
  
  /// Channel for order {@link channels.id}; supports multichannel separation for operational/analytic needs.
  channel_id String @db.Uuid
  
  /// Originating cart's {@link carts.id}; tracks cart->order transitions, abandoned carts, and history.
  cart_id String? @db.Uuid
  
  /// Order number - Implements unique tracking per channel; not a calculated field. Used for customer references, fulfillment, legal compliance. Patterned by channel settings.
  order_number String
  
  /// Canonical status key (e.g., Placed, Paid, Shipped, Delivered, Returned) - Implements decoupled, normalized workflow. All transitions are tracked in order_status_histories, but the main status for quick fetch is on this record. No calculation, just snapshot of latest state.
  status String
  
  /// Order placement timestamp. When checkout was finalized.
  placed_at DateTime @db.Timestamptz
  
  /// Order-level cancellation timestamp. If present, the order was cancelled (audit not deleted).
  cancelled_at DateTime? @db.Timestamptz
  
  /// Order-level completion timestamp. For workflow, compliance, and analytic purposes.
  completed_at DateTime? @db.Timestamptz
  
  /// Creation timestamp. For true record creation (audit/auditability).
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp. When order was last changed (status/item etc).
  updated_at DateTime @db.Timestamptz
  
  /// Soft-delete timestamp, for data retention/audit/legal proof. Never physically removed.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  cart carts? @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  
  order_items order_items[]
  order_status_histories order_status_histories[]
  payments payments[]
  shipments shipments[]
  order_snapshots order_snapshots[]
  order_audit_logs order_audit_logs[]
  ai_fraud_checks ai_fraud_checks[]
  
  @@index([channel_id])
  @@index([cart_id])
  
  @@unique([order_number, channel_id])
  @@index([user_id])
  @@index([order_number(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Normalized Item within Order - Implements requirements for item-level audit, atomic fulfillment, and workflow (section 5.4, 5.6).
///
/// Represents a distinct purchased variant per order; maximum normalization (3NF). Product, price, and calculated values snapshot-referenced, not pre-computed. Example: 4 shirts in size/color for a single order. Key relationships: orders (parent), product_variant. Special behaviors: strictly atomic—every order modification triggers a new snapshot elsewhere.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model order_items {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Parent order's {@link orders.id}.
  order_id String @db.Uuid
  
  /// Purchased product reference {@link product_variants.id} (snapshot-linked for price/audit).
  product_variant_id String @db.Uuid
  
  /// Quantity purchased for this variant (atomic, only updated at placement/amend).
  quantity Int @db.Integer
  
  /// (Optional) order-level comment or instructions for this item.
  note String?
  
  /// Creation timestamp for item audit trail.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp for change-tracking.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-delete marker for item removal after placement (audit only).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_variant product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  
  returns returns[]
  exchanges exchanges[]
  
  @@index([product_variant_id])
  
  @@unique([order_id, product_variant_id])
  @@index([order_id])
}

/// Order Status Transition History - Implements full audit of all order workflow transitions per compliance/audit requirements from sections 5.4–5.6.
///
/// Each record represents one order status change, with actor, comment, and timestamp. 3NF: does not store order data, only references status/action. Example: order transitions from "Placed" to "Paid" by system or admin. Key relationships: order; special behaviors: fully temporal (new record for every change).
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model order_status_histories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Parent order's {@link orders.id}.
  order_id String @db.Uuid
  
  /// Responsible user's {@link users.id} (customer/admin/seller/ai etc) who triggered this status change. Supports audit/compliance traceability.
  actor_id String @db.Uuid
  
  /// Previous order status, for state transition (never calculated).
  from_status String
  
  /// New order status effective after this event.
  to_status String
  
  /// Optional memo, e.g. 'Auto-cancelled due to timeout', 'Admin override'.
  comment String?
  
  /// Timestamp for when status change occurred.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  actor users @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([order_id, created_at])
}

/// Payment Info Record - Fulfills requirements for payment decoupling, refund support, legal audit (from section 5.4, 5.6).
///
/// One record per payment event (not always per order), referencing order, channel, and payment method. 3NF: no pre-calculated totals; status is current event-state, audit preserved elsewhere. Special behaviors: refund, multi-method support. Example: customer splits payment on card + deposit for partial order. Key relationships: order, user, channel.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model payments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Paid order's {@link orders.id} (can be null if pre-authorized/refunded before order finalization).
  order_id String @db.Uuid
  
  /// Paying user's {@link users.id} for compliance and refund.
  user_id String @db.Uuid
  
  /// Sale channel's {@link channels.id} for multi-channel operations.
  channel_id String @db.Uuid
  
  /// Type of payment; e.g., card, deposit, paypal, etc.
  payment_method String
  
  /// Reference to external gateway or processor transaction (when available). Needed for audit/troubleshooting. Not calculated; directly from integrator.
  external_transaction_id String?
  
  /// Current payment status (e.g., approved, failed, refunded, cancelled). For workflow, not calculation.
  status String
  
  /// Timestamp when payment was successfully completed (null if pending/failed).
  paid_at DateTime? @db.Timestamptz
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Last update timestamp.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@index([channel_id])
  
  @@index([order_id])
  @@index([user_id])
}

/// Order Shipment - Implements requirement for staged/partial shipping, compliance traceability (section 5.4, 5.6).
///
/// One record per (partial) shipment. 3NF: maintains normalized reference-only data, no aggregates. Links to key shipment milestones, actor, and order. Key relationships: order, actor (fulfiller/admin/carrier), supports partial fulfillment. Example: split shipment sent in two boxes by different carriers. Special behaviors: supports both full and partial shipments.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shipments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order associated with this shipment {@link orders.id}.
  order_id String @db.Uuid
  
  /// Actor responsible for shipment (e.g., seller, warehouse worker, carrier) {@link users.id} for complete audit traceability.
  actor_id String @db.Uuid
  
  /// Carrier-assigned tracking code (user/business visible); not calculated.
  tracking_number String?
  
  /// Shipping carrier or method; e.g., DHL, Local Fleet, Pickup.
  carrier String
  
  /// Current shipping status, e.g., prepared/shipped/in-transit/delivered/returned. Workflow-only; all transitions kept elsewhere for audit.
  status String
  
  /// Actual time package left for delivery.
  shipped_at DateTime? @db.Timestamptz
  
  /// Confirmed delivery timestamp (proof for completed status).
  delivered_at DateTime? @db.Timestamptz
  
  /// Creation timestamp for shipment audit trail.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  actor users @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([order_id])
}

/// Order Return Transaction - Fulfills after-sales, refund, and workflow requirements (see section 5.4, 5.6). 
///
/// Represents a customer-initiated return event for a specific order item. 3NF: Each reason and item is always referenced, never duplicated. Example: customer returns a single product; one record per returned item with reason, audit state. Linked to refunds elsewhere. Key relationships: order_item, user (requester), status/audit log. Special behaviors: only one open return per item at once.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model returns {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order item being returned {@link order_items.id}.
  order_item_id String @db.Uuid
  
  /// User who initiated the return {@link users.id}.
  user_id String @db.Uuid
  
  /// Return reason as stated by the user (e.g., defective, wrong item). Text, not calculated.
  reason String
  
  /// Workflow status (e.g., requested, approved, rejected, completed).
  status String
  
  /// Timestamp of when return was initiated.
  requested_at DateTime @db.Timestamptz
  
  /// Completion timestamp for final audit trail.
  completed_at DateTime? @db.Timestamptz
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order_item order_items @relation(fields: [order_item_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  
  @@index([order_item_id])
}

/// Order Exchange Transaction - Fulfills after-sales (exchange) compliance, workflow, and user satisfaction requirements (sections 5.4, 5.6).
///
/// One record per exchange event. 3NF: Links only to item and user/requester, with details/notes for exchange reason. Example: user exchanges a shirt for another size. Audit and resolution tracked here. Key relationships: order_item, user. Special behaviors: only one open exchange per item; resolved by workflow.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model exchanges {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order item being exchanged {@link order_items.id}.
  order_item_id String @db.Uuid
  
  /// User requesting exchange {@link users.id}.
  user_id String @db.Uuid
  
  /// Exchange reason as provided by user. e.g., wrong size/color.
  reason String
  
  /// Workflow status (e.g., requested, approved, shipped, rejected, completed).
  status String
  
  /// Initiation timestamp for exchange process.
  requested_at DateTime @db.Timestamptz
  
  /// Timestamp for completion/resolution of exchange.
  completed_at DateTime? @db.Timestamptz
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order_item order_items @relation(fields: [order_item_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  
  @@index([order_item_id])
}

/// Order Snapshot - Implements full immutable order editing/versioning, audit requirements for legal and compliance from section 5.4. 
///
/// One snapshot issued for every order change/amend. Allows rollback, auditability, and reconstitution of historical order states. 3NF: all snapshot data here, no redundancy/calc in main order table. Key relationships: order, user (actor). Special behaviors: append only, never modified/deleted.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model order_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// The order this snapshot belongs to {@link orders.id}.
  order_id String @db.Uuid
  
  /// Actor responsible for the snapshot (user/admin) {@link users.id}.
  actor_id String @db.Uuid
  
  /// Serialized JSON blob representing the full order state for this snapshot (for rollback/audit).
  snapshot_data String
  
  /// Issuance timestamp for snapshot.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  actor users @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([order_id, created_at])
}

/// Order Audit Log - Implements requirement for tracking all order-related user/admin/system actions for compliance (section 5.4–5.6).
///
/// 3NF: logs discrete user/system act per order (status change, payment attempt, edit). Key relationships: order, user. Special behaviors: full temporal log retained for legal proof and troubleshooting.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model order_audit_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order being audited {@link orders.id}.
  order_id String @db.Uuid
  
  /// Actor responsible for action (may be null for automated/system) {@link users.id}.
  user_id String? @db.Uuid
  
  /// Type of action (e.g., 'status_change', 'payment', 'shipment', 'return', 'change', 'system_audit').
  action_type String
  
  /// Additional serialized data (JSON) for auditing; not calculated here, only referenced.
  action_data String?
  
  /// Timestamp of log entry creation.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  
  @@index([order_id, created_at])
}

/// AI Fraud Check Event - Implements real-time and logging of anti-fraud decisions during checkout as per section 5.4, 10.AI/ML. 
///
/// One per order or attempted order, appends AI-provided fraud check and explainability log. 3NF: refers only to original order, user, and normalized output fields. Example: AI model flags order as high risk before payment is processed. Key relationships: order, user. Special behaviors: immutable, append only, legal proof.
///
/// @namespace CartOrder
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_fraud_checks {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order being checked or attempted {@link orders.id}.
  order_id String @db.Uuid
  
  /// Owner/user for compliance, analysis {@link users.id}.
  user_id String @db.Uuid
  
  /// Name of fraud model/service used (for audit, explainability).
  ai_model_name String
  
  /// Numeric risk score assigned by AI engine; not pre-calc'd elsewhere.
  score Float @db.DoublePrecision
  
  /// System-usable fraud status (e.g., Pass, Fail, Review).
  decision String
  
  /// Model's human-readable explainability output. Serialized blob.
  explanation String?
  
  /// Fraud check timestamp (audit/correlation point).
  checked_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  
  @@index([order_id, checked_at])
}
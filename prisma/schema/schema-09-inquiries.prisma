/// Support Ticket Entity - This implements the service support and inquiry feature requirements from the backend requirements analysis, particularly relating to customer service workflows and support escalation (see EARS statements about ticketing, AI escalation, and compliance logging). 
/// This table models customer-initiated service requestsâ€”used for tracking issues, questions, and operational problems faced by customers, sellers, or administrators. It enables robust, auditable support workflows and links to related users by foreign keys (referencing pre-existing user tables). Maintains full 3NF normalization: All attribute data is atomic, and references are by foreign keys only. No pre-calculated or summary fields are present. Key relationships: links (via foreign keys) to users (customers, sellers, admins) in already-existing tables; referenced by audit/logging modules in other schemas. Special behaviors: status transitions (open, assigned, resolved, closed); fully audit-trailed via timestamp fields; supports escalation, categorization, and assignment. Sensitive information must be subject to compliance logging.
///
/// @namespace Inquiries
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_support_tickets {
  //----
  // COLUMNS
  //----
  /// Primary Key. Uniquely identifies each support ticket.
  id String @id
  
  /// User's {@link aimall_backend_customers.id}, {@link aimall_backend_sellers.id}, or {@link aimall_backend_administrators.id} who created the support ticket. Enables reference to the actor initiating the ticket for compliance and support workflow.
  requester_id String
  
  /// Assigned admin's {@link aimall_backend_administrators.id}, if a ticket has been assigned to a staff member for handling. Tracks responsibility delegation in support workflow.
  assignee_admin_id String?
  
  /// Support ticket subject line - Implements the summary/short title requirement. Business meaning: customer-provided or system-generated one-line description for ticket triage (e.g., 'Order not received', 'Billing error'). Atomic, required for efficient ticket queue management.
  subject String
  
  /// Support ticket full request detail - Implements the main description field. This is the message or inquiry provided by the user, containing all specifics of the case. Must be stored as a string (may contain markup/HTML). Strictly atomic and normalized.
  body String
  
  /// Ticket status - Implements the workflow state for tracking open, pending, resolved, or closed support requests. Suggested enum values: 'open', 'pending', 'resolved', 'closed', but allows string for forward-compatibility with workflow engines. Always atomic and only represents the current state, not calculated. Used for ticket queue filtering.
  status String
  
  /// Priority flag (e.g., 'low','normal','high','urgent') - Implements support triage requirement. Indicates urgency for staff response and routing. Not calculated; strictly atomic and can be updated per ticket system business rules.
  priority String
  
  /// Ticket category - Implements requirement for classification/tagging (e.g., 'payment', 'delivery', 'product', 'technical', 'account') for reporting, agent assignment, and workflow. Always atomic and reflects user/system selection upon ticket submission.
  category String
  
  /// Ticket creation timestamp - Implements requirement for audit trails, SLAs, and tracking. Indicates when the ticket was submitted. Not nullable per compliance requirements.
  created_at DateTime
  
  /// Ticket last update timestamp - Ensures audit log compliance and enables support workflow monitoring (e.g., for SLA violation, escalation checks). Updated on every atomic change to the ticket.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  fk_support_ticket_requester_id aimall_backend_customers @relation(fields: [requester_id], references: [id], onDelete: Cascade)
  fk_support_ticket_assignee_admin_id aimall_backend_administrators? @relation(fields: [assignee_admin_id], references: [id], onDelete: Cascade)
  
  @@unique([requester_id, created_at])
  @@index([status])
  @@index([priority])
  @@index([created_at])
  @@index([assignee_admin_id])
}

/// FAQ Entity - This implements the knowledge base/self-service feature from the requirements, enabling listing and maintaining frequently asked questions to improve user self-resolution and reduce support load (see EARS requirements for knowledge management and ticket deflection). Models a single FAQ record (question-answer pair), fully atomic and referenceable in a normalized fashion. Allows categorization and keyword search. There is no denormalization or calculated data. Example usage: customer accesses FAQ for 'Payment not processed', gets guided advice, reducing incoming support tickets. Key relationships: can be referenced from support tickets (for self-service deflection statistics), links only via reference IDs as required by normalized modeling guidelines. Special behaviors: supports category-tag filtering, allows soft update of content/visibility for compliance (e.g. hiding outdated answers).
///
/// @namespace Inquiries
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model aimall_backend_faqs {
  //----
  // COLUMNS
  //----
  /// Primary Key. Uniquely identifies each FAQ entry.
  id String @id
  
  /// FAQ question - Implements requirement for FAQ knowledge base questions. Short, atomic, and searchable (used as main text for user lookup).
  question String
  
  /// FAQ answer - Implements knowledge base content for most common inquiries. May contain rich/HTML content for effective guidance. Atomic, not calculated, and strictly normalized.
  answer String
  
  /// FAQ category - Implements requirement for classification/tagging, enabling search and filtering over large FAQ databases. Examples: 'order', 'payment', 'product', 'account'. Strictly atomic and normalized.
  category String
  
  /// Manual sort order for display - Implements the need for prioritized/ordered FAQ listing (e.g., order by popularity, admin-set priority). Atomic integer, not calculated.
  sort_order Int
  
  /// Visibility flag - Implements soft hide/archive policy for outdated or admin hidden FAQs. If false, FAQ is hidden from customer view but still exists for audit/compliance records. Fully atomic, normalized.
  visible Boolean
  
  /// FAQ creation timestamp - For audit log compliance and historical analysis. Indicates when FAQ entry was created/published. Always required; never nullable per compliance tracing.
  created_at DateTime
  
  /// FAQ last updated timestamp - Maintains revision history compliance; updated on any change to the question or answer. Atomic, not calculated, strictly normalized.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  @@index([category])
  @@index([sort_order])
  @@index([visible])
}
/// Notification record - This implements the requirement for auditable, multi-channel notification delivery tracing (from requirements in sections 11 and 8). 
///
/// Stores every notification event (outgoing or incoming, e.g., in-app, email, SMS, push) with contextual references to user, channel, template, and audit trace. Maintains 3NF by separating notification instance from preference, template, and user profile data. Example: An order shipment email or real-time push notification for a user's cart event.
///
/// Key relationships: links to users, notification_templates, channels. Special behaviors: ensures compliance and audit via immutable log, supports multi-language and multi-channel notification context.
///
/// @namespace NotificationLocalization
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model notifications {
  //----
  // COLUMNS
  //----
  /// Primary Key - Unique identifier of the notification event.
  id String @id @db.Uuid
  
  /// Related user's {@link users.id} - Reference to the recipient or sender user entity.
  /// Ensures traceability for auditing and permission enforcement.
  user_id String @db.Uuid
  
  /// Delivery channel's {@link channels.id} - Reference to the delivery channel (e.g., email, push, SMS, in-app).
  /// Fully normalized: channel properties are not repeated, but referenced.
  channel_id String @db.Uuid
  
  /// Used template's {@link notification_templates.id} - Points to the template used for rendering this notification.
  /// Supports i18n by referencing language-specific templates, keeps payload normalized.
  notification_template_id String @db.Uuid
  
  /// Send time - Implements requirement for immutable, timestamped event log.
  /// Indicates when the notification was delivered or attempted. 3NF: Atomic timestamp, not calculated.
  sent_at DateTime @db.Timestamptz
  
  /// Delivery status - Tracks status (delivered, failed, queued, etc.); implements compliance/audit tracing.
  /// Atomic field, not derived. Example: 'delivered', 'failed', 'pending'.
  status String
  
  /// Delivery type - Indicates the method (e.g., email, push, SMS, in-app) as required for multi-channel support in requirements.
  /// Not calculated; used for channel-specific routing and compliance logging. Example: 'email'.
  delivery_type String
  
  /// Notification content - Raw body/content sent. Maintains normalization: full message content as rendered at time of send; not derived or recalculated.
  /// Example: HTML for email, text for SMS, JSON for push.
  payload String
  
  /// Failure reason - If notification failed, records error for audit; optional (nullable).
  /// Supports regulatory need for explainability. Example: 'SMTP AUTH failed', 'push expired'.
  failure_reason String?
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  template notification_templates @relation(fields: [notification_template_id], references: [id], onDelete: Cascade)
  
  @@index([channel_id])
  @@index([notification_template_id])
  
  @@unique([user_id, sent_at, notification_template_id])
  @@index([status, sent_at])
  @@index([payload(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Notification template - Implements the requirement for structured, versioned, and localized message templates for notifications (Reqs: 11, 8, 4).
///
/// Represents template metadata supporting multi-language (i18n) via locale and type fields; supports versioning, editing, and assignment to notifications without pre-rendering (3NF compliance). Example: English vs Korean order confirmation email templates.
///
/// Key relationships: linked by notifications and used by localization_strings. Special behaviors: Immutable template references by notifications; not duplicated in notification records.
///
/// @namespace NotificationLocalization
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model notification_templates {
  //----
  // COLUMNS
  //----
  /// Primary Key - Unique ID for the template.
  id String @id @db.Uuid
  
  /// Channel's {@link channels.id} - Indicates which channel this template is configured for (e.g., store-specific notifications).
  channel_id String @db.Uuid
  
  /// Message type - Indicates business context, like 'order_created', 'shipment', 'password_reset'. Normalized atomic code, not calculated.
  type String
  
  /// Language/locale code - Specifies language for this template (e.g., 'en-US', 'ko-KR'). Atomic 3NF field supporting i18n.
  locale String
  
  /// Template title - Visible name, e.g., 'Order Confirmation'. Enables search and management interface filtering. 3NF: not duplicated elsewhere.
  title String
  
  /// Template content - Un-rendered message content (may contain placeholders for variables, e.g., {{user_name}}). Template logic not evaluated here; 3NF: atomic configuration only.
  content String
  
  /// Template version - For managing updates and tracking historical changes. Fulfills audit/version-control requirement. Not calculated; increments on change.
  version Int @db.Integer
  
  /// Active flag - Whether this template is currently in use (for assignment, A/B testing, or phased rollout). 3NF: separated from notification record.
  is_active Boolean
  
  //----
  // RELATIONS
  //----
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  notifications notifications[]
  
  @@unique([type, channel_id, locale, version])
  @@unique([channel_id, title, version])
  @@index([type, locale])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Notification preference - Implements user-configurable, channel-specific notification settings (from requirements 11 and 8).
///
/// Defines user's opt-in/out state for various notification types and channels, fully normalized from notification or user records. Example: User chooses to receive email but not SMS for order updates.
///
/// Key relationships: links users and channels to notification type (by code). Special behaviors: per-template granularity, searchable for opt-out management.
///
/// @namespace NotificationLocalization
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model notification_preferences {
  //----
  // COLUMNS
  //----
  /// Primary Key - Unique preference entry.
  id String @id @db.Uuid
  
  /// User's {@link users.id} - Preference owner, enforcing 3NF; no duplicated user fields.
  user_id String @db.Uuid
  
  /// Channel's {@link channels.id} - Specifies which sales/storefront the preference applies to.
  channel_id String @db.Uuid
  
  /// Notification type code - E.g., 'order_update', 'promotion'. 3NF; codes are not duplicated or calculated from templates.
  notification_type String
  
  /// Channel type - E.g., 'email', 'push', 'sms'. Used for channel-specific preference toggling. Not a calculated/aggregated field.
  delivery_type String
  
  /// Opt-in status - True if user wants to receive this notification. 3NF: Each preference is atomic to user/channel/type combination.
  enabled Boolean
  
  //----
  // RELATIONS
  //----
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, channel_id, notification_type, delivery_type])
  @@index([channel_id, notification_type, enabled])
  @@index([notification_type(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Localization string - Implements the requirement for structured string management supporting app-wide i18n (from section 11).
///
/// Each record manages a translatable key, locale, and value, referenced by templates and UI logic. Example: 'welcome_message' in many languages. Maintains 3NF by not duplicating content and allowing multi-locale coverage per key.
///
/// Key relationships: referenced by notification_templates, UI, and analytics dashboards. Special behaviors: enables search, versioning, and export for translators.
///
/// @namespace NotificationLocalization
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model localization_strings {
  //----
  // COLUMNS
  //----
  /// Primary Key - Unique identifier for the localization record.
  id String @id @db.Uuid
  
  /// Translation key - Unique identifier for phrase/string. 3NF: Atomic and not duplicated. Example: 'cart_empty_message'.
  key String
  
  /// Language/locale code - E.g., 'en-US', 'zh-CN'. Enables full i18n coverage by record, normalized per key/locale.
  locale String
  
  /// Translated string value - Target-language translation of the key. 3NF, not calculated or aggregated.
  value String
  
  /// Version - Changes to content increment version for traceability. Allows full rollback. 3NF: atomic versioning, no derived data.
  version Int @db.Integer
  
  /// Context info - Optionally describes usage or screen (e.g., 'order page header'). 3NF, atomic documentation. Nullable by business requirement.
  context String?
  
  //----
  // RELATIONS
  //----
  @@unique([key, locale, version])
  @@index([context])
  @@index([value(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Localization file - Implements requirement for batch/large-volume localization artifacts (section 11, i18n pipeline support).
///
/// References uploaded files (archives or spreadsheets) containing string tables for bulk import/export, versioning, or language pack delivery. 3NF: all file metadata atomic, not pre-computed. Example: Excel file upload for new locale.
///
/// Key relationships: can be linked to channels or import jobs, notifies admins on changes. Special behaviors: triggers UI updates, tracks import versioning.
///
/// @namespace NotificationLocalization
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model localization_files {
  //----
  // COLUMNS
  //----
  /// Primary Key - Unique ID for uploaded localization file.
  id String @id @db.Uuid
  
  /// Channel's {@link channels.id} - Indicates channel context for bulk localization. 3NF, does not duplicate channel data.
  channel_id String @db.Uuid
  
  /// File name - Original file upload name (e.g., 'ko-strings-v2.xlsx'). 3NF: atomic metadata, no duplication.
  file_name String
  
  /// Upload time - Timestamp when file ingested. 3NF, atomic, used for trace/audit.
  uploaded_at DateTime @db.Timestamptz
  
  /// Uploader's {@link users.id} - User/admin who uploaded the file.
  /// Foreign key stored as UUID for privacy; reference managed by business process.
  uploaded_by String @db.Uuid
  
  /// File URL - CDN/object storage pointer (signed or open link). No denormalized/cached content here. 3NF: atomic reference.
  file_url String @db.VarChar(80000)
  
  /// File version - Supports localization versioning logic. Increments on update. Not derived/calculated.
  version Int @db.Integer
  
  //----
  // RELATIONS
  //----
  channel channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  @@unique([channel_id, file_name, version])
  @@index([uploaded_at])
}
import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAdminActionLog } from "../../structures/IAdminActionLog";
import { IPageIAdminActionLog } from "../../structures/IPageIAdminActionLog";

/**
 * Create (record) new admin action log entry (admin_action_logs table).
 *
 * POST /adminActionLogs creates a new admin action log entry. Use this to
 * record a supervision event, security action, privilege escalation, or
 * compliance eventâ€”each action is an atomic board event, referencing the acting
 * admin, affected entity, action type, and details. Request must provide the
 * required fields for log creation (admin_id, action_type, entity_type,
 * outcome, created_at, [optional] details/entity_id).
 *
 * On success, returns the created log entry. Calls require proper privilege
 * (admin/logging rights). All creates are themselves audit-logged (meta-audit).
 * Related endpoints: PATCH/PUT for modification, DELETE for removal, GET for
 * detailed view.
 *
 * @param props.body Information needed to create an admin action log entry
 *   (admin_id, action_type, entity_type, outcome, etc).
 * @path /adminActionLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Information needed to create an admin action log entry (admin_id,
     * action_type, entity_type, outcome, etc).
     */
    body: IAdminActionLog.ICreate;
  };
  export type Body = IAdminActionLog.ICreate;
  export type Response = IAdminActionLog;

  export const METADATA = {
    method: "POST",
    path: "/adminActionLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/adminActionLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminActionLog => typia.random<IAdminActionLog>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search admin action logs (admin_action_logs table), supporting filters
 * and paging.
 *
 * PATCH /adminActionLogs lists and searches admin action logs. This allows
 * filtering logs by admin, action type, entity, outcome, or timespan. Paging
 * and sorting by created_at are supported for scalable log reviews/audits.
 *
 * All log accesses are permission-checked and audit-trailed, in line with
 * business compliance. Large log volumes are handled via paged results with
 * summary metadata. Related endpoints: POST for creation, PUT for update,
 * DELETE for removal, GET for single record view.
 *
 * @path /adminActionLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(connection: IConnection): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
      );
}
export namespace patch {
  export type Response = IPageIAdminActionLog;

  export const METADATA = {
    method: "PATCH",
    path: "/adminActionLogs",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/adminActionLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAdminActionLog => typia.random<IPageIAdminActionLog>(g);
  export const simulate = (connection: IConnection): Response => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch single admin action audit log (admin_action_logs table) by ID.
 *
 * GET /adminActionLogs/{id} fetches a single admin action log entry, providing
 * full details of the admin action event for deep audit or case investigation.
 *
 * Security: Access to detailed log entries is permission-checked and
 * audit-trailed. If the entry does not exist or is deleted, returns 404. The
 * result includes referenced admin, action type, entity, entity_id, and
 * additional event detail/context.
 *
 * @param props.id Target admin action log's ID
 * @path /adminActionLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target admin action log's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdminActionLog;

  export const METADATA = {
    method: "GET",
    path: "/adminActionLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/adminActionLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminActionLog => typia.random<IAdminActionLog>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update admin action log entry (admin_action_logs table) by ID.
 *
 * PUT /adminActionLogs/{id} updates an existing admin action log entry. This is
 * used to modify the event outcome, add incident details, or set a resolution
 * status during review or incident handling. The request body contains the
 * updatable fields (outcome, details, entity_id, etc.), which are validated for
 * correctness and audit history.
 *
 * Every update is audit-logged, with detailed before/after states tracked for
 * compliance. 404 returns if the entry doesn't exist/deleted. Related: GET for
 * verification, DELETE for removal, POST for creation.
 *
 * @param props.id Target admin action log's ID
 * @param props.body Fields exposed for admin log update (outcome, details,
 *   entity_id, etc.).
 * @path /adminActionLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target admin action log's ID */
    id: string & tags.Format<"uuid">;

    /**
     * Fields exposed for admin log update (outcome, details, entity_id,
     * etc.).
     */
    body: IAdminActionLog.IUpdate;
  };
  export type Body = IAdminActionLog.IUpdate;
  export type Response = IAdminActionLog;

  export const METADATA = {
    method: "PUT",
    path: "/adminActionLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/adminActionLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminActionLog => typia.random<IAdminActionLog>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete (soft delete) admin action log entry (admin_action_logs table) by ID.
 *
 * DELETE /adminActionLogs/{id} performs a soft delete of a log entry, flagging
 * it as deleted but preserving the record in audit history. Soft delete
 * disables the entry from normal search/listing, but allows full review for
 * audit/compliance. This action is logged itself (meta-audit). 404 on not
 * found/deleted.
 *
 * Used for compliance, data lifecycle management, and incident resolution
 * tracking. Related endpoints: PATCH for search, GET for fetch, PUT for update,
 * POST for creation.
 *
 * @param props.id Target admin action log's ID
 * @path /adminActionLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target admin action log's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdminActionLog;

  export const METADATA = {
    method: "DELETE",
    path: "/adminActionLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/adminActionLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminActionLog => typia.random<IAdminActionLog>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

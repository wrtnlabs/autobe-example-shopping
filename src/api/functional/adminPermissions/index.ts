import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAdminPermission } from "../../structures/IAdminPermission";
import { IPageIAdminPermission } from "../../structures/IPageIAdminPermission";

/**
 * Create a new adminPermission (admin_permissions table).
 *
 * This API operation enables privileged admin users to create new admin
 * permissions in the 'admin_permissions' table. Typical fields are code
 * (unique), name (display), and description (help/purpose). The request body
 * must adhere to all validation and uniqueness rules as defined in the schema.
 *
 * Successful creation is audit-logged. Assignment to roles/admins is handled
 * separately. Attempts to create duplicate permission codes or reserved
 * permissions are blocked with appropriate error messages. This endpoint is
 * part of the full RBAC admin API set.
 *
 * All new permissions become immediately available for assignment to admin
 * roles in related endpoints.
 *
 * @param props.body Admin permission creation payload.
 * @path /adminPermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Admin permission creation payload. */
    body: IAdminPermission.ICreate;
  };
  export type Body = IAdminPermission.ICreate;
  export type Response = IAdminPermission;

  export const METADATA = {
    method: "POST",
    path: "/adminPermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/adminPermissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminPermission => typia.random<IAdminPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search adminPermissions (admin_permissions table), paginated.
 *
 * This API operation retrieves a searchable, paginated list of admin permission
 * definitions from the 'admin_permissions' table. Query parameters can include
 * filters (by code, name), sorting, and pagination controls (page, size). The
 * operation supports RBAC checks ensuring only entitled admin users can view
 * permission definitions.
 *
 * Returned data includes code, name, description, and any auxiliary metadata.
 * This endpoint works with POST/GET/PUT/DELETE /adminPermissions endpoints to
 * enable full RBAC assignment, permission review, and compliance audits. No
 * permissions are modified by use of this endpoint.
 *
 * If the list is empty or filters yield no results, an empty result set is
 * returned. Typical use cases include audit dashboards, assignment tools, and
 * permission management UIs.
 *
 * @param props.body Admin permissions retrieval request; filters and pagination
 *   parameters.
 * @path /adminPermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Admin permissions retrieval request; filters and pagination
     * parameters.
     */
    body: IAdminPermission.IRequest;
  };
  export type Body = IAdminPermission.IRequest;
  export type Response = IPageIAdminPermission;

  export const METADATA = {
    method: "PATCH",
    path: "/adminPermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/adminPermissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAdminPermission => typia.random<IPageIAdminPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details of a single adminPermission (admin_permissions table).
 *
 * This API operation fetches the complete definition of a single admin
 * permission using its unique ID from the 'admin_permissions' table. All atomic
 * fields (code, name, description) are returned. The endpoint is
 * permission-controlled by admin RBAC.
 *
 * Use cases include reviewing specific permissions, displaying permission
 * details in management dashboards, or auditing assigned permissions. Works
 * alongside list, update, delete, and create endpoints as part of RBAC full
 * lifecycle.
 *
 * Error cases include non-existent ID and forbidden or deprecated permissions.
 *
 * @param props.id Target admin permission's ID
 * @path /adminPermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target admin permission's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdminPermission;

  export const METADATA = {
    method: "GET",
    path: "/adminPermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/adminPermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminPermission => typia.random<IAdminPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an adminPermission by ID (admin_permissions table, HTTP PUT).
 *
 * This API endpoint allows updating the metadata of an admin permission entry
 * (by ID) in the 'admin_permissions' table. All fields provided in the request
 * replace the previous ones. This includes updating code, name, and
 * description. Any missing field is reset or removed.
 *
 * RBAC checks restrict use to appropriately permissioned admin users
 * (permission-managers). All changes are logged for audit purposes; any attempt
 * to modify revoked, deprecated, or builtin permissions is rejected.
 *
 * Appropriate error reporting is performed in case of constraints violations or
 * access denial. Used with GET/PUT/DELETE /adminPermissions endpoints for full
 * RBAC/permission catalog management life cycle.
 *
 * @param props.id Target admin permission's ID
 * @param props.body Full admin permission update information.
 * @path /adminPermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target admin permission's ID */
    id: string & tags.Format<"uuid">;

    /** Full admin permission update information. */
    body: IAdminPermission.IUpdate;
  };
  export type Body = IAdminPermission.IUpdate;
  export type Response = IAdminPermission;

  export const METADATA = {
    method: "PUT",
    path: "/adminPermissions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/adminPermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminPermission => typia.random<IAdminPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete an adminPermission by ID (admin_permissions table).
 *
 * This API operation logically deletes an admin permission entry (by ID) in the
 * 'admin_permissions' table by marking it as deleted or deprecated (for
 * example, populating a soft delete field or changing status). This ensures
 * full compliance with RBAC requirements and allows audit/recovery.
 *
 * Physical records are retained for auditability. Assignment and permission
 * relations must be handled by admin roles separately. Any attempt to delete a
 * builtin or critical permission is blocked. Full audit logging is enforced.
 *
 * Should be used in combination with GET/PUT/DELETE /adminPermissions endpoints
 * for robust permission catalog lifecycle management.
 *
 * @param props.id Target admin permission's ID
 * @path /adminPermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target admin permission's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdminPermission;

  export const METADATA = {
    method: "DELETE",
    path: "/adminPermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/adminPermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAdminPermission => typia.random<IAdminPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

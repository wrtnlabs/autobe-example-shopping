import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAdminRole } from "../../structures/IAdminRole";
import { IPageIAdminRole } from "../../structures/IPageIAdminRole";

/**
 * Create a new adminRole (admin_roles table).
 *
 * This API operation allows privileged admin users to create new admin role
 * entries in the 'admin_roles' table. Typical fields in the request are code
 * (unique per role), name (for UI and search), and an optional description (for
 * help and documentation purposes).
 *
 * Creation is permission-controlled (RBACâ€”typically superadmin or
 * admin-action-manage roles). On successful creation, returns the complete
 * admin role record. Attempts to create duplicate codes or names result in a
 * unique constraint error.
 *
 * Every creation is logged via admin_action_logs, supporting full compliance
 * and auditability. Used together with GET/PUT/DELETE /adminRoles endpoints for
 * RBAC lifecycle management.
 *
 * @param props.body Admin role creation payload.
 * @path /adminRoles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Admin role creation payload. */
    body: IAdminRole.ICreate;
  };
  export type Body = IAdminRole.ICreate;
  export type Response = IAdminRole;

  export const METADATA = {
    method: "POST",
    path: "/adminRoles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/adminRoles";
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdminRole =>
    typia.random<IAdminRole>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search adminRoles (admin_roles table), paginated.
 *
 * This API operation allows listing, searching, and paginating all admin role
 * definitions from the 'admin_roles' table. Admin roles determine the
 * permissions and actions available to administrative staff and are central to
 * the RBAC (Role-Based Access Control) engine.
 *
 * Supported query parameters include search by role code or name, sorting by
 * creation date or name, and pagination controls (page/size). Role definitions
 * are critical for configuration and permission management as outlined in the
 * database schema and the User Architecture section, especially for emergency
 * escalation or review of role assignments.
 *
 * Access to the list is controlled by admin RBAC. If no roles are found,
 * returns an empty array; otherwise, paginates according to the request.
 *
 * Related endpoints: POST /adminRoles (create), GET/PUT/DELETE /adminRoles/{id}
 * (single role management).
 *
 * @param props.body Admin roles list retrieval, with optional search/pagination
 *   filters.
 * @path /adminRoles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Admin roles list retrieval, with optional search/pagination filters. */
    body: IAdminRole.IRequest;
  };
  export type Body = IAdminRole.IRequest;
  export type Response = IPageIAdminRole;

  export const METADATA = {
    method: "PATCH",
    path: "/adminRoles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/adminRoles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAdminRole => typia.random<IPageIAdminRole>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details of a single adminRole (admin_roles table).
 *
 * This API operation fetches the details of a single admin role from the
 * 'admin_roles' table using its unique role ID. Returned data includes all
 * role-defining fields such as code, name, and description. The use case
 * centers on role review, auditing, or displaying role configuration in
 * management dashboards.
 *
 * This endpoint is permission-protected (RBAC: only admins with role management
 * or view permissions can access). Supports error responses for non-existent
 * roles. This endpoint is used in conjunction with role update, delete, and
 * list operations for admin RBAC administration.
 *
 * It supports compliance and fine-grained access control as defined in the
 * requirements/specification.
 *
 * @param props.id Target admin role's ID
 * @path /adminRoles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target admin role's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdminRole;

  export const METADATA = {
    method: "GET",
    path: "/adminRoles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/adminRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdminRole =>
    typia.random<IAdminRole>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an adminRole by ID (admin_roles table, HTTP PUT).
 *
 * This API operation updates an existing admin role in the 'admin_roles' table.
 * Targeted fields typically include code (unique), name, and description. Any
 * missing data in the request will reset the corresponding field (full
 * replacement as defined by PUT).
 *
 * RBAC checks restrict this operation to admin role managers. All changes are
 * audit-logged for compliance verification in admin_action_logs. Attempts to
 * update non-existent or immutable (builtin) roles are rejected with a clear
 * error.
 *
 * Should be used with GET/PUT/DELETE /adminRoles endpoints for comprehensive
 * role configuration lifecycle. Error scenarios include unique constraint
 * failures and forbidden modification of builtin roles.
 *
 * @param props.id Target admin role's ID
 * @param props.body Admin role full update information.
 * @path /adminRoles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target admin role's ID */
    id: string & tags.Format<"uuid">;

    /** Admin role full update information. */
    body: IAdminRole.IUpdate;
  };
  export type Body = IAdminRole.IUpdate;
  export type Response = IAdminRole;

  export const METADATA = {
    method: "PUT",
    path: "/adminRoles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/adminRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdminRole =>
    typia.random<IAdminRole>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete an adminRole by ID (admin_roles table).
 *
 * This API operation allows an admin with proper permissions to logically
 * delete an admin role from the 'admin_roles' table. The deletion sets a
 * soft-delete flag or populates the deleted_at timestamp, making the role
 * inactive without erasing historical data for audit and rollback purposes.
 * Related permissions and assignments are not automatically modified; manual
 * cleanup or review may be required.
 *
 * All deletion actions are fully audit-logged. Attempts to delete builtin or
 * essential roles are blocked, and proper error reporting is provided. This
 * endpoint works with GET/PUT/DELETE /adminRoles endpoints for admin role
 * management life cycle.
 *
 * @param props.id Target admin role's ID
 * @path /adminRoles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target admin role's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdminRole;

  export const METADATA = {
    method: "DELETE",
    path: "/adminRoles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/adminRoles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdminRole =>
    typia.random<IAdminRole>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

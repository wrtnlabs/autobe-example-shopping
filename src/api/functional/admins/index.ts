import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAdmin } from "../../structures/IAdmin";
import { IPageIAdmin } from "../../structures/IPageIAdmin";

/**
 * Create new admin identity (admins table, onboarding).
 *
 * This API endpoint creates a new admin entity in the admins table per the
 * Prisma schema. The request body includes all required attributes: user_id
 * (linked to the atomic user identity), status (e.g., pending, active), and may
 * include additional onboarding details as the schema evolves. Business logic:
 * Ensures no duplicate admin for same user, ties in with RBAC assignment logic
 * (see admin_assignments), and issues onboarding audit log. Hard errors
 * returned for duplicate/validation error; only superadmin or equivalent may
 * onboard new admins. The newly created admin is returned, with audit fields
 * populated. This operation is core to staff onboarding, permission matrix
 * management, and compliance traceability throughout the platform.
 *
 * @param props.body New admin creation request, with user_id and status
 *   (pending, active, etc).
 * @path /admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * New admin creation request, with user_id and status (pending, active,
     * etc).
     */
    body: IAdmin.ICreate;
  };
  export type Body = IAdmin.ICreate;
  export type Response = IAdmin;

  export const METADATA = {
    method: "POST",
    path: "/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/admins";
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdmin =>
    typia.random<IAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List (search) admins in the system (admins table, patch for search).
 *
 * This endpoint returns a paginated list of admins, using the admins table as
 * defined in the Prisma schema. Search and filter criteria are passed in the
 * request body including: username, status, channel/role (if a permission
 * matrix is in use), created_at ranges, etc. Response is a paginated list of
 * admin records with search metadata. This API is central to admin user
 * management, permission audit/overview panels, and onboarding flows
 * referencing RBAC/permission assignment. Security: access limited to
 * superadmin or privileged users. Errors for invalid or unauthorized access.
 * Complements the full set of CRUD APIs for admin records by enabling
 * dashboard/search functionality.
 *
 * @param props.body Search, filter, and pagination parameters for admin
 *   listing.
 * @path /admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter, and pagination parameters for admin listing. */
    body: IAdmin.IRequest;
  };
  export type Body = IAdmin.IRequest;
  export type Response = IPageIAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/admins";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIAdmin =>
    typia.random<IPageIAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a single admin record by ID (admins table).
 *
 * Fetch the details of a single admin as defined by the admins Prisma schema
 * model. Responds with all atomic columns such as id, user_id, status,
 * created_at, updated_at, deleted_at, and may include resolved relationships to
 * user (profile, email, username) as needed for display or audit panel
 * completeness. Used in admin dashboards and onboarding flows. Permissions:
 * Only current admins with appropriate access can request this resource, all
 * fetches are logged (audit trail). If the admin record is not found or
 * deleted, a 404 is returned. This endpoint supports audit, review, and admin
 * management workflows across the platform.
 *
 * @param props.id Unique identifier for the target admin.
 * @path /admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier for the target admin. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdmin;

  export const METADATA = {
    method: "GET",
    path: "/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdmin =>
    typia.random<IAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an admin record (admins table).
 *
 * This API operation allows system administrators to update an existing admin
 * account's information in the 'admins' table. The primary use case includes
 * adjusting admin status (such as activating, suspending, or updating admin
 * profile fields) or changing the associated user identity.
 *
 * Security and permission considerations: Only super-admin or appropriately
 * permissioned roles can invoke this operation, as changes to admins represent
 * sensitive system modifications. Extensive logging and auditing are enforced.
 * Before updating, the system validates whether the admin exists and checks for
 * unique constraints on the user_id relationship, ensuring that only valid and
 * active users are linked to admin records.
 *
 * On update, all relevant audit logs are updated via the 'admin_action_logs'
 * for compliance. The operation returns the complete, updated admin record.
 *
 * Should be used in conjunction with GET/PUT/DELETE on /admins endpoints for
 * full admin lifecycle management. Error handling includes unique constraint
 * violations, non-existent IDs, and forbidden states.
 *
 * This operation adheres to the requirements in the 'User Architecture'
 * document regarding escalation, rollback, RBAC updates, and auditability.
 *
 * @param props.id Target admin's ID
 * @param props.body Admin update body. Includes fields like status, and
 *   optionally updated user linkage.
 * @path /admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target admin's ID */
    id: string & tags.Format<"uuid">;

    /**
     * Admin update body. Includes fields like status, and optionally
     * updated user linkage.
     */
    body: IAdmin.IUpdate;
  };
  export type Body = IAdmin.IUpdate;
  export type Response = IAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/admins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdmin =>
    typia.random<IAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete an admin (admins table), setting deleted_at.
 *
 * This API operation allows privileged admin users to remove an admin account
 * by setting the deleted_at field for the referenced admin ID in the 'admins'
 * table. The physical data remains in the database for full compliance,
 * auditability, and rollback scenarios. All deletion operations are audited in
 * the 'admin_action_logs' including the acting user and timestamp.
 *
 * System logic prevents deletion if certain critical constraints are met (e.g.,
 * preventing the last superadmin from being deleted). Associated admin
 * assignments and action logs remain accessible for compliance. Any attempt to
 * delete a non-existent or already deleted admin results in a clear error.
 *
 * This endpoint is part of overall admin management APIs (GET/PUT/DELETE
 * /admins endpoints).
 *
 * @param props.id Target admin's ID
 * @path /admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target admin's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAdmin;

  export const METADATA = {
    method: "DELETE",
    path: "/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAdmin =>
    typia.random<IAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiHook } from "../../structures/IAiHook";
import { IPageAiHook } from "../../structures/IPageAiHook";

/**
 * Register new AI hook (ai_hooks, microservice AI Layer extension).
 *
 * Creates an AI hook record, representing a new AI microservice integration to
 * process/enrich data for a given entity type/channel. The creation request
 * body must include all required fields: channel_id, target_entity_type,
 * endpoint_url, config_json (optional), and enabled flag. Only users with admin
 * or developer permissions may access this endpoint. Upon successful creation,
 * returns the description and metadata for the AI hook created. Validation
 * rules ensure entity and channel references exist, endpoint_url is a valid
 * URI, and no duplicate registrations are created for the same channel/entity.
 * Audit logs should record API creation. Error handling returns descriptive
 * messages for invalid or duplicate data. This endpoint is related to PATCH
 * /aiHooks (listing)/GET /aiHooks/{id} (details) and PUT /aiHooks/{id}
 * (update).
 *
 * @param props.body AI hook creation attributes: channel, target entity type,
 *   endpoint, config, status.
 * @path /aiHooks
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * AI hook creation attributes: channel, target entity type, endpoint,
     * config, status.
     */
    body: IAiHook.ICreate;
  };
  export type Body = IAiHook.ICreate;
  export type Response = IAiHook;

  export const METADATA = {
    method: "POST",
    path: "/aiHooks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiHooks";
  export const random = (g?: Partial<typia.IRandomGenerator>): IAiHook =>
    typia.random<IAiHook>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search AI hook registrations (ai_hooks table, modular AI microservices).
 *
 * This endpoint queries the ai_hooks table, returning a paginated response
 * containing AI hook registration records, filtered by optional search/sorting
 * criteria provided in the request body. This is essential for administering
 * the platform's modular AI layerâ€”listing hooks responsible for entity
 * enrichment, anomaly detection, and analytics. Security policies restrict
 * access to users with admin or developer rights. The endpoint enforces
 * compliance with channel boundaries (multi-tenancy) if required. Business
 * logic includes supporting dynamic search by channel, target_entity_type,
 * status (enabled/disabled), and date ranges. The pagination interface ensures
 * efficient queries for potentially large sets. Error handling covers invalid
 * filters, missing search criteria or pagination parameters, and unauthorized
 * access attempts. Related endpoints: POST /aiHooks for creation, GET
 * /aiHooks/{id} for one record, PUT /aiHooks/{id} for update, DELETE
 * /aiHooks/{id} for removal.
 *
 * @param props.body Filtering, searching, and pagination criteria for AI hooks
 *   list operation.
 * @path /aiHooks
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering, searching, and pagination criteria for AI hooks list
     * operation.
     */
    body: IAiHook.IRequest;
  };
  export type Body = IAiHook.IRequest;
  export type Response = IPageAiHook;

  export const METADATA = {
    method: "PATCH",
    path: "/aiHooks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiHooks";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageAiHook =>
    typia.random<IPageAiHook>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details for a single AI hook (ai_hooks table).
 *
 * This API returns complete information for the AI hook specified by its id
 * (UUID): endpoint URL, target entity type, enabled status, configuration,
 * audit timestamps, and channel reference. Only system administrators and
 * developers with suitable access can invoke this endpoint, as AI hooks control
 * critical data flows (e.g., fraud scoring, recommendations). The endpoint
 * loads from the ai_hooks table, ensuring proper channel-scope tenant isolation
 * if operating in a multi-tenant mode. The path parameter id is validated for
 * correct UUID format. Errors include not found, forbidden access, or invalid
 * ID. Use GET /aiHooks/{id} in conjunction with PATCH /aiHooks for listing and
 * PUT /aiHooks/{id} for modification, and DELETE /aiHooks/{id} for removal.
 *
 * @param props.id AI hook record ID (UUID).
 * @path /aiHooks/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** AI hook record ID (UUID). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAiHook;

  export const METADATA = {
    method: "GET",
    path: "/aiHooks/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiHooks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAiHook =>
    typia.random<IAiHook>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update AI hook configuration (ai_hooks, modular AI microservices).
 *
 * Updates the specified AI hook record, allowing changes to configuration,
 * endpoint, entity/channel type, and enabled flag. Access is restricted to
 * administrators or developers with appropriate privileges, since modification
 * impacts critical data flows (analytics, fraud checks, etc.). Requests must
 * validate the target record exists, the updated data is valid, and that it
 * does not conflict with other registered hooks. The operation logs history for
 * audit/compliance. Related endpoints: PATCH /aiHooks (search), GET
 * /aiHooks/{id} (fetch details), DELETE /aiHooks/{id} (remove), POST /aiHooks
 * (create new). Error handling covers permission denied, invalid ID/data, or
 * not found.
 *
 * @param props.id AI hook record ID (UUID).
 * @param props.body Fields to update on existing AI hook registration.
 * @path /aiHooks/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** AI hook record ID (UUID). */
    id: string & tags.Format<"uuid">;

    /** Fields to update on existing AI hook registration. */
    body: IAiHook.IUpdate;
  };
  export type Body = IAiHook.IUpdate;
  export type Response = IAiHook;

  export const METADATA = {
    method: "PUT",
    path: "/aiHooks/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiHooks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAiHook =>
    typia.random<IAiHook>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete AI hook registration (ai_hooks, modular microservice endpoints).
 *
 * Soft (or when required, hard) deletes an AI hook record, identified by id
 * (UUID). The operation enforces permissions: only admin or highly privileged
 * developer/system roles can invoke this endpoint, since it can affect critical
 * AI functionality (recommendations, fraud checks, analytics). The operation
 * typically performs a soft delete by marking the deleted_at column, leaving a
 * trace for compliance, rather than completely erasing the record. It verifies
 * the record exists and is not already deleted. Related APIs: PATCH /aiHooks
 * (listing), GET /aiHooks/{id} (fetch details), PUT /aiHooks/{id} (update).
 * Logs all changes for audit. Error handling addresses attempts to delete
 * in-use hooks, unauthorized operations, and not found IDs.
 *
 * @param props.id AI hook record ID (UUID).
 * @path /aiHooks/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** AI hook record ID (UUID). */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiHooks/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiHooks/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendAbuseIncident } from "../../../../structures/IPageIAimallBackendAbuseIncident";
import { IAimallBackendAbuseIncident } from "../../../../structures/IAimallBackendAbuseIncident";

/**
 * List abuse incident records (fraud/high-risk event logs).
 *
 * Fetches a paginated list of all platform abuse incidents logged in
 * aimall_backend_abuse_incidents. Each record details a single fraud or abuse
 * event—including the event type (e.g., self-referral, coupon stacking),
 * resolved status, context fields, incident detection time, and all related
 * entity foreign keys.
 *
 * Access is restricted to authorized compliance, audit, or admin roles, as
 * these incidents may include PII or security-sensitive findings. The endpoint
 * should support quick triage, dashboard, and drill-down audit scenarios.
 * Pagination is required to efficiently handle high-volume incident datasets.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/abuseIncidents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendAbuseIncident;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/abuseIncidents",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/abuseIncidents";
  export const random = (): IPageIAimallBackendAbuseIncident =>
    typia.random<IPageIAimallBackendAbuseIncident>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new abuse incident (fraud or high-risk record).
 *
 * Creates a new incident log entry in the aimall_backend_abuse_incidents table.
 * This represents system- or admin-detected abuse activity—such as coupon
 * abuse, loyalty fraud, or campaign gaming. All fields—type, context, status,
 * and detected_at time—are required per the IAimallBackendAbuseIncident.ICreate
 * DTO. The initiating actor (system or admin) must be recorded by the
 * application layer for immutable audit tracking.
 *
 * Business workflow expects most incidents to be unresolved at creation, with
 * resolution flow managed elsewhere. Only admin/compliance roles may insert
 * events. All operations should be externally logged for compliance and legal
 * reviews.
 *
 * @param props.connection
 * @param props.body All details required to create an abuse incident record.
 * @path /aimall-backend/administrator/abuseIncidents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** All details required to create an abuse incident record. */
    body: IAimallBackendAbuseIncident.ICreate;
  };
  export type Body = IAimallBackendAbuseIncident.ICreate;
  export type Response = IAimallBackendAbuseIncident;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/abuseIncidents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/abuseIncidents";
  export const random = (): IAimallBackendAbuseIncident =>
    typia.random<IAimallBackendAbuseIncident>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search and filter for abuse incidents (dashboard/reporting).
 *
 * Enables complex searches within the abuse incidents table by allowing filter
 * criteria such as type (e.g., coupon stacking, velocity anomaly), resolved
 * status, customer/campaign/order/coupon linkage, and detected_at time ranges.
 * Completion of this operation returns a paginated and filtered result set
 * suitable for compliance reports and monitoring dashboards.
 *
 * Sensitive data access is restricted to authorized roles; the endpoint is
 * intended to support daily operational risk review, incident management, and
 * compliance reporting as mandated by regulatory requirements. Search
 * performance and handling of massive datasets must be optimized by
 * backend/query engine design.
 *
 * @param props.connection
 * @param props.body Query/search filters for abuse incidents.
 * @path /aimall-backend/administrator/abuseIncidents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Query/search filters for abuse incidents. */
    body: IAimallBackendAbuseIncident.IRequest;
  };
  export type Body = IAimallBackendAbuseIncident.IRequest;
  export type Response = IPageIAimallBackendAbuseIncident;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/abuseIncidents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/abuseIncidents";
  export const random = (): IPageIAimallBackendAbuseIncident =>
    typia.random<IPageIAimallBackendAbuseIncident>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detail view for a single abuse incident event.
 *
 * Returns all logged fields and context for a single abuse incident, as
 * identified by its primary key (UUID). Includes type, status, detection
 * attributes, actor and resource links, detected_at timestamp, and context for
 * risk/audit investigation. Data is used for fraud investigation, compliance
 * reporting, and system health analytics.
 *
 * Access is allowed only for authorized admin/compliance roles. No edits are
 * performed here—mutations are handled by update. Not found or unauthorized
 * requests must yield a clear, standard error and be logged as a possible
 * compliance event.
 *
 * @param props.connection
 * @param props.abuseIncidentId UUID of the abuse incident to retrieve.
 * @path /aimall-backend/administrator/abuseIncidents/:abuseIncidentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the abuse incident to retrieve. */
    abuseIncidentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendAbuseIncident;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/abuseIncidents/:abuseIncidentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/abuseIncidents/${encodeURIComponent(props.abuseIncidentId ?? "null")}`;
  export const random = (): IAimallBackendAbuseIncident =>
    typia.random<IAimallBackendAbuseIncident>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("abuseIncidentId")(() =>
        typia.assert(props.abuseIncidentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update (resolve/annotate/correct) an abuse incident event.
 *
 * Updates select fields (details, resolved status, type, etc.) on a logged
 * abuse incident event, identified by its UUID. Designed for use in the
 * admin/compliance incident management workflow—for marking incidents as
 * resolved, providing additional info, or making corrections as per audit
 * findings. Field constraints and allowed transitions are defined in the
 * IAimallBackendAbuseIncident.IUpdate DTO; no relational or timestamp fields
 * may be altered.
 *
 * Sensitive operations; restricted to admin or compliance users; all changes
 * must be externally recorded in audit logs for regulatory/legal review. Strict
 * validation of permissible fields is enforced by the application logic layer.
 *
 * @param props.connection
 * @param props.abuseIncidentId UUID of the abuse incident to update.
 * @param props.body Updatable fields/attributes for the abuse incident record.
 * @path /aimall-backend/administrator/abuseIncidents/:abuseIncidentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the abuse incident to update. */
    abuseIncidentId: string & tags.Format<"uuid">;

    /** Updatable fields/attributes for the abuse incident record. */
    body: IAimallBackendAbuseIncident.IUpdate;
  };
  export type Body = IAimallBackendAbuseIncident.IUpdate;
  export type Response = IAimallBackendAbuseIncident;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/abuseIncidents/:abuseIncidentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/abuseIncidents/${encodeURIComponent(props.abuseIncidentId ?? "null")}`;
  export const random = (): IAimallBackendAbuseIncident =>
    typia.random<IAimallBackendAbuseIncident>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("abuseIncidentId")(() =>
        typia.assert(props.abuseIncidentId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete abuse incident record (hard delete, admin/gov only).
 *
 * Removes the specified abuse incident from the aimall_backend_abuse_incidents
 * DB table (hard delete). Use is limited to extreme cases—serious
 * audit/correction flows—never for normal review or workflow. All invocations
 * must be logged in immutable audit storage for legal review/litigation
 * support. Unauthorized attempts must be forbidden and generate audits for
 * compliance.
 *
 * Deletion gaps may impact downstream analytic/audit workflows, so only
 * top-level governance users may access. Application must ensure all
 * referential integrity and dependent events are handled appropriately
 * (nullification, cascading policy).
 *
 * @param props.connection
 * @param props.abuseIncidentId UUID of the incident record to delete.
 * @path /aimall-backend/administrator/abuseIncidents/:abuseIncidentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the incident record to delete. */
    abuseIncidentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/abuseIncidents/:abuseIncidentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/abuseIncidents/${encodeURIComponent(props.abuseIncidentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("abuseIncidentId")(() =>
        typia.assert(props.abuseIncidentId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

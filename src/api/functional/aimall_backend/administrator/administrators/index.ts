import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendAdministrator } from "../../../../structures/IAimallBackendAdministrator";
import { IPageIAimallBackendAdministrator } from "../../../../structures/IPageIAimallBackendAdministrator";

/**
 * Get list of AIMall platform administrators (actors domain).
 *
 * Retrieve a complete list of administrator accounts from the
 * aimall_backend_administrators table, which models operators, platform staff,
 * and system administrators with assigned permissions.
 *
 * Returned data includes basic identifying fields (email, name), permission id,
 * and operational status, which should be checked by clients for proper
 * role-based rendering. Results may include both active and suspended
 * administrators for audit purposes. No sensitive authentication data (such as
 * credentials or tokens) is present in this endpoint.
 *
 * Accessible only by authenticated administrators or those with sufficient
 * permissions as mapped to the aimall_backend_permissions table. Used in
 * admin-facing dashboards or compliance reporting. Excessive requests may be
 * rate-limited or logged for monitoring.
 *
 * The administrator list supports other operations such as role assignment (see
 * permissions endpoints), and audit logging (see analytics domain).
 *
 * @param props.connection
 * @path /aimall-backend/administrator/administrators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IAimallBackendAdministrator.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/administrators",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/administrators";
  export const random = (): IAimallBackendAdministrator.ISummary =>
    typia.random<IAimallBackendAdministrator.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new platform administrator account (Actors domain).
 *
 * Create a new administrator account in the AIMall backend, referencing the
 * aimall_backend_administrators schema. The request must provide the
 * permission_id, email, display name (name), and operational status. On
 * success, the endpoint returns the created administrator resource for further
 * processing. Authentication and authorization checks apply at the service
 * layerâ€”only super administrators or permission managers can invoke this
 * operation.
 *
 * Sensitive credentials are not handled here (password management flows are
 * external). On success, the audit log is updated to record account creation
 * per compliance requirement. Account status (active, pending) is set according
 * to input, which may control admin dashboard or system access.
 *
 * @param props.connection
 * @param props.body Administrator account data: permission_id, email, display
 *   name, and status.
 * @path /aimall-backend/administrator/administrators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Administrator account data: permission_id, email, display name, and
     * status.
     */
    body: IAimallBackendAdministrator.ICreate;
  };
  export type Body = IAimallBackendAdministrator.ICreate;
  export type Response = IAimallBackendAdministrator;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/administrators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/administrators";
  export const random = (): IAimallBackendAdministrator =>
    typia.random<IAimallBackendAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate administrators in the AIMall backend.
 *
 * Search, filter, and paginate the AIMall backend list of administrators using
 * flexible query criteria referencing aimall_backend_administrators columns.
 * The request body may contain filters for status (active, suspended, pending),
 * permission roles, email, name, or creation/updated date ranges.
 *
 * This endpoint supports compliance scenarios where platform operators must
 * audit administrator roles by various segments, investigate configuration
 * changes, or analyze admin account behaviors. Pagination and ordering are
 * supported to ensure efficient UX with large datasets.
 *
 * Accessible to administrator users with role/permission sufficient under the
 * RBAC system (see aimall_backend_permissions). Response structure is optimized
 * for admin dashboard integration. Search operations may be logged to ensure
 * auditability and monitor for inappropriate data access patterns.
 *
 * @param props.connection
 * @param props.body Flexible search criteria and pagination params for
 *   administrator list filtering.
 * @path /aimall-backend/administrator/administrators
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Flexible search criteria and pagination params for administrator list
     * filtering.
     */
    body: IAimallBackendAdministrator.IRequest;
  };
  export type Body = IAimallBackendAdministrator.IRequest;
  export type Response = IPageIAimallBackendAdministrator.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/administrators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/administrators";
  export const random = (): IPageIAimallBackendAdministrator.ISummary =>
    typia.random<IPageIAimallBackendAdministrator.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a single AIMall administrator by id.
 *
 * Get full detail for a single administrator account, identified by the
 * administratorId path parameter, from the aimall_backend_administrators table.
 * This model includes fields such as email, display name, status (active,
 * pending, suspended), permission assignment, and full change timestamp data.
 *
 * Use this operation in administrator profile pages, for audit or management
 * actions, or to check admin permission roles (with a join to the permissions
 * table if needed). Security requires that only other administrators with
 * appropriate permissions (e.g., super-admin, role manager) may access this
 * detail.
 *
 * Care is taken to prevent exposing sensitive admin authentication credentials
 * (password data is never returned). Related changes may be tracked via the
 * audit log (see analytics domain for aimall_backend_audit_logs).
 *
 * @param props.connection
 * @param props.administratorId Unique identifier of the administrator to
 *   retrieve (UUID).
 * @path /aimall-backend/administrator/administrators/:administratorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the administrator to retrieve (UUID). */
    administratorId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendAdministrator;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/administrators/:administratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/administrators/${encodeURIComponent(props.administratorId ?? "null")}`;
  export const random = (): IAimallBackendAdministrator =>
    typia.random<IAimallBackendAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("administratorId")(() =>
        typia.assert(props.administratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an AIMall administrator record (Actors domain).
 *
 * Update an administrator record's information for an existing platform admin
 * account identified by administratorId. The request body includes new values
 * for permission_id, name, status, and may include email if required. Business
 * logic ensures that changes are allowed only by admins with sufficient
 * permission (see aimall_backend_permissions schema). All changes are logged
 * for compliance, supporting security reviews or escalation.
 *
 * The update operation never modifies sensitive authentication data (like
 * password), which is handled via dedicated flows. The response returns the
 * updated administrator record including all main attributes and audit
 * information for display or further inspection.
 *
 * @param props.connection
 * @param props.administratorId Unique identifier of the administrator to update
 *   (UUID).
 * @param props.body Fields to update for the administrator account: permission
 *   assignment, display name, status, and optionally email.
 * @path /aimall-backend/administrator/administrators/:administratorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the administrator to update (UUID). */
    administratorId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the administrator account: permission
     * assignment, display name, status, and optionally email.
     */
    body: IAimallBackendAdministrator.IUpdate;
  };
  export type Body = IAimallBackendAdministrator.IUpdate;
  export type Response = IAimallBackendAdministrator;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/administrators/:administratorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/administrators/${encodeURIComponent(props.administratorId ?? "null")}`;
  export const random = (): IAimallBackendAdministrator =>
    typia.random<IAimallBackendAdministrator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("administratorId")(() =>
        typia.assert(props.administratorId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an administrator account (HARD DELETE, irreversible).
 *
 * Permanently delete an administrator account, identified by administratorId,
 * from the aimall_backend_administrators schema. This is a hard delete (as no
 * status/deleted flags are in schema). Only super administrators or those with
 * explicit admin-management roles should call this, consistent with
 * compliance/audit requirements. All deletions are registered in the audit logs
 * (see analytics domain).
 *
 * This operation MUST NOT be used for revoking just a userâ€™s access; instead,
 * status updates (via update) should be preferred where possible. Deletion is
 * irreversible and may break foreign key constraints on assigned tickets or
 * audit logsâ€”data re-assignment is expected to be managed at the application
 * service layer.
 *
 * @param props.connection
 * @param props.administratorId Unique identifier of the administrator to delete
 *   (UUID).
 * @path /aimall-backend/administrator/administrators/:administratorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the administrator to delete (UUID). */
    administratorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/administrators/:administratorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/administrators/${encodeURIComponent(props.administratorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("administratorId")(() =>
        typia.assert(props.administratorId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

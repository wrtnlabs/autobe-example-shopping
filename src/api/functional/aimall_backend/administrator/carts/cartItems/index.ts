import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCartItem } from "../../../../../structures/IPageIAimallBackendCartItem";
import { IAimallBackendCartItem } from "../../../../../structures/IAimallBackendCartItem";

/**
 * List all items in a shopping cart by cartId (aimall_backend_cart_items).
 *
 * Retrieve all items associated with a specific shopping cart, identified by
 * cartId. This endpoint supports user shopping, cart review displays, and
 * administrative troubleshooting, returning only atomic item data from
 * aimall_backend_cart_items.
 *
 * Authorization checks prevent customers from accessing non-owned carts or
 * items. Returns an array or paginated list of cart items, with detailed
 * metadata as defined by the schema. Related endpoints include POST for item
 * creation, PUT for item update, and DELETE for removal.
 *
 * @param props.connection
 * @param props.cartId UUID of the parent shopping cart.
 * @path /aimall-backend/administrator/carts/:cartId/cartItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** UUID of the parent shopping cart. */
    cartId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendCartItem;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/carts/:cartId/cartItems",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems`;
  export const random = (): IPageIAimallBackendCartItem =>
    typia.random<IPageIAimallBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Add a new item to a shopping cart (aimall_backend_cart_items).
 *
 * Add a new item to an existing shopping cart. The parent cart is indicated by
 * cartId (UUID); request body includes all required atomic fields for the cart
 * item per aimall_backend_cart_items schema (product_id, quantity,
 * unit_price_snapshot, and optional option/SKU references). Application logic
 * must enforce unique constraint on cart+product+option+SKU combination.
 *
 * Authorization verifies cart ownership. On success, returns the full cart item
 * record as stored. Used for normal shopping addition, guest-to-account cart
 * merge, and admin troubleshooting/config.
 *
 * @param props.connection
 * @param props.cartId UUID of the target shopping cart to which the item is
 *   added.
 * @param props.body Detail information for the cart item to be created (added
 *   to the cart).
 * @path /aimall-backend/administrator/carts/:cartId/cartItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the target shopping cart to which the item is added. */
    cartId: string & tags.Format<"uuid">;

    /**
     * Detail information for the cart item to be created (added to the
     * cart).
     */
    body: IAimallBackendCartItem.ICreate;
  };
  export type Body = IAimallBackendCartItem.ICreate;
  export type Response = IAimallBackendCartItem;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/carts/:cartId/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems`;
  export const random = (): IAimallBackendCartItem =>
    typia.random<IAimallBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Filtered, paginated search of cart items within a cart
 * (aimall_backend_cart_items).
 *
 * Enables paged and filtered search of all cart items within a particular cart
 * specified by cartId. Advanced queries may include searching by specific
 * product, options, SKUs, or date/time. Only atomic fields defined in the
 * aimall_backend_cart_items schema should be referenced.
 *
 * Requires parent cart ownership validation or admin privilege. Outputs
 * paginated result of all matching cart items. Can be used for complex UX,
 * admin audits, or troubleshooting scenarios. Error scenarios include
 * unauthorized access, invalid cartId, or invalid search criteria.
 *
 * @param props.connection
 * @param props.cartId UUID of the shopping cart for item search.
 * @param props.body Search and pagination parameters for cart item querying.
 * @path /aimall-backend/administrator/carts/:cartId/cartItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** UUID of the shopping cart for item search. */
    cartId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for cart item querying. */
    body: IAimallBackendCartItem.IRequest;
  };
  export type Body = IAimallBackendCartItem.IRequest;
  export type Response = IPageIAimallBackendCartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/carts/:cartId/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems`;
  export const random = (): IPageIAimallBackendCartItem =>
    typia.random<IPageIAimallBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific cart item in a cart by itemId
 * (aimall_backend_cart_items).
 *
 * Fetches all details for a single cart item in a shopping cart. Both cartId
 * (parent) and cartItemId (item PK) are required (UUIDs). Returns all defined
 * fields for the item
 * (product/product_option/SKU/quantity/unit_price_snapshot/etc.) as per the
 * aimall_backend_cart_items schema.
 *
 * Endpoint enforces strict access policyâ€”customers can only view their own
 * carts/items. Used for item review, diagnostics, and UX recovery. Related
 * endpoints include PUT for updating the item and DELETE for removal. Error
 * handling covers invalid IDs or unauthorized access.
 *
 * @param props.connection
 * @param props.cartId UUID of the parent shopping cart.
 * @param props.cartItemId UUID of the target cart item.
 * @path /aimall-backend/administrator/carts/:cartId/cartItems/:cartItemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent shopping cart. */
    cartId: string & tags.Format<"uuid">;

    /** UUID of the target cart item. */
    cartItemId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCartItem;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/carts/:cartId/cartItems/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IAimallBackendCartItem =>
    typia.random<IAimallBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific item in a shopping cart (aimall_backend_cart_items).
 *
 * Update details of a specific cart item, such as quantity, product option, or
 * price snapshot. cartId and cartItemId (UUIDs) uniquely identify target. The
 * request body defines updatable fields as allowed by the
 * aimall_backend_cart_items schema.
 *
 * Only item owner or admin may perform update. Business logic ensures
 * compliance with unique items constraint and cart-item/option relationships.
 * Returns updated item record. Use cases include quantity adjustment, product
 * option change, and admin item management.
 *
 * @param props.connection
 * @param props.cartId UUID of the parent shopping cart.
 * @param props.cartItemId UUID of the cart item to update.
 * @param props.body Fields and values to update for the target cart item.
 * @path /aimall-backend/administrator/carts/:cartId/cartItems/:cartItemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent shopping cart. */
    cartId: string & tags.Format<"uuid">;

    /** UUID of the cart item to update. */
    cartItemId: string & tags.Format<"uuid">;

    /** Fields and values to update for the target cart item. */
    body: IAimallBackendCartItem.IUpdate;
  };
  export type Body = IAimallBackendCartItem.IUpdate;
  export type Response = IAimallBackendCartItem;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/carts/:cartId/cartItems/:cartItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IAimallBackendCartItem =>
    typia.random<IAimallBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific item from a shopping cart (aimall_backend_cart_items).
 *
 * Remove a single item from a shopping cart. Strictly operates as a hard delete
 * based on absence of any soft delete or status fields in the
 * aimall_backend_cart_items schema. cartId (parent) and cartItemId (item PK)
 * are both UUIDs and must be validated.
 *
 * Operation is restricted to the cart/item owner or administrators. Used for
 * normal shopping cart management/UX or for cleaning up carts in helpdesk/admin
 * workflows. Deleted item is instantly removed with no recovery. Related
 * endpoints: PUT for updates, POST for addition.
 *
 * @param props.connection
 * @param props.cartId UUID of the parent shopping cart.
 * @param props.cartItemId UUID of the cart item to be deleted.
 * @path /aimall-backend/administrator/carts/:cartId/cartItems/:cartItemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent shopping cart. */
    cartId: string & tags.Format<"uuid">;

    /** UUID of the cart item to be deleted. */
    cartItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/carts/:cartId/cartItems/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}/cartItems/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

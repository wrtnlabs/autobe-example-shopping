import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCart } from "../../../../structures/IPageIAimallBackendCart";
import { IAimallBackendCart } from "../../../../structures/IAimallBackendCart";
export * as cartItems from "./cartItems";

/**
 * Retrieve a list of all shopping carts (aimall_backend_carts).
 *
 * Retrieve a list of shopping carts from the aimall_backend_carts table. This
 * endpoint supplies comprehensive information on every cart, including primary
 * key, owner customer ID (nullable for guest carts), session tokens (for
 * anonymous carts), and metadata like creation and update timestamps.
 * Pagination or filtering may be implemented via query string in the service
 * layer.
 *
 * Security and privacy considerations are paramount — customers may only view
 * their own carts, while administrators may require expanded permissions to
 * monitor system-wide activity. This API does not allow cart modifications; it
 * is used solely for retrieval purposes.
 *
 * Related endpoints may include PATCH /carts for advanced searches or
 * analytics, or nested routes for retrieving individual cart items or merging
 * carts. Error handling should cover authorization boundary violations and
 * invalid access attempts, especially in multi-tenant/guest session use cases.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendCart;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/carts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/carts";
  export const random = (): IPageIAimallBackendCart =>
    typia.random<IPageIAimallBackendCart>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new shopping cart (aimall_backend_carts).
 *
 * Create a new shopping cart instance, assigning it either to a customer (using
 * customer_id) or to an anonymous session (using session_token). This operation
 * ensures that only one active cart exists per customer or session in
 * accordance with unique constraints in the aimall_backend_carts schema.
 *
 * Requires validation that input does not violate uniqueness rules: customer_id
 * and/or session_token must not already have an active cart.
 * Created_at/updated_at timestamps are assigned automatically. Security logic
 * ensures a customer can only create their own cart; administrators may create
 * carts for troubleshooting or UX recovery flows.
 *
 * The created cart's ID and all assigned fields are returned. Related endpoints
 * include PUT/DELETE for modification/removal and PATCH for advanced
 * searching/listing.
 *
 * @param props.connection
 * @param props.body Creation info for the new shopping cart, including required
 *   UUID associations.
 * @path /aimall-backend/administrator/carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation info for the new shopping cart, including required UUID
     * associations.
     */
    body: IAimallBackendCart.ICreate;
  };
  export type Body = IAimallBackendCart.ICreate;
  export type Response = IAimallBackendCart;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/carts";
  export const random = (): IAimallBackendCart =>
    typia.random<IAimallBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated and filtered search of shopping carts (aimall_backend_carts).
 *
 * Search and retrieve a filtered and paginated list of shopping carts using
 * advanced criteria. The request body accommodates complex search logic: filter
 * by customer ID, session token, creation/update date, and other scalar fields
 * from aimall_backend_carts. This endpoint enhances system scalability by
 * providing efficient querying without exposing sensitive cart contents
 * directly.
 *
 * Security is enforced such that regular users may only search for their own
 * carts, while admins can operate across all. This endpoint is related to GET
 * /carts for basic listings, and may be paired with related endpoints for
 * fetching detailed item data. Pagination parameters are strongly advised for
 * high-volume installations.
 *
 * The response returns a structured, paged summary of matching carts, and
 * errors include inappropriate access, invalid query structure, or excessive
 * request volume.
 *
 * @param props.connection
 * @param props.body Search criteria, filtering, and pagination parameters for
 *   shopping cart retrieval.
 * @path /aimall-backend/administrator/carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria, filtering, and pagination parameters for shopping
     * cart retrieval.
     */
    body: IAimallBackendCart.IRequest;
  };
  export type Body = IAimallBackendCart.IRequest;
  export type Response = IPageIAimallBackendCart;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/carts";
  export const random = (): IPageIAimallBackendCart =>
    typia.random<IPageIAimallBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single shopping cart by cartId (aimall_backend_carts primary key).
 *
 * Fetch details of a single shopping cart by its unique identifier. This
 * endpoint returns all defined fields for an individual cart record, such as
 * cart ID, owner customer ID or session token (for anonymous carts), and
 * timestamps. User authorization restricts customers to their own carts—admins
 * may access any.
 *
 * This operation complements listing and search endpoints and supports
 * troubleshooting or UX flows like cart restoration post-login/session. Returns
 * error for invalid UUID or unauthorized access.
 *
 * Designed for strict access control and audit logging in all requested
 * operations. Tied directly to the aimall_backend_carts entity and responsible
 * for detailed inspection of cart-level metadata.
 *
 * @param props.connection
 * @param props.cartId Unique identifier (UUID) for the target shopping cart.
 * @path /aimall-backend/administrator/carts/:cartId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) for the target shopping cart. */
    cartId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCart;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IAimallBackendCart =>
    typia.random<IAimallBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a shopping cart instance by cartId (aimall_backend_carts).
 *
 * Modify the details of an existing shopping cart (by UUID). Permits updating
 * permissible fields such as session_token or relational info, subject to
 * schema uniqueness and business rules. The request validates cartId existence
 * and ownership prior to application of updates.
 *
 * Unauthorized actions are rejected—only cart owner or admin can update. Any
 * field constraints (e.g., unique session_token, customer_id mapping) must be
 * respected. Updated_at is set to the update time. Supports UX flows like cart
 * recovery, customer session merge, or administrative correction.
 *
 * @param props.connection
 * @param props.cartId UUID of the shopping cart to be updated.
 * @param props.body Fields and values to update for the target cart.
 * @path /aimall-backend/administrator/carts/:cartId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the shopping cart to be updated. */
    cartId: string & tags.Format<"uuid">;

    /** Fields and values to update for the target cart. */
    body: IAimallBackendCart.IUpdate;
  };
  export type Body = IAimallBackendCart.IUpdate;
  export type Response = IAimallBackendCart;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/carts/:cartId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IAimallBackendCart =>
    typia.random<IAimallBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a shopping cart by cartId (aimall_backend_carts).
 *
 * Remove a shopping cart identified by UUID. This is a hard delete operation,
 * as the aimall_backend_carts schema does not define any soft deletion
 * strategy. Related cart items are automatically removed via cascading
 * relations defined in the schema.
 *
 * Delete operations validate user authorization (owner or admin only). Attempts
 * to delete non-existent or unauthorized carts result in error. Deletion is
 * irreversible and logged for compliance and audit. Used for cart abandonment
 * cleanup, session invalidation, or admin troubleshooting.
 *
 * @param props.connection
 * @param props.cartId UUID of the shopping cart to be deleted.
 * @path /aimall-backend/administrator/carts/:cartId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the shopping cart to be deleted. */
    cartId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

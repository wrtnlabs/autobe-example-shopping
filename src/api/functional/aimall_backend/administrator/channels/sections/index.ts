import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendSection } from "../../../../../structures/IPageIAimallBackendSection";
import { IAimallBackendSection } from "../../../../../structures/IAimallBackendSection";

/**
 * List all sections under a given channel (aimall_backend_sections).
 *
 * List all sections for a specified channel by referencing its UUID. This is
 * important for rendering channel-specific content, controlling UI blocks (like
 * banners, featured lists), or supporting channel-driven customization.
 *
 * Access to this endpoint should be limited to managers who oversee channel and
 * section configurations, as section structure directly determines the
 * appearance and behavior of client-facing sites. The response will contain all
 * relevant section properties, with relationships mapped through foreign keys
 * to the specified channel. This operation relates closely to section CRUD
 * endpoints and may be paired with configuration or assignment modules for a
 * complete content management solution.
 *
 * @param props.connection
 * @param props.channelId UUID of the parent channel whose sections are listed.
 * @path /aimall-backend/administrator/channels/:channelId/sections
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** UUID of the parent channel whose sections are listed. */
    channelId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendSection;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/channels/:channelId/sections",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random = (): IPageIAimallBackendSection =>
    typia.random<IPageIAimallBackendSection>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Add a new section to an existing channel (aimall_backend_sections).
 *
 * Create a section (such as homepage banner, featured product block, etc.)
 * under a specific channel by its UUID. The request payload supplies all
 * normalized attributes, enforcing uniqueness of code within channel, and
 * required input for name/display order. Only users with appropriate roles may
 * invoke this operation, and creation should enforce input, unique, and
 * constraint validations as per schema.
 *
 * Upon success, the returned object provides a fully populated section entity,
 * immediately available for further configuration or assignment. Related to
 * this, section list, update, and delete endpoints complete the lifecycle.
 * Audit trails should capture every creation event for compliance.
 *
 * @param props.connection
 * @param props.channelId UUID of the channel to add the section to.
 * @param props.body Creation DTO for a section—normalized all required fields.
 * @path /aimall-backend/administrator/channels/:channelId/sections
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the channel to add the section to. */
    channelId: string & tags.Format<"uuid">;

    /** Creation DTO for a section—normalized all required fields. */
    body: IAimallBackendSection.ICreate;
  };
  export type Body = IAimallBackendSection.ICreate;
  export type Response = IAimallBackendSection;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/channels/:channelId/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random = (): IAimallBackendSection =>
    typia.random<IAimallBackendSection>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter sections of a specific channel (aimall_backend_sections) with
 * pagination.
 *
 * Search/filter the sections for a specific channel by UUID, leveraging
 * advanced pagination and query logic. This permits efficient management when
 * the section list is extensive, and supports custom search forms, filter bars,
 * and sort widgets.
 *
 * Role-based access and paginated result returns are core to this endpoint.
 * Data returned is normalized per section schema, and the request body must
 * conform to the advanced search, pagination, and filter DTOs defined for
 * section listing. Common use: powering channel UI block management, analytics,
 * or display configuration tools.
 *
 * @param props.connection
 * @param props.channelId UUID of the channel whose sections are being searched.
 * @param props.body Search, filter, and pagination criteria for sections.
 * @path /aimall-backend/administrator/channels/:channelId/sections
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** UUID of the channel whose sections are being searched. */
    channelId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination criteria for sections. */
    body: IAimallBackendSection.IRequest;
  };
  export type Body = IAimallBackendSection.IRequest;
  export type Response = IPageIAimallBackendSection;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/channels/:channelId/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random = (): IPageIAimallBackendSection =>
    typia.random<IPageIAimallBackendSection>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detail of a section by channel and section UUID
 * (aimall_backend_sections).
 *
 * Return the detailed section entity belonging to a particular channel by
 * unique channelId and sectionId. Full section state is included as per
 * normalization—code, name, enabled flag, display order, and timestamps.
 *
 * Primarily supporting administrative interfaces, preview/edit flows, and
 * analytics investigation. Security best practice restricts access to users
 * responsible for channel/section configuration. This operation is tightly
 * coupled with the list, search, create, update, and delete endpoints for
 * sections. Validation enforces UUID formats and confirms parent-child linkage
 * integrity. Errors triggered for invalid, missing, or cross-channel section
 * queries.
 *
 * @param props.connection
 * @param props.channelId UUID of the parent channel containing the section.
 * @param props.sectionId UUID of the section to fetch details of.
 * @path /aimall-backend/administrator/channels/:channelId/sections/:sectionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent channel containing the section. */
    channelId: string & tags.Format<"uuid">;

    /** UUID of the section to fetch details of. */
    sectionId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendSection;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/channels/:channelId/sections/:sectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): IAimallBackendSection =>
    typia.random<IAimallBackendSection>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a section of a channel (aimall_backend_sections) by UUIDs.
 *
 * Perform an update on a section entity for a particular channel, providing the
 * list of allowed, mutable fields in the request body. Validation ensures the
 * unique key constraint (channel_id+code) and conforms all business rules
 * within the system and schema.
 *
 * Only users responsible for channel/section management should have access, and
 * updates should log all change events for compliance. This endpoint is used
 * alongside create, get, search, and delete operations to provide full CRUD
 * management for channel sections. The operation validates the request payload,
 * both for schema and for conflict with existing section data.
 *
 * @param props.connection
 * @param props.channelId UUID of the parent channel containing the section.
 * @param props.sectionId UUID of the section to update.
 * @param props.body Update payload for the section entity fields.
 * @path /aimall-backend/administrator/channels/:channelId/sections/:sectionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent channel containing the section. */
    channelId: string & tags.Format<"uuid">;

    /** UUID of the section to update. */
    sectionId: string & tags.Format<"uuid">;

    /** Update payload for the section entity fields. */
    body: IAimallBackendSection.IUpdate;
  };
  export type Body = IAimallBackendSection.IUpdate;
  export type Response = IAimallBackendSection;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/channels/:channelId/sections/:sectionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): IAimallBackendSection =>
    typia.random<IAimallBackendSection>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a section (aimall_backend_sections) under a channel by UUIDs.
 *
 * Logically delete (soft delete) a section assigned to a specific channel.
 * Instead of removing the row from the table, this operation marks the
 * deleted_at field with a timestamp. The section remains in the backend for
 * compliance and auditing, but disappears from active query results consumers.
 *
 * This operation is reserved for administrators, as removing sections affects
 * UI/channel logic. Implementation must validate section existence and parent
 * channel match. Audit logging of every section deletion is a strict
 * requirement. In case the target section is not found, a meaningful 404 error
 * should be returned. This endpoint integrates with the full CRUD operation set
 * for sections and may require list/get endpoints for restoration workflows.
 *
 * @param props.connection
 * @param props.channelId UUID of the parent channel for the section.
 * @param props.sectionId UUID of the section to delete.
 * @path /aimall-backend/administrator/channels/:channelId/sections/:sectionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent channel for the section. */
    channelId: string & tags.Format<"uuid">;

    /** UUID of the section to delete. */
    sectionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/channels/:channelId/sections/:sectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

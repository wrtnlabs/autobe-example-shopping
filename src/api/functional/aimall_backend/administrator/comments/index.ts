import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendComment } from "../../../../structures/IPageIAimallBackendComment";
import { IAimallBackendComment } from "../../../../structures/IAimallBackendComment";
export * as attachments from "./attachments";
export * as comments from "./comments";

/**
 * Retrieve a paginated list of all community comments
 * (aimall_backend_comments).
 *
 * Fetch a paginated list of all community comments from the platform. This
 * operation exposes all comment records, including their associations (posts,
 * reviews, threads), authorship, and any soft-deletion (deleted_at field
 * present).
 *
 * Security: Retrieval of all comments should be restricted to the administrator
 * for privacy, data minimization, and moderation needs.
 *
 * Choose PATCH /comments for advanced search/filter, and GET
 * /comments/{commentId} for comment-specific queries.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendComment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/comments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/comments";
  export const random = (): IPageIAimallBackendComment =>
    typia.random<IPageIAimallBackendComment>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Advanced search, filter, and paginate community comments
 * (aimall_backend_comments).
 *
 * Allows advanced search/filter and sorting of community comments in
 * aimall_backend_comments. Query criteria can include post_id, review_id,
 * customer_id, parent_id (for threads), or body text matches. Ensures only
 * administrators can perform such queries since the search may return sensitive
 * or private comments.
 *
 * Use GET for general list, PATCH for filtered results, and GET
 * /comments/{commentId} for detail retrieval.
 *
 * @param props.connection
 * @param props.body Query/filter parameters for advanced comment search and
 *   pagination.
 * @path /aimall-backend/administrator/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Query/filter parameters for advanced comment search and pagination. */
    body: IAimallBackendComment.IRequest;
  };
  export type Body = IAimallBackendComment.IRequest;
  export type Response = IPageIAimallBackendComment;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/comments";
  export const random = (): IPageIAimallBackendComment =>
    typia.random<IPageIAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve one comment detail by commentId (aimall_backend_comments).
 *
 * Get full detail for one comment from aimall_backend_comments using its UUID.
 * Returns all associated attributes, including content, parent/threading,
 * ownership, soft deletion.
 *
 * Only administrators have access due to potential privacy and moderation
 * restrictions.
 *
 * @param props.connection
 * @param props.commentId UUID primary key of the comment record sought.
 * @path /aimall-backend/administrator/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID primary key of the comment record sought. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a single comment (by commentId) in aimall_backend_comments.
 *
 * Modify body text, privacy flag, or soft-delete a specific comment (UUID) in
 * the aimall_backend_comments table. Accepts an update DTO with allowed
 * properties. Only the comment's author (customer) or administrator may perform
 * the update based on permissions.
 *
 * Attempting to update an unauthorized comment is denied. Use soft-delete
 * (deleted_at) for logical removal.
 *
 * @param props.connection
 * @param props.commentId UUID of the comment to update.
 * @param props.body Fields to modify (see IAimallBackendComment.IUpdate).
 * @path /aimall-backend/administrator/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /** Fields to modify (see IAimallBackendComment.IUpdate). */
    body: IAimallBackendComment.IUpdate;
  };
  export type Body = IAimallBackendComment.IUpdate;
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (logical delete) a comment by commentId in
 * aimall_backend_comments.
 *
 * Logically delete a comment by setting deleted_at for the target UUID in
 * aimall_backend_comments. Deletion is restricted to ownership (customer) or
 * administrator role. Hard deletion is disallowed in this schema; logical
 * (soft) deletion is tracked for compliance and audit retention.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the comment to soft-delete.
 * @path /aimall-backend/administrator/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID PK of the comment to soft-delete. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

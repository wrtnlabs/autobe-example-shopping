import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendConfiguration } from "../../../../structures/IAimallBackendConfiguration";
import { IPageIAimallBackendConfiguration } from "../../../../structures/IPageIAimallBackendConfiguration";

/**
 * List all system configurations (aimall_backend_configurations table).
 *
 * Retrieve a full list of system configuration entities from the platform
 * backend. This operation is primarily for administrative or technical staff
 * needing an overview of all key-value pairs that drive global, channel, or
 * section-scoped backend behaviors.
 *
 * Configuration entries correspond directly to the
 * aimall_backend_configurations schema, with each entry including detailing
 * such as its unique id, key, value, optional channel_id, optional section_id,
 * and audit timestamps. Each configuration may optionally reference a channel
 * or section entity—null values indicate global configurations.
 *
 * Security: Only users with administrator roles should access this endpoint due
 * to the sensitive nature of platform configuration, including potential
 * feature toggles or controller flags.
 *
 * Returned data reflects all atomic fields as defined in the schema. Use this
 * endpoint to perform audits, visualize configuration landscape, or prepare for
 * configuration updates.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/configurations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IAimallBackendConfiguration.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/configurations",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/configurations";
  export const random = (): IAimallBackendConfiguration.ISummary =>
    typia.random<IAimallBackendConfiguration.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new backend configuration entry (aimall_backend_configurations
 * table).
 *
 * Create a new configuration entity within the system's backend configuration
 * management table. The operation validates input based on the
 * IAimallBackendConfiguration.ICreate schema, enforcing uniqueness for (key,
 * channel_id, section_id) to prevent accidental overlaps.
 *
 * All atomic configuration fields must be provided in the request body: key,
 * value, and optional channel_id/section_id for scoping. On success, the
 * response includes the newly created configuration record as per the
 * IAimallBackendConfiguration DTO.
 *
 * Security: Only administrative users may create new backend configurations.
 * Additional controller logic should ensure referenced channel and section
 * exist prior to row creation. Failed validation or violation of unique
 * constraint returns appropriate error responses.
 *
 * @param props.connection
 * @param props.body Details required to create a new configuration entity.
 * @path /aimall-backend/administrator/configurations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details required to create a new configuration entity. */
    body: IAimallBackendConfiguration.ICreate;
  };
  export type Body = IAimallBackendConfiguration.ICreate;
  export type Response = IAimallBackendConfiguration;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/configurations";
  export const random = (): IAimallBackendConfiguration =>
    typia.random<IAimallBackendConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search/listing of configurations with filtering and pagination
 * (aimall_backend_configurations table).
 *
 * Perform a paginated, filtered search of system configuration records. This
 * operation is intended for sophisticated administrative and DevOps workflows
 * where quick lookup or compliance audits require precise filtering—such as
 * reviewing feature flag settings, identifying by key, or extracting all
 * configurations for a specific channel or section.
 *
 * Query parameters are passed in the request body according to the
 * IAimallBackendConfiguration.IRequest schema, supporting attributes such as
 * key, channel_id, section_id, value patterns, or date ranges. The API response
 * includes pagination metadata and a set of configuration records matching the
 * search criteria, as per the IAimallBackendConfiguration.ISummary DTO.
 *
 * Security: Only administrative roles can access this endpoint, as
 * configuration data control is a privileged operation. Use this for dashboard
 * search, config reporting, or audit workflows.
 *
 * If search criteria do not match any records, the API returns an empty data
 * array with pagination reflecting no results.
 *
 * @param props.connection
 * @param props.body Advanced filter and pagination criteria according to
 *   IAimallBackendConfiguration.IRequest schema.
 * @path /aimall-backend/administrator/configurations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Advanced filter and pagination criteria according to
     * IAimallBackendConfiguration.IRequest schema.
     */
    body: IAimallBackendConfiguration.IRequest;
  };
  export type Body = IAimallBackendConfiguration.IRequest;
  export type Response = IPageIAimallBackendConfiguration.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/configurations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/configurations";
  export const random = (): IPageIAimallBackendConfiguration.ISummary =>
    typia.random<IPageIAimallBackendConfiguration.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific configuration entity by ID (aimall_backend_configurations
 * table).
 *
 * Retrieve full detail about a specific configuration entity in the system
 * backend. The endpoint targets a configuration record by its unique id
 * (configurationId) from the aimall_backend_configurations table, returning all
 * normalized fields such as key, value, optional channel_id, section_id,
 * description, and audit timestamps.
 *
 * This operation is used by admin interfaces for configuration editing, audit
 * logging, or compliance reporting, enabling operators to view the full
 * business impact and context of each configuration setting.
 *
 * Security: This API is restricted to system administrators due to the
 * sensitivity of backend configuration data. Appropriate permission checks must
 * be enforced in the controller or middleware.
 *
 * @param props.connection
 * @param props.configurationId The unique identifier of the configuration
 *   entity to retrieve.
 * @path /aimall-backend/administrator/configurations/:configurationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the configuration entity to retrieve. */
    configurationId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendConfiguration;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): IAimallBackendConfiguration =>
    typia.random<IAimallBackendConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a system configuration entity by id (aimall_backend_configurations
 * table).
 *
 * Update a configuration entry in the backend system using the given
 * configurationId path parameter. The request body adheres to the
 * IAimallBackendConfiguration.IUpdate schema, where mutable properties like
 * key, value, channel_id, section_id, and description may be altered.
 *
 * The update operation checks all business constraints, especially uniqueness
 * for (key, channel_id, section_id) combination and validity of related
 * channel/section entities. Upon successful validation, the record is updated
 * and returned as an IAimallBackendConfiguration instance, with updated_at
 * reflecting the latest modification timestamp.
 *
 * Security: Only administrative users may update configurations. Controller
 * logic is expected to verify permissions and validate input. Unique/constraint
 * violation or missing channel/section causes errors, as enforced by database
 * and API model.
 *
 * @param props.connection
 * @param props.configurationId The unique identifier of the configuration
 *   entity to update.
 * @param props.body Payload for updating mutable configuration entity fields.
 * @path /aimall-backend/administrator/configurations/:configurationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the configuration entity to update. */
    configurationId: string & tags.Format<"uuid">;

    /** Payload for updating mutable configuration entity fields. */
    body: IAimallBackendConfiguration.IUpdate;
  };
  export type Body = IAimallBackendConfiguration.IUpdate;
  export type Response = IAimallBackendConfiguration;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/configurations/:configurationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): IAimallBackendConfiguration =>
    typia.random<IAimallBackendConfiguration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a configuration entity by id (hard delete,
 * aimall_backend_configurations table).
 *
 * Permanently delete a configuration entity in the backend system using the
 * specified configurationId. The deletion is hard: as the
 * aimall_backend_configurations schema contains no soft-delete field, the
 * record is physically removed from the database and cannot be recovered.
 *
 * This operation is intended for privileged administrative users with careful
 * audit-logging and confirmation flows, especially since deletions have
 * irreversible compliance impact. Best practice dictates that related triggers
 * or constraints should handle the cleanup of any dependent foreign keys.
 *
 * Security: Only system administrators should be permitted to use this
 * endpoint. On success, returns no content. Trying to delete a configurationId
 * that does not exist returns a 404 error.
 *
 * @param props.connection
 * @param props.configurationId The unique ID of the system configuration entity
 *   to delete.
 * @path /aimall-backend/administrator/configurations/:configurationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique ID of the system configuration entity to delete. */
    configurationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/configurations/:configurationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/configurations/${encodeURIComponent(props.configurationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configurationId")(() =>
        typia.assert(props.configurationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

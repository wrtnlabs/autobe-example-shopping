import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCouponRedemption } from "../../../../../structures/IPageIAimallBackendCouponRedemption";
import { IAimallBackendCouponRedemption } from "../../../../../structures/IAimallBackendCouponRedemption";

/**
 * Get all redemption events for a coupon (aimall_backend_coupon_redemptions).
 *
 * Return a list of all redemption events/attempts relating to a specific
 * coupon. The aimall_backend_coupon_redemptions table is traversed using
 * couponId as a foreign key. Each event includes customer, campaign, order,
 * status, timestamps, and possible product references for the redemption. This
 * data supports compliance, fraud IR, and auditing required by operations and
 * support teams. Accessible to admin/support audiences only, and errors include
 * not-found or insufficient privilege.
 *
 * @param props.connection
 * @param props.couponId Unique identifier for the coupon for which to retrieve
 *   all redemption events.
 * @path /aimall-backend/administrator/coupons/:couponId/couponRedemptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the coupon for which to retrieve all redemption
     * events.
     */
    couponId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendCouponRedemption;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/coupons/:couponId/couponRedemptions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}/couponRedemptions`;
  export const random = (): IPageIAimallBackendCouponRedemption =>
    typia.random<IPageIAimallBackendCouponRedemption>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new coupon redemption event (aimall_backend_coupon_redemptions).
 *
 * Insert a new redemption event for a coupon. Used in scenarios such as logging
 * a manual admin redemption, error correction, or documenting an attempted
 * redemption as part of IR/audit. Accepts required fields to create
 * IAimallBackendCouponRedemption.ICreate. Responds with the new record. Strict
 * role validation and business logic around coupon state/eligibility apply.
 * Returns full new entity; errors for ineligible coupon or malformed input.
 *
 * @param props.connection
 * @param props.couponId Coupon to which this redemption record belongs.
 * @param props.body Redemption record details required for creation.
 * @path /aimall-backend/administrator/coupons/:couponId/couponRedemptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Coupon to which this redemption record belongs. */
    couponId: string & tags.Format<"uuid">;

    /** Redemption record details required for creation. */
    body: IAimallBackendCouponRedemption.ICreate;
  };
  export type Body = IAimallBackendCouponRedemption.ICreate;
  export type Response = IAimallBackendCouponRedemption;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/coupons/:couponId/couponRedemptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}/couponRedemptions`;
  export const random = (): IAimallBackendCouponRedemption =>
    typia.random<IAimallBackendCouponRedemption>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced, paginated/searchable coupon redemption event listing
 * (aimall_backend_coupon_redemptions).
 *
 * Offer paginated, filterable search over all coupon redemptions linked to a
 * couponId. The body enables flexible filtering (e.g. by date, status,
 * customer, orderId) for support, audit, or analytic workflows. Only
 * admin/support roles can perform this, given possible data sensitivity about
 * failed/investigated redemptions. Returns paged set of coupon redemption
 * records from aimall_backend_coupon_redemptions, with error/validation
 * handling for search constraints.
 *
 * @param props.connection
 * @param props.couponId Coupon whose redemption records to search/filter.
 * @param props.body Redemption event search and filter criteria for given
 *   coupon.
 * @path /aimall-backend/administrator/coupons/:couponId/couponRedemptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Coupon whose redemption records to search/filter. */
    couponId: string & tags.Format<"uuid">;

    /** Redemption event search and filter criteria for given coupon. */
    body: IAimallBackendCouponRedemption.IRequest;
  };
  export type Body = IAimallBackendCouponRedemption.IRequest;
  export type Response = IPageIAimallBackendCouponRedemption;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/coupons/:couponId/couponRedemptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}/couponRedemptions`;
  export const random = (): IPageIAimallBackendCouponRedemption =>
    typia.random<IPageIAimallBackendCouponRedemption>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch full details for a single coupon redemption event
 * (aimall_backend_coupon_redemptions).
 *
 * Fetch all details for a single coupon redemption event tied to couponId and
 * couponRedemptionId (primary/event key). The information exposed includes all
 * context provided by the aimall_backend_coupon_redemptions record (customer,
 * campaign, status, time, references to linked order/product). Used for audit,
 * troubleshooting, or analytic drilldowns. Available to admin/support audiences
 * only. Handles not-found and unauthorized cases.
 *
 * @param props.connection
 * @param props.couponId Coupon for which the redemption record is fetched.
 * @param props.couponRedemptionId Redemption event unique id (primary key).
 * @path /aimall-backend/administrator/coupons/:couponId/couponRedemptions/:couponRedemptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Coupon for which the redemption record is fetched. */
    couponId: string & tags.Format<"uuid">;

    /** Redemption event unique id (primary key). */
    couponRedemptionId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCouponRedemption;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/coupons/:couponId/couponRedemptions/:couponRedemptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}/couponRedemptions/${encodeURIComponent(props.couponRedemptionId ?? "null")}`;
  export const random = (): IAimallBackendCouponRedemption =>
    typia.random<IAimallBackendCouponRedemption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("couponRedemptionId")(() =>
        typia.assert(props.couponRedemptionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update fields on a coupon redemption record
 * (aimall_backend_coupon_redemptions).
 *
 * Allows administrators or support to update mutable fields of a redemption
 * event for a coupon. Use cases include updating redemption status
 * (success/fail/invalid), fixing customer association, or adding audit
 * evidence. Responds with updated record. Operation is tracked for compliance,
 * and update is only permitted if allowed by business/state logic. Returns
 * error for attempts to modify immutable or forbidden fields, or for invalid
 * identifiers.
 *
 * @param props.connection
 * @param props.couponId Coupon containing the redemption event.
 * @param props.couponRedemptionId Redemption event record unique ID.
 * @param props.body Update body with allowed mutable fields for coupon
 *   redemption.
 * @path /aimall-backend/administrator/coupons/:couponId/couponRedemptions/:couponRedemptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Coupon containing the redemption event. */
    couponId: string & tags.Format<"uuid">;

    /** Redemption event record unique ID. */
    couponRedemptionId: string & tags.Format<"uuid">;

    /** Update body with allowed mutable fields for coupon redemption. */
    body: IAimallBackendCouponRedemption.IUpdate;
  };
  export type Body = IAimallBackendCouponRedemption.IUpdate;
  export type Response = IAimallBackendCouponRedemption;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/coupons/:couponId/couponRedemptions/:couponRedemptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}/couponRedemptions/${encodeURIComponent(props.couponRedemptionId ?? "null")}`;
  export const random = (): IAimallBackendCouponRedemption =>
    typia.random<IAimallBackendCouponRedemption>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("couponRedemptionId")(() =>
        typia.assert(props.couponRedemptionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a coupon redemption event
 * (aimall_backend_coupon_redemptions).
 *
 * Hard delete of a coupon redemption record from the event/audit log. Only
 * available to admin/support roles with permissible access. Not permitted for
 * resolved/closed/caseful fraud events. Immediate removal from underlying
 * storage. Tracks the operation for auditing. Returns no content. Failures for
 * unauthorized, forbidden, or locked redemption events.
 *
 * @param props.connection
 * @param props.couponId Coupon under which the redemption event is deleted.
 * @param props.couponRedemptionId Redemption event unique identifier to delete.
 * @path /aimall-backend/administrator/coupons/:couponId/couponRedemptions/:couponRedemptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Coupon under which the redemption event is deleted. */
    couponId: string & tags.Format<"uuid">;

    /** Redemption event unique identifier to delete. */
    couponRedemptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/coupons/:couponId/couponRedemptions/:couponRedemptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}/couponRedemptions/${encodeURIComponent(props.couponRedemptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("couponRedemptionId")(() =>
        typia.assert(props.couponRedemptionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

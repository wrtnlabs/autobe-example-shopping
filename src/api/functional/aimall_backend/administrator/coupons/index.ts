import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCoupon } from "../../../../structures/IPageIAimallBackendCoupon";
import { IAimallBackendCoupon } from "../../../../structures/IAimallBackendCoupon";
export * as couponRedemptions from "./couponRedemptions";

/**
 * List coupons (Coupon table, paginated and role-based).
 *
 * Obtain a simple paginated or full list of all coupon records. Output includes
 * coupon atomic metadata as defined by the aimall_backend_coupons schema,
 * supporting basic management, user-facing voucher display, or analytics.
 *
 * Returns coupon code, campaign details, status (issued, redeemed, expired,
 * etc), assignment, and timestamps but never returns information not present in
 * the schema (no soft-delete present). Result set is typically restricted per
 * authorization: customers see only their own coupons, while administrators can
 * see all coupons system-wide for compliance or monitoring.
 *
 * Supports role-based results: customer, administrator, or analytic viewer.
 * Related APIs: search (PATCH), detail (GET by ID), create, update, delete.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/coupons
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendCoupon;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/coupons",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/coupons";
  export const random = (): IPageIAimallBackendCoupon =>
    typia.random<IPageIAimallBackendCoupon>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new coupon (Coupon table, voucher issuance).
 *
 * Inserts (creates) a new coupon/voucher record. Only administrators or backend
 * automation should call this endpoint, which directly issues a new coupon to
 * the identified campaign (and optionally a customer, for personalized
 * vouchers). All fields required by the coupon creation DTO
 * (IAimallBackendCoupon.ICreate) must be provided, including issuance/expiry
 * dates, campaign, and unique code. Business rules for code uniqueness,
 * campaign relationship, and lifecycle state are enforced.
 *
 * Successful creation returns the full new row as per the coupon schema.
 * Creation events are logged for compliance/auditability; errors arise on
 * constraint violation (e.g., duplicate code or conflicting status).
 *
 * @param props.connection
 * @param props.body Coupon issuance payload for new coupon creation (Voucher
 *   DTO).
 * @path /aimall-backend/administrator/coupons
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Coupon issuance payload for new coupon creation (Voucher DTO). */
    body: IAimallBackendCoupon.ICreate;
  };
  export type Body = IAimallBackendCoupon.ICreate;
  export type Response = IAimallBackendCoupon;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/coupons";
  export const random = (): IAimallBackendCoupon =>
    typia.random<IAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter coupons (Coupon table, advanced query).
 *
 * Accepts advanced filtering and pagination options via request body for the
 * coupon table. IAM/BAC is enforced: customers may filter their own vouchers,
 * while admins can filter all coupons using combinations of code, campaign,
 * customer, status, or date range per the strict schema constraints.
 *
 * Each matching row includes only fields in the forward-facing coupon schema,
 * supporting reporting, anti-fraud investigations, and entitlement management.
 * Pagination metadata (total count, page, etc) are standardized across results
 * matching the IAimallBackendCoupon.IRequest/response pattern.
 *
 * Complements the GET endpoint but supports complex filters, batch operations,
 * or analytic scenarios.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination criteria for searching
 *   coupon records.
 * @path /aimall-backend/administrator/coupons
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Filtering, sorting, and pagination criteria for searching coupon
     * records.
     */
    body: IAimallBackendCoupon.IRequest;
  };
  export type Body = IAimallBackendCoupon.IRequest;
  export type Response = IPageIAimallBackendCoupon;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/coupons";
  export const random = (): IPageIAimallBackendCoupon =>
    typia.random<IPageIAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch full detail for a single coupon (Coupon table).
 *
 * Fetches a single coupon's detailed schema record by its UUID identifier.
 * Provides a complete atomic snapshot of code, campaign connection, status
 * (issued, redeemed, expired), customer assignment, and relevant timestamps.
 *
 * Role-based access rules: customers may request only their own coupons, admins
 * can access any coupon for compliance/tasking. Sensitive data (such as
 * redemption history or campaign association) is presented only within the
 * limits of the coupon schema. Related endpoints: coupon listing/search, coupon
 * redemption record queries.
 *
 * @param props.connection
 * @param props.couponId UUID of the coupon to query for full details.
 * @path /aimall-backend/administrator/coupons/:couponId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the coupon to query for full details. */
    couponId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCoupon;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IAimallBackendCoupon =>
    typia.random<IAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing coupon voucher (Coupon table).
 *
 * Modify (update) a coupon voucher identified by couponId using a validated
 * update payload. Supports real-world flows including: marking as redeemed,
 * correcting assignment, expiring upon policy/legal requirement, or
 * administratively invalidating. Strong audit log is created for all updates,
 * with role gating enforced strictly.
 *
 * Payload must match the coupon update DTO for this schema, and any business
 * logic/constraint checks are executed as per requirements. A full new record
 * is returned if successful, reflecting the state after update. This endpoint
 * is not available to customer users, only admins and backend automation.
 *
 * @param props.connection
 * @param props.couponId UUID of the coupon to update (voucher primary key).
 * @param props.body Coupon update payload (valid fields only, per
 *   IAimallBackendCoupon.IUpdate schema).
 * @path /aimall-backend/administrator/coupons/:couponId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the coupon to update (voucher primary key). */
    couponId: string & tags.Format<"uuid">;

    /**
     * Coupon update payload (valid fields only, per
     * IAimallBackendCoupon.IUpdate schema).
     */
    body: IAimallBackendCoupon.IUpdate;
  };
  export type Body = IAimallBackendCoupon.IUpdate;
  export type Response = IAimallBackendCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/coupons/:couponId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IAimallBackendCoupon =>
    typia.random<IAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a coupon voucher record (Coupon table, admin-only, hard delete).
 *
 * Removes (hard deletes) a coupon/voucher record identified by couponId.
 * Adheres to business and compliance requirements—real deletion occurs since
 * there is no schema provision for soft/historical state. Only system
 * administrators, service automation, or compliance enforcement code may call
 * this endpoint directly.
 *
 * A successful operation purges the row. Errors are returned for missing or
 * already-removed UUIDs. Recommended: ensure redemptions and campaign history
 * are not broken by deletion, and create audit log records as per regulatory
 * obligations.
 *
 * @param props.connection
 * @param props.couponId UUID of the coupon to delete (voucher).
 * @path /aimall-backend/administrator/coupons/:couponId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the coupon to delete (voucher). */
    couponId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

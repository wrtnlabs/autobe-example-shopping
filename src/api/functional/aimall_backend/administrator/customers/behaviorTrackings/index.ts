import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAIMallBackendBehaviorTracking } from "../../../../../structures/IPageIAIMallBackendBehaviorTracking";
import { IAIMallBackendBehaviorTracking } from "../../../../../structures/IAIMallBackendBehaviorTracking";

/**
 * Retrieve all behavior tracking events for a customer (Actors DB).
 *
 * Fetch all behavioral tracking events associated with the given customer. Each
 * entry includes the event type, payload data, and occurred timestamp. Data may
 * include shopping, navigation, or engagement analytics as permitted by system
 * policy.
 *
 * This operation is sensitive and MUST be restricted to the account owner or
 * system administrators for audit or troubleshooting. Data minimization and
 * privacy rules apply. Large lists are paginated or truncated per system
 * policy.
 *
 * Returns a collection of behavioral tracking records for downstream analytics
 * or self-service insight dashboards.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the target customer whose
 *   behavioral events are to be listed
 * @path /aimall-backend/administrator/customers/:customerId/behaviorTrackings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target customer whose behavioral events are
     * to be listed
     */
    customerId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAIMallBackendBehaviorTracking;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/customers/:customerId/behaviorTrackings",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/customers/${encodeURIComponent(props.customerId ?? "null")}/behaviorTrackings`;
  export const random = (): IPageIAIMallBackendBehaviorTracking =>
    typia.random<IPageIAIMallBackendBehaviorTracking>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Log a new behavior tracking event for a customer (Actors DB).
 *
 * Creates a new behavioral tracking record for the specified customer.
 * Triggered by events such as login, product view, cart addition,
 * recommendation click, or search.
 *
 * Input must specify event type, event data (serialized), and timestamp of
 * occurrence. Validates that tracking is permitted for the user (opt-in via
 * consent). Restricted to owner or administrative staff.
 *
 * Returns the full record as created. All writes are auditable and permission
 * checked.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer for whom the
 *   activity is to be logged
 * @param props.body Payload for logging a behavioral event including type,
 *   data, and timestamp
 * @path /aimall-backend/administrator/customers/:customerId/behaviorTrackings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the customer for whom the activity is to be
     * logged
     */
    customerId: string & tags.Format<"uuid">;

    /**
     * Payload for logging a behavioral event including type, data, and
     * timestamp
     */
    body: IAIMallBackendBehaviorTracking.ICreate;
  };
  export type Body = IAIMallBackendBehaviorTracking.ICreate;
  export type Response = IAIMallBackendBehaviorTracking;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/customers/:customerId/behaviorTrackings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/customers/${encodeURIComponent(props.customerId ?? "null")}/behaviorTrackings`;
  export const random = (): IAIMallBackendBehaviorTracking =>
    typia.random<IAIMallBackendBehaviorTracking>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and filter behavior tracking events for a customer (Actors DB).
 *
 * Search/filter behavioral tracking records for the specified customer. Request
 * body may support filtering by event type, time range, or additional query
 * parameters for analytic views and compliance auditing.
 *
 * Only available to the account owner or administrative roles, and logs all
 * access or search queries.
 *
 * Returns a filtered/paginated collection of matched behavioral tracking
 * records.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the target customer whose
 *   behavioral tracking events are searched
 * @param props.body Search/filter criteria and pagination for behavioral events
 * @path /aimall-backend/administrator/customers/:customerId/behaviorTrackings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Unique identifier of the target customer whose behavioral tracking
     * events are searched
     */
    customerId: string & tags.Format<"uuid">;

    /** Search/filter criteria and pagination for behavioral events */
    body: IAIMallBackendBehaviorTracking.IRequest;
  };
  export type Body = IAIMallBackendBehaviorTracking.IRequest;
  export type Response = IPageIAIMallBackendBehaviorTracking;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/customers/:customerId/behaviorTrackings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/customers/${encodeURIComponent(props.customerId ?? "null")}/behaviorTrackings`;
  export const random = (): IPageIAIMallBackendBehaviorTracking =>
    typia.random<IPageIAIMallBackendBehaviorTracking>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific behavior tracking record for a customer (Actors DB).
 *
 * Fetch details about a single behavioral tracking event for the given
 * customer. Returns the activity event type, payload, and timestamp.
 *
 * Available only to the account owner or privileged/admin staff for user
 * transparency and security audit.
 *
 * Returns detailed information about the event or error if not found or
 * unauthorized.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer
 * @param props.behaviorTrackingId Unique identifier of the behavioral tracking
 *   event to retrieve
 * @path /aimall-backend/administrator/customers/:customerId/behaviorTrackings/:behaviorTrackingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the customer */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier of the behavioral tracking event to retrieve */
    behaviorTrackingId: string & tags.Format<"uuid">;
  };
  export type Response = IAIMallBackendBehaviorTracking;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/customers/:customerId/behaviorTrackings/:behaviorTrackingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/customers/${encodeURIComponent(props.customerId ?? "null")}/behaviorTrackings/${encodeURIComponent(props.behaviorTrackingId ?? "null")}`;
  export const random = (): IAIMallBackendBehaviorTracking =>
    typia.random<IAIMallBackendBehaviorTracking>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("behaviorTrackingId")(() =>
        typia.assert(props.behaviorTrackingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update behavioral tracking record for a customer (Actors DB).
 *
 * Update an existing behavioral tracking entry for a customer, typically to
 * correct event classification or redact/rectify sensitive event data. Mutation
 * is only allowed by authorized parties (owner or admin) and all updates are
 * logged for compliance.
 *
 * Returns the updated event record after mutation. Forbidden or unauthorized
 * mutability returns error or audit note.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer
 * @param props.behaviorTrackingId Unique identifier of the behavioral tracking
 *   record being updated
 * @param props.body Updated event data to patch the behavior tracking record
 * @path /aimall-backend/administrator/customers/:customerId/behaviorTrackings/:behaviorTrackingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the customer */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier of the behavioral tracking record being updated */
    behaviorTrackingId: string & tags.Format<"uuid">;

    /** Updated event data to patch the behavior tracking record */
    body: IAIMallBackendBehaviorTracking.IUpdate;
  };
  export type Body = IAIMallBackendBehaviorTracking.IUpdate;
  export type Response = IAIMallBackendBehaviorTracking;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/customers/:customerId/behaviorTrackings/:behaviorTrackingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/customers/${encodeURIComponent(props.customerId ?? "null")}/behaviorTrackings/${encodeURIComponent(props.behaviorTrackingId ?? "null")}`;
  export const random = (): IAIMallBackendBehaviorTracking =>
    typia.random<IAIMallBackendBehaviorTracking>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("behaviorTrackingId")(() =>
        typia.assert(props.behaviorTrackingId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific behavior tracking record for a customer (Actors DB).
 *
 * Hard delete of a behavioral tracking event record for the specified customer.
 * Used for regulatory right-to-be-forgotten compliance, admin-driven redaction,
 * or owner-requested event removal.
 *
 * Only the owner (customer) or authorized admin may execute this. All deletions
 * and attempts are fully logged and monitored for abuse prevention or
 * compliance reporting. The absence of a soft delete field means the operation
 * is irreversible.
 *
 * No body or data is returned except for success/failure code.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer whose behavioral
 *   record is to be deleted
 * @param props.behaviorTrackingId Unique identifier of the behavioral tracking
 *   record to delete
 * @path /aimall-backend/administrator/customers/:customerId/behaviorTrackings/:behaviorTrackingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the customer whose behavioral record is to be
     * deleted
     */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier of the behavioral tracking record to delete */
    behaviorTrackingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/customers/:customerId/behaviorTrackings/:behaviorTrackingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/customers/${encodeURIComponent(props.customerId ?? "null")}/behaviorTrackings/${encodeURIComponent(props.behaviorTrackingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("behaviorTrackingId")(() =>
        typia.assert(props.behaviorTrackingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

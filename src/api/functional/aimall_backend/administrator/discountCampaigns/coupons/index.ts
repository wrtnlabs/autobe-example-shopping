import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCoupon } from "../../../../../structures/IPageIAimallBackendCoupon";
import { IAimallBackendCoupon } from "../../../../../structures/IAimallBackendCoupon";

/**
 * Retrieve all coupons belonging to the specified discount campaign
 * (aimall_backend_coupons).
 *
 * Retrieve all coupons associated with a specific discount campaign from the
 * aimall_backend_coupons table. Each coupon record contains a unique code,
 * status, issuance and expiry info, and may reference an owning customer (if
 * applicable). The operation enforces permissions such that only
 * administrators, campaign owners, or authorized managers may access full
 * coupon lists with status or customer linkage details. It supports tracing
 * issued/expired/redeemed coupons as needed for compliance, analytics, and
 * management dashboards. Error handling should include not-found or permission
 * errors, and filtering by status is recommended for large campaigns.
 *
 * @param props.connection
 * @param props.discountCampaignId Unique identifier for the target discount
 *   campaign.
 * @path /aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the target discount campaign. */
    discountCampaignId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendCoupon;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/discountCampaigns/${encodeURIComponent(props.discountCampaignId ?? "null")}/coupons`;
  export const random = (): IPageIAimallBackendCoupon =>
    typia.random<IPageIAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discountCampaignId")(() =>
        typia.assert(props.discountCampaignId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Issue or create a new coupon for the given campaign (aimall_backend_coupons).
 *
 * Create or issue a new coupon for a specific discount campaign, using
 * aimall_backend_coupons. Accepts coupon data in the body, including target
 * customer (optional), code, expiry, and initial status. Enforces uniqueness
 * and campaign-level issuance rules as per platform business logic. Roles with
 * admin or manager privileges may request this operation, and failure to
 * satisfy uniqueness or campaign-scoping logic returns errors.
 *
 * @param props.connection
 * @param props.discountCampaignId Unique identifier of the discount campaign
 *   for which the coupon is issued.
 * @param props.body Coupon creation information, including code/status and
 *   possible customer association.
 * @path /aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the discount campaign for which the coupon is
     * issued.
     */
    discountCampaignId: string & tags.Format<"uuid">;

    /**
     * Coupon creation information, including code/status and possible
     * customer association.
     */
    body: IAimallBackendCoupon.ICreate;
  };
  export type Body = IAimallBackendCoupon.ICreate;
  export type Response = IAimallBackendCoupon;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/discountCampaigns/${encodeURIComponent(props.discountCampaignId ?? "null")}/coupons`;
  export const random = (): IAimallBackendCoupon =>
    typia.random<IAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discountCampaignId")(() =>
        typia.assert(props.discountCampaignId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced paginated/filtered search over coupons for a campaign
 * (aimall_backend_coupons).
 *
 * Provide a flexible, paginated, and filterable listing of coupons under a
 * specific discount campaign, supporting advanced management use cases.
 * Leverages the aimall_backend_coupons table for records, and allows
 * administrators to query by coupon status, issuing customer, expiration range,
 * etc., by passing advanced filtering/search criteria in the body. Returns
 * paged lists for analytic and dashboard integration. Results may be restricted
 * to roles with full campaign/coupon access. Related to GET operation but
 * provides improved search granularity.
 *
 * @param props.connection
 * @param props.discountCampaignId Target campaign's unique identifier.
 * @param props.body Search, filter, and pagination criteria for coupon query.
 * @path /aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Target campaign's unique identifier. */
    discountCampaignId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination criteria for coupon query. */
    body: IAimallBackendCoupon.IRequest;
  };
  export type Body = IAimallBackendCoupon.IRequest;
  export type Response = IPageIAimallBackendCoupon;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/discountCampaigns/${encodeURIComponent(props.discountCampaignId ?? "null")}/coupons`;
  export const random = (): IPageIAimallBackendCoupon =>
    typia.random<IPageIAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discountCampaignId")(() =>
        typia.assert(props.discountCampaignId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch all fields for a coupon record under campaign (aimall_backend_coupons).
 *
 * Fetch all details for a single coupon belonging to a given discount campaign,
 * from the aimall_backend_coupons table. Returns full record, including code,
 * status, owning customer, lifecycle timestamps, and campaign linkage. Only
 * accessible to roles with campaign or admin privileges. Used for individual
 * coupon inspection, disputed code validation, and support workflows. Errors
 * include not found or access denied for unauthorized queries.
 *
 * @param props.connection
 * @param props.discountCampaignId Identifier for the discount campaign set.
 * @param props.couponId Unique identifier for the coupon within the campaign.
 * @path /aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons/:couponId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier for the discount campaign set. */
    discountCampaignId: string & tags.Format<"uuid">;

    /** Unique identifier for the coupon within the campaign. */
    couponId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCoupon;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/discountCampaigns/${encodeURIComponent(props.discountCampaignId ?? "null")}/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IAimallBackendCoupon =>
    typia.random<IAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discountCampaignId")(() =>
        typia.assert(props.discountCampaignId),
      );
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a coupon under a discount campaign (aimall_backend_coupons).
 *
 * Allows administrators or campaign managers to update the details of a single
 * coupon. Modifications can involve status transitions, ownership (customer)
 * re-assignment, or expiry date updates. Applies only if the coupon is eligible
 * for modification (not already redeemed, expired, or invalidated). Returns the
 * updated coupon object. Error conditions include attempting to update an
 * immutable coupon (e.g., already redeemed) or invalid couponId/campaignId.
 *
 * @param props.connection
 * @param props.discountCampaignId Unique identifier of the discount campaign in
 *   scope.
 * @param props.couponId Unique identifier of the coupon to update.
 * @param props.body Fields and values to update for the coupon entity.
 * @path /aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons/:couponId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the discount campaign in scope. */
    discountCampaignId: string & tags.Format<"uuid">;

    /** Unique identifier of the coupon to update. */
    couponId: string & tags.Format<"uuid">;

    /** Fields and values to update for the coupon entity. */
    body: IAimallBackendCoupon.IUpdate;
  };
  export type Body = IAimallBackendCoupon.IUpdate;
  export type Response = IAimallBackendCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons/:couponId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/discountCampaigns/${encodeURIComponent(props.discountCampaignId ?? "null")}/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IAimallBackendCoupon =>
    typia.random<IAimallBackendCoupon>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discountCampaignId")(() =>
        typia.assert(props.discountCampaignId),
      );
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a coupon from a discount campaign (aimall_backend_coupons).
 *
 * Hard delete of a coupon from the aimall_backend_coupons table. Should only be
 * permitted for coupons in 'issued' or possibly 'invalidated' status. If the
 * coupon has already been redeemed or is expired, deletion must be rejected.
 * This operation is tracked/audited, and is only available to admin roles.
 * Returns no content on success, or errors for ineligible coupons or
 * unauthorized requests.
 *
 * @param props.connection
 * @param props.discountCampaignId Discount campaign's unique identifier.
 * @param props.couponId Coupon's unique identifier for deletion.
 * @path /aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons/:couponId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Discount campaign's unique identifier. */
    discountCampaignId: string & tags.Format<"uuid">;

    /** Coupon's unique identifier for deletion. */
    couponId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/discountCampaigns/:discountCampaignId/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/discountCampaigns/${encodeURIComponent(props.discountCampaignId ?? "null")}/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("discountCampaignId")(() =>
        typia.assert(props.discountCampaignId),
      );
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

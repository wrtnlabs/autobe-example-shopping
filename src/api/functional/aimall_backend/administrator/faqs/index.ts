import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendFaq } from "../../../../structures/IAimallBackendFaq";

/**
 * Create a new FAQ entry (knowledge base record).
 *
 * Add a new FAQ record representing a knowledge base entry. Requires complete
 * input for question, answer, category, visible, and sort order fields as
 * described in the schema. This operation is permitted to administrator or
 * knowledge manager roles; guests/customers may not add FAQs by policy.
 *
 * All values are validated for normalization and correct answer/question scope.
 * Audit trail is ensured for all creations for compliance and reporting.
 * Returns the full inserted record for admin review.
 *
 * @param props.connection
 * @param props.body FAQ fields for creation, mapped to schema properties.
 * @path /aimall-backend/administrator/faqs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** FAQ fields for creation, mapped to schema properties. */
    body: IAimallBackendFaq.ICreate;
  };
  export type Body = IAimallBackendFaq.ICreate;
  export type Response = IAimallBackendFaq;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/faqs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/faqs";
  export const random = (): IAimallBackendFaq =>
    typia.random<IAimallBackendFaq>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the fields of a FAQ entry, referenced by its UUID.
 *
 * Edit fields of an existing FAQ record, using its UUID for lookup. Allowed
 * fields are question, answer, category, visible, and sort order, with strict
 * validation against schema normalization. All updates are audited for
 * traceability, with only current/atomic values in the record.
 * Administrator/knowledge manager role is required for writing changes. Returns
 * the entire updated FAQ record after mutation.
 *
 * @param props.connection
 * @param props.faqId UUID of the FAQ record to edit/update.
 * @param props.body Editable FAQ fields; can be partial update but mapped per
 *   full schema for audit.
 * @path /aimall-backend/administrator/faqs/:faqId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the FAQ record to edit/update. */
    faqId: string & tags.Format<"uuid">;

    /**
     * Editable FAQ fields; can be partial update but mapped per full schema
     * for audit.
     */
    body: IAimallBackendFaq.IUpdate;
  };
  export type Body = IAimallBackendFaq.IUpdate;
  export type Response = IAimallBackendFaq;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/faqs/:faqId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/faqs/${encodeURIComponent(props.faqId ?? "null")}`;
  export const random = (): IAimallBackendFaq =>
    typia.random<IAimallBackendFaq>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("faqId")(() => typia.assert(props.faqId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an FAQ record by ID (hard delete only).
 *
 * Permanently remove an FAQ entry by its UUID. This is a hard delete and cannot
 * be reversed. Only permitted for administrator/knowledge manager role and
 * should be used with caution after audit confirmation.
 *
 * The absence of 'deleted_at' in the schema means removed FAQs are fully erased
 * from the database. Any downstream analytics/audits should be triggered on
 * each delete. Deletion attempts on FAQs in use by compliance/analytics may be
 * denied by business logic.
 *
 * @param props.connection
 * @param props.faqId UUID of the FAQ record to delete.
 * @path /aimall-backend/administrator/faqs/:faqId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the FAQ record to delete. */
    faqId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/faqs/:faqId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/faqs/${encodeURIComponent(props.faqId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("faqId")(() => typia.assert(props.faqId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendLoyaltyTransaction } from "../../../../structures/IPageIAimallBackendLoyaltyTransaction";
import { IAimallBackendLoyaltyTransaction } from "../../../../structures/IAimallBackendLoyaltyTransaction";

/**
 * Retrieve paginated list of all loyalty transactions (Coins table).
 *
 * This operation returns a paginated list of all loyalty transactions—including
 * accruals, redemptions, expirations, and reversals—recorded in the
 * aimall_backend_loyalty_transactions table. Each record details a single
 * atomic loyalty event featuring the customer, any related order or coupon,
 * type of transaction, and amount. These logs support compliance audits and
 * fraud prevention, as required by the business logic in the Discount & Loyalty
 * System.
 *
 * Sensitive financial records require that only authorized administrators or
 * the relevant customer can access these data. The endpoint may be used in
 * conjunction with search or reporting systems. Pagination ensures efficient
 * handling for large datasets, while audit trails allow analysis of user- and
 * order-level point activity. No net balances are provided here—clients should
 * compute as needed.
 *
 * If an unauthorized party attempts to access another user's history, access
 * must be denied and all such attempts should be recorded in audit logs, in
 * compliance with non-functional security requirements.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/loyaltyTransactions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendLoyaltyTransaction;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/loyaltyTransactions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/loyaltyTransactions";
  export const random = (): IPageIAimallBackendLoyaltyTransaction =>
    typia.random<IPageIAimallBackendLoyaltyTransaction>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new loyalty transaction (admin-only).
 *
 * Inserts a new atomic loyalty transaction into the
 * aimall_backend_loyalty_transactions table. The transaction may be an accrual,
 * redemption, expiration, or adjustment, as controlled by the type and amount
 * provided via the IAimallBackendLoyaltyTransaction.ICreate DTO. Admins,
 * compliance users, or authorized system actors use this endpoint for
 * adjustments, bulk events, or resolving customer disputes.
 *
 * Business restrictions (e.g., no duplicate accrual for same order/coupon,
 * minimum/maximum per-event limits, negative amount checking per type) must be
 * enforced at the service/business logic tier. Created records are immutable
 * except where reversal is required by business rules. Privilege is restricted
 * to administrative roles and the audit log must record every use of this
 * creation endpoint for compliance integrity.
 *
 * @param props.connection
 * @param props.body Details for creating a new loyalty transaction event.
 * @path /aimall-backend/administrator/loyaltyTransactions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details for creating a new loyalty transaction event. */
    body: IAimallBackendLoyaltyTransaction.ICreate;
  };
  export type Body = IAimallBackendLoyaltyTransaction.ICreate;
  export type Response = IAimallBackendLoyaltyTransaction;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/loyaltyTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/loyaltyTransactions";
  export const random = (): IAimallBackendLoyaltyTransaction =>
    typia.random<IAimallBackendLoyaltyTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search for loyalty transactions with full filtering and pagination.
 *
 * This endpoint allows clients—typically admin panels or analytic dashboards—to
 * search and filter the contents of the aimall_backend_loyalty_transactions
 * table using advanced query parameters provided in the request body. Supported
 * filters may include customer ID, related order or coupon, transaction type
 * (accrual, redemption, expiration, reversal), time period, and minimum/maximum
 * amount criteria.
 *
 * The response contains a paginated list of matching loyalty transactions, each
 * including complete atomic detail for compliance and analytic purposes.
 * Security rules require that only administrators or users with explicit
 * permission can access search results across customers. Audit controls and
 * result masking may be applied for sensitive fields where needed.
 *
 * This operation enables the main reporting and customer support tools required
 * by the Discount & Loyalty System, supporting regulatory and business audit
 * needs.
 *
 * @param props.connection
 * @param props.body Search criteria and filter parameters for loyalty
 *   transaction query, including customer, type, time range, etc.
 * @path /aimall-backend/administrator/loyaltyTransactions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and filter parameters for loyalty transaction query,
     * including customer, type, time range, etc.
     */
    body: IAimallBackendLoyaltyTransaction.IRequest;
  };
  export type Body = IAimallBackendLoyaltyTransaction.IRequest;
  export type Response = IPageIAimallBackendLoyaltyTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/loyaltyTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/loyaltyTransactions";
  export const random = (): IPageIAimallBackendLoyaltyTransaction =>
    typia.random<IPageIAimallBackendLoyaltyTransaction>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve one detailed loyalty transaction (by primary key).
 *
 * Retrieves all information about a single loyalty transaction, given its
 * unique identifier (primary key). The result exposes full event details
 * including amount, transaction type, customer, related order and coupon IDs,
 * created timestamp, and factor (expired_at if applicable). This supports
 * regulatory, audit, dispute, and customer-service investigatory flows.
 *
 * Authorization is critical—admins may view any record; customers may only view
 * their own. The endpoint must enforce privacy controls as per privacy/PII
 * guidance. Not found or unauthorized access must yield standard API error
 * responses and audit logs where required.
 *
 * @param props.connection
 * @param props.loyaltyTransactionId UUID of the loyalty transaction record to
 *   retrieve.
 * @path /aimall-backend/administrator/loyaltyTransactions/:loyaltyTransactionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the loyalty transaction record to retrieve. */
    loyaltyTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendLoyaltyTransaction;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/loyaltyTransactions/:loyaltyTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/loyaltyTransactions/${encodeURIComponent(props.loyaltyTransactionId ?? "null")}`;
  export const random = (): IAimallBackendLoyaltyTransaction =>
    typia.random<IAimallBackendLoyaltyTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("loyaltyTransactionId")(() =>
        typia.assert(props.loyaltyTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update allowed (non-relational) fields on a loyalty transaction.
 *
 * Performs an in-place update on certain updatable fields (e.g., description,
 * type, expired_at, amount within policy) of a specific loyalty transaction
 * identified by its UUID. Enforced by compliance policy, only non-relational
 * fields may change; customer_id/order_id/coupon_id remain fixed for regulatory
 * and audit purposes. This operation is intended for administrative
 * corrections—such as reversal, description clarification, or corrected amount
 * type.
 *
 * Business logic must tightly restrict when and which transactions may be
 * changed, including time windows, compliance review workflow, and proper audit
 * logging, as required by the Discount & Loyalty System. Unauthorized attempts
 * must result in access denied and be logged for investigation.
 *
 * @param props.connection
 * @param props.loyaltyTransactionId UUID of the transaction to update.
 * @param props.body Fields to update on the loyalty transaction record.
 * @path /aimall-backend/administrator/loyaltyTransactions/:loyaltyTransactionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the transaction to update. */
    loyaltyTransactionId: string & tags.Format<"uuid">;

    /** Fields to update on the loyalty transaction record. */
    body: IAimallBackendLoyaltyTransaction.IUpdate;
  };
  export type Body = IAimallBackendLoyaltyTransaction.IUpdate;
  export type Response = IAimallBackendLoyaltyTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/loyaltyTransactions/:loyaltyTransactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/loyaltyTransactions/${encodeURIComponent(props.loyaltyTransactionId ?? "null")}`;
  export const random = (): IAimallBackendLoyaltyTransaction =>
    typia.random<IAimallBackendLoyaltyTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("loyaltyTransactionId")(() =>
        typia.assert(props.loyaltyTransactionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specified loyalty transaction (irreversible).
 *
 * Removes the specified loyalty transaction from the
 * aimall_backend_loyalty_transactions table. A hard delete (no soft
 * delete/archival field available in schema), this action must only be used for
 * correcting severe audit errors or compliance demands; all operations must be
 * strictly restricted and granted only to the highest privileged users.
 *
 * This operation can result in a gap audit trail; as such, any deletion must be
 * immediately logged in external immutable audit logs, and a multi-admin review
 * process is recommended before proceeding. Attempts to delete must be denied
 * for unauthorized users, and any dependent records must handle missing
 * transaction gracefully.
 *
 * @param props.connection
 * @param props.loyaltyTransactionId UUID of the transaction to delete.
 * @path /aimall-backend/administrator/loyaltyTransactions/:loyaltyTransactionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the transaction to delete. */
    loyaltyTransactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/loyaltyTransactions/:loyaltyTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/loyaltyTransactions/${encodeURIComponent(props.loyaltyTransactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("loyaltyTransactionId")(() =>
        typia.assert(props.loyaltyTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

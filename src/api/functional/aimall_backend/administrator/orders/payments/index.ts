import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendPayment } from "../../../../../structures/IPageIAimallBackendPayment";
import { IAimallBackendPayment } from "../../../../../structures/IAimallBackendPayment";

/**
 * Retrieve a list of payment transactions for the specified order from
 * aimall_backend_payments.
 *
 * Retrieve a list of all payment transactions made for a specific order from
 * the aimall_backend_payments table. This operation enables the querying of
 * multiple types of payment events tied to a single order, reflecting the
 * real-world scenario where an order may be paid through several different
 * channels (e.g., credit card, coupon, points). By providing the orderId as a
 * path parameter, users can access all related payment records, which support
 * business audit, reporting, and reconciliation.
 *
 * Access is strictly enforced: only users with appropriate roles (the ordering
 * customer, involved seller, or platform administrator) are authorized to view
 * payment details, ensuring no leakage of transaction or PII data. This
 * endpoint is commonly paired with order retrieval and payment audit tools for
 * robust financial tracking.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose payments are being
 *   retrieved.
 * @path /aimall-backend/administrator/orders/:orderId/payments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose payments are being retrieved. */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendPayment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/orders/:orderId/payments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IPageIAimallBackendPayment =>
    typia.random<IPageIAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search and filter of payment transactions for a given order in
 * aimall_backend_payments.
 *
 * Search and filter payment transactions associated with a specific order using
 * advanced query parameters. This API allows administrators and financial
 * auditors to query the aimall_backend_payments table for all transactions
 * related to an order, with filter capabilities such as payment method type,
 * payment amount range, currency, or paid_at timestamp.
 *
 * Security is critical: only order owners, sellers involved with the order, or
 * platform administrators should be able to access and search payment
 * transaction data. This endpoint supports audit scenarios and financial
 * investigation workflows, and is particularly important for resolving disputes
 * or confirming proper handling of split payments and coupons.
 *
 * Filtering by payment properties in the request body improves efficiency and
 * accuracy for operational finance staff.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order that the payments are
 *   linked to.
 * @param props.body Search criteria for filtering order payment transactions,
 *   supporting pagination and advanced filtering.
 * @path /aimall-backend/administrator/orders/:orderId/payments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Unique identifier of the order that the payments are linked to. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search criteria for filtering order payment transactions, supporting
     * pagination and advanced filtering.
     */
    body: IAimallBackendPayment.IRequest;
  };
  export type Body = IAimallBackendPayment.IRequest;
  export type Response = IPageIAimallBackendPayment;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IPageIAimallBackendPayment =>
    typia.random<IPageIAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific payment for an order from
 * aimall_backend_payments.
 *
 * Fetch the details of a specific payment tied to an order from the
 * aimall_backend_payments table. This operation supports scenarios including
 * detailed customer receipts, refund request validation, and financial audit
 * investigations. The endpoint requires both orderId and paymentId via path,
 * ensuring linkage and data integrity.
 *
 * Appropriate access control is enforced to prohibit unauthorized viewing of
 * sensitive payment details. Combined with the payment list endpoints, this API
 * forms the basis of robust financial transparency and customer service
 * functions.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order.
 * @param props.paymentId Unique identifier of the specific payment transaction
 *   to retrieve.
 * @path /aimall-backend/administrator/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific payment transaction to retrieve. */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendPayment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IAimallBackendPayment =>
    typia.random<IAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update information of a payment transaction for an order in
 * aimall_backend_payments.
 *
 * Update a specific payment transaction associated with an order. Typical
 * update scenarios include adjusting the transaction identifier, correcting
 * payment channel metadata, or marking a payment as reconciled in the finance
 * workflow. The target order and payment are specified by orderId and paymentId
 * parameters. Only privileged users may invoke this endpoint, ensuring no
 * unauthorized manipulation of payment records.
 *
 * The request body provides updated payment info. The system performs
 * validations to prevent changes to immutable financial properties such as
 * amount or currency after payment confirmation unless authorized by admin. A
 * successful operation returns the updated payment object.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order.
 * @param props.paymentId Unique identifier of the payment transaction to
 *   update.
 * @param props.body Details for updating an existing payment transaction.
 * @path /aimall-backend/administrator/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the payment transaction to update. */
    paymentId: string & tags.Format<"uuid">;

    /** Details for updating an existing payment transaction. */
    body: IAimallBackendPayment.IUpdate;
  };
  export type Body = IAimallBackendPayment.IUpdate;
  export type Response = IAimallBackendPayment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IAimallBackendPayment =>
    typia.random<IAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (hard) a payment transaction from an order in aimall_backend_payments.
 *
 * Permanently delete a payment transaction record from an order in the system.
 * Since there is no 'deleted_at' or soft-delete field in the
 * aimall_backend_payments table, this action results in a hard delete. The
 * orderId and paymentId path parameters must both be supplied, fully
 * identifying the payment transaction to remove.
 *
 * Strict access control is applied, and typically only platform administrators
 * may invoke this endpoint. Deletion is blocked for payments that have already
 * been reconciled in a financial close, supporting compliance and audit
 * requirements. No content is returned on success.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose payment transaction
 *   is being deleted.
 * @param props.paymentId Unique identifier of the payment transaction to
 *   delete.
 * @path /aimall-backend/administrator/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the order whose payment transaction is being
     * deleted.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the payment transaction to delete. */
    paymentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendAttachment } from "../../../../../structures/IPageIAimallBackendAttachment";
import { IAimallBackendAttachment } from "../../../../../structures/IAimallBackendAttachment";

/**
 * Get all attachments for a postId (Community, Attachments).
 *
 * This endpoint retrieves all attachments for a community post by postId,
 * referencing the aimall_backend_attachments schema. Results include media/file
 * info tied to the specified post, which may be used by UIs to render galleries
 * or download links.
 *
 * Pagination is recommended if there are many attachments. Only attachments for
 * the given post are returned. Authorization may be scoped by the viewer’s
 * permissions; some file/media types may be restricted based on post or user
 * attributes. On error, appropriate messages are returned.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the post holding attachments.
 * @path /aimall-backend/administrator/posts/:postId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the post holding attachments. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendAttachment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/posts/:postId/attachments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/attachments`;
  export const random = (): IPageIAimallBackendAttachment =>
    typia.random<IPageIAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create/upload an attachment to a post (Community, Attachments).
 *
 * This endpoint lets a user add a new attachment to a post. The request body
 * follows the Community Attachments creation DTO: must specify the required
 * file URI, type, size, and optionally a display/caption/association.
 *
 * Authorization is required (author, moderator, or admin). On successful
 * creation, returns the attachment entity (with file URI and metadata). Errors
 * for invalid input, quota exceeded, or unauthorized operation are handled per
 * business policy.
 *
 * @param props.connection
 * @param props.postId ID of the parent post for the new attachment.
 * @param props.body Attachment creation DTO, following the Community
 *   Attachments schema.
 * @path /aimall-backend/administrator/posts/:postId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the parent post for the new attachment. */
    postId: string & tags.Format<"uuid">;

    /** Attachment creation DTO, following the Community Attachments schema. */
    body: IAimallBackendAttachment.ICreate;
  };
  export type Body = IAimallBackendAttachment.ICreate;
  export type Response = IAimallBackendAttachment;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/posts/:postId/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/attachments`;
  export const random = (): IAimallBackendAttachment =>
    typia.random<IAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search/filter for attachments by postId (Community, Attachments).
 *
 * This endpoint allows clients to perform advanced searches among a post’s
 * attachments via a search/filter payload (e.g., file size, type, created_at
 * range). It is useful for post authors, moderators, or admins to manage large
 * post galleries efficiently.
 *
 * Authorization restricts this view to permitted users, and results are
 * paginated. Error handling covers invalid search criteria or insufficient
 * permissions.
 *
 * @param props.connection
 * @param props.postId ID of the parent post holding attachments.
 * @param props.body Filter/search and pagination DTO for attachments.
 * @path /aimall-backend/administrator/posts/:postId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** ID of the parent post holding attachments. */
    postId: string & tags.Format<"uuid">;

    /** Filter/search and pagination DTO for attachments. */
    body: IAimallBackendAttachment.IRequest;
  };
  export type Body = IAimallBackendAttachment.IRequest;
  export type Response = IPageIAimallBackendAttachment;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/posts/:postId/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/attachments`;
  export const random = (): IPageIAimallBackendAttachment =>
    typia.random<IPageIAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single attachment by attachmentId for a post (Community, Attachments).
 *
 * This endpoint returns a single attachment’s metadata and reference fields as
 * normalized in aimall_backend_attachments (postId + attachmentId scoping).
 * Used for in-depth file information retrieval, preview popups, or validating
 * ownership/permissions.
 *
 * Returns all file fields (file_uri, type, size, created_at, etc). On errors
 * (not found or forbidden), appropriate feedback is provided to API consumers.
 *
 * @param props.connection
 * @param props.postId ID of the post holding the attachment.
 * @param props.attachmentId ID of the attachment to retrieve.
 * @path /aimall-backend/administrator/posts/:postId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the post holding the attachment. */
    postId: string & tags.Format<"uuid">;

    /** ID of the attachment to retrieve. */
    attachmentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendAttachment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/posts/:postId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IAimallBackendAttachment =>
    typia.random<IAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing attachment for a post (Community, Attachments).
 *
 * This endpoint enables modification of a post's attachment: e.g., to revise
 * link, caption, or metadata as defined by aimall_backend_attachments. Only
 * authorized users (original uploader, moderator, or admin) may edit files and
 * metadata.
 *
 * Data to update is in the request body following the Community Attachments
 * update schema. Errors include not found, forbidden, or invalid input. Success
 * returns the updated attachment entity.
 *
 * @param props.connection
 * @param props.postId ID of the post holding the attachment.
 * @param props.attachmentId ID of the attachment being updated.
 * @param props.body Update payload for the specified attachment, matching the
 *   Community Attachments update schema.
 * @path /aimall-backend/administrator/posts/:postId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the post holding the attachment. */
    postId: string & tags.Format<"uuid">;

    /** ID of the attachment being updated. */
    attachmentId: string & tags.Format<"uuid">;

    /**
     * Update payload for the specified attachment, matching the Community
     * Attachments update schema.
     */
    body: IAimallBackendAttachment.IUpdate;
  };
  export type Body = IAimallBackendAttachment.IUpdate;
  export type Response = IAimallBackendAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/posts/:postId/attachments/:attachmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IAimallBackendAttachment =>
    typia.random<IAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an attachment on a post (hard delete, Community, Attachments).
 *
 * This endpoint removes an attachment from a post by attachmentId (and postId
 * scope). Since there is no deleted_at soft-delete field on
 * aimall_backend_attachments, this is a hard delete: the row is removed
 * permanently and the file is dereferenced. Only authorized users may perform
 * this action (uploader, moderator, admin).
 *
 * Errors include not found, access denied, or in-use constraints. On success,
 * attachment is deleted and no longer available via listing or detail
 * endpoints.
 *
 * @param props.connection
 * @param props.postId ID of the parent post holding the attachment.
 * @param props.attachmentId ID of the attachment to delete.
 * @path /aimall-backend/administrator/posts/:postId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the parent post holding the attachment. */
    postId: string & tags.Format<"uuid">;

    /** ID of the attachment to delete. */
    attachmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/posts/:postId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

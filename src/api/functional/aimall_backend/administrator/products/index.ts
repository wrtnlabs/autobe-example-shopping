import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendProduct } from "../../../../structures/IAimallBackendProduct";
export * as productOptions from "./productOptions";
export * as productBundles from "./productBundles";
export * as skus from "./skus";
export * as channelAssignments from "./channelAssignments";

/**
 * Create a new product in the aimall_backend_products catalog.
 *
 * Create a new product record in the system catalog, directly corresponding to
 * the aimall_backend_products table. Input structure aligns with the schema's
 * requirements for product insertion, demanding fields such as category,
 * seller, title, status, and optional description or thumbnail.
 *
 * Product creation is restricted to authenticated users with appropriate
 * privileges, typically sellers (for their own products) or administrators (for
 * marketplace management). The endpoint enforces validation of foreign keys,
 * uniqueness of seller/title pairs, and proper data typing for all attributes.
 * Security policies require all call attempts to be properly authenticated and
 * authorized based on the actor's role.
 *
 * On creation, the system populates automatic fields such as product ID,
 * created_at, and updated_at. Failure modes include invalid data, missing
 * required fields, unauthorized access, or foreign key violations, with
 * descriptive error feedback.
 *
 * @param props.connection
 * @param props.body Required product fields for product creation as per catalog
 *   schema.
 * @path /aimall-backend/administrator/products
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Required product fields for product creation as per catalog schema. */
    body: IAimallBackendProduct.ICreate;
  };
  export type Body = IAimallBackendProduct.ICreate;
  export type Response = IAimallBackendProduct;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/products";
  export const random = (): IAimallBackendProduct =>
    typia.random<IAimallBackendProduct>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product in the aimall_backend_products catalog by unique
 * productId.
 *
 * Update one product for which the actor holds update privileges (ownership or
 * administrator) in the aimall_backend_products table. The request body follows
 * the catalog product update DTO, accepting only permissible modifications
 * (such as title, description, category, status, thumbnail). Foreign key
 * relationships are validated for integrity and data correctness.
 *
 * This operation is restricted to sellers (for their own products) and
 * administrators, leveraging role-based access and additional business rules.
 * All changes must pass validation; improper attempts (such as duplicate titles
 * for the same seller or invalid foreign key references) are rejected. The
 * endpoint updates updated_at field to the current timestamp and returns the
 * complete, updated product entity.
 *
 * Concurrency and error scenarios, including lost updates or references to
 * deleted entities, return structured API error responses. This endpoint does
 * not allow public or customer-initiated modifications; only privileged actors
 * may update product records.
 *
 * @param props.connection
 * @param props.productId UUID corresponding to the targeted product in
 *   aimall_backend_products.
 * @param props.body Update information and fields for a product update
 *   operation.
 * @path /aimall-backend/administrator/products/:productId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * UUID corresponding to the targeted product in
     * aimall_backend_products.
     */
    productId: string & tags.Format<"uuid">;

    /** Update information and fields for a product update operation. */
    body: IAimallBackendProduct.IUpdate;
  };
  export type Body = IAimallBackendProduct.IUpdate;
  export type Response = IAimallBackendProduct;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/products/:productId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IAimallBackendProduct =>
    typia.random<IAimallBackendProduct>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product by unique productId as a hard delete from
 * aimall_backend_products.
 *
 * Hard delete a product entity from the aimall_backend_products table, by its
 * UUID. The operation does not support soft deletion, as there is no such field
 * on the schema; the row is removed completely. This endpoint is restricted to
 * sellers for their own products and administrators with the appropriate
 * privileges, and checks for dependent/linked data prior to allowing delete.
 *
 * Unauthorized requests or attempts to remove protected or still-referenced
 * products (such as those part of historical orders) are denied with
 * appropriate error messaging. On success, the product record and its direct
 * dependencies are deleted. This action is non-reversible, and error scenarios
 * are reported for all constraint or permission issues.
 *
 * For audit and security, all delete attempts are logged, and the API produces
 * no content in the response on successful operation. Only privileged roles can
 * call this endpoint; customers have no access.
 *
 * @param props.connection
 * @param props.productId UUID of the product to be deleted from the catalog.
 * @path /aimall-backend/administrator/products/:productId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the product to be deleted from the catalog. */
    productId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

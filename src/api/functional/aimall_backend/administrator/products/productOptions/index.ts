import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendProductOption } from "../../../../../structures/IAimallBackendProductOption";

/**
 * Create a new product option attached to a product in
 * aimall_backend_product_options.
 *
 * Create a new product option for a given product, inserting a row in
 * aimall_backend_product_options. The input must provide all required option
 * fields as per the product option create DTO, including name, value, and the
 * referenced productId.
 *
 * Only sellers with ownership rights over the product or administrators with
 * sufficient privilege may call this endpoint, reflecting the critical nature
 * of variant management. Detects and rejects attempts at duplicate or invalid
 * option creation (e.g., creating the same color/size twice for one product).
 * The endpoint ensures the new option is uniquely mapped to the referenced
 * product. On success, the new option record is returned, with all
 * fields—including the system-generated UUID—set.
 *
 * @param props.connection
 * @param props.productId UUID of the product for which the product option is
 *   being created.
 * @param props.body Required fields for new product option creation.
 * @path /aimall-backend/administrator/products/:productId/productOptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the product for which the product option is being created. */
    productId: string & tags.Format<"uuid">;

    /** Required fields for new product option creation. */
    body: IAimallBackendProductOption.ICreate;
  };
  export type Body = IAimallBackendProductOption.ICreate;
  export type Response = IAimallBackendProductOption;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/products/:productId/productOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/products/${encodeURIComponent(props.productId ?? "null")}/productOptions`;
  export const random = (): IAimallBackendProductOption =>
    typia.random<IAimallBackendProductOption>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a product option for a specific product
 * (aimall_backend_product_options).
 *
 * Update an existing product option record by composite reference to productId
 * and productOptionId. Allows sellers or administrators to update atomic option
 * fields—such as name or value—for variants associated with their own
 * products.
 *
 * Access is permission-restricted; integrity/audit checks ensure the option
 * belongs to the product and that new values do not violate data consistency
 * (e.g., no duplicate variants, all references are valid). On update, the
 * endpoint returns the fully updated aimall_backend_product_options entity.
 * Improper updates—such as attempting to reassign an option to another product,
 * or creating duplicate name/value pairs—are denied with specific error
 * feedback.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product which owns the product
 *   option.
 * @param props.productOptionId UUID of the product option being updated.
 * @param props.body Update DTO for the product option record.
 * @path /aimall-backend/administrator/products/:productId/productOptions/:productOptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent product which owns the product option. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the product option being updated. */
    productOptionId: string & tags.Format<"uuid">;

    /** Update DTO for the product option record. */
    body: IAimallBackendProductOption.IUpdate;
  };
  export type Body = IAimallBackendProductOption.IUpdate;
  export type Response = IAimallBackendProductOption;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/products/:productId/productOptions/:productOptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/products/${encodeURIComponent(props.productId ?? "null")}/productOptions/${encodeURIComponent(props.productOptionId ?? "null")}`;
  export const random = (): IAimallBackendProductOption =>
    typia.random<IAimallBackendProductOption>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("productOptionId")(() =>
        typia.assert(props.productOptionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a product option for a specific product (hard delete;
 * aimall_backend_product_options).
 *
 * Hard delete a product option from aimall_backend_product_options, identified
 * by both product and product option UUIDs. Option records are removed entirely
 * since the schema does not support soft deletion. This endpoint is accessible
 * only to sellers owning the product or to administrators.
 *
 * Only product options directly owned by the target product can be deleted, and
 * all dependency checks are enforced (such as referenced SKUs or order items).
 * On successful deletion, the record is removed and the endpoint returns no
 * content. Unauthorized, non-existent, or dependency-linked options cannot be
 * removed, and such attempts produce error responses.
 *
 * @param props.connection
 * @param props.productId UUID of the product to which the deleted product
 *   option belongs.
 * @param props.productOptionId UUID of the product option being deleted.
 * @path /aimall-backend/administrator/products/:productId/productOptions/:productOptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the product to which the deleted product option belongs. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the product option being deleted. */
    productOptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/products/:productId/productOptions/:productOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/products/${encodeURIComponent(props.productId ?? "null")}/productOptions/${encodeURIComponent(props.productOptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("productOptionId")(() =>
        typia.assert(props.productOptionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

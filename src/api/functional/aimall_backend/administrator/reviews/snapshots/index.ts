import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendSnapshot } from "../../../../../structures/IPageIAimallBackendSnapshot";
import { IAimallBackendSnapshot } from "../../../../../structures/IAimallBackendSnapshot";

/**
 * List all snapshots attached to a specific product review
 * (aimall_backend_snapshots).
 *
 * List all snapshots (user moments/photos) associated with a specific product
 * review entity. Response is paginated and contains all fields mapped from
 * aimall_backend_snapshots, filtered to match the supplied review.
 *
 * Permissions: Only authenticated users may access. Results are
 * visibility-scoped, so private or restricted snapshots are filtered according
 * to business logic and user role. Falls back to empty page if the review or
 * its snapshots are missing.
 *
 * @param props.connection
 * @param props.reviewId The unique identifier of the review whose snapshots are
 *   being queried.
 * @path /aimall-backend/administrator/reviews/:reviewId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the review whose snapshots are being
     * queried.
     */
    reviewId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/reviews/:reviewId/snapshots",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/snapshots`;
  export const random = (): IPageIAimallBackendSnapshot =>
    typia.random<IPageIAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new media snapshot for a product review (aimall_backend_snapshots).
 *
 * Create/upload a new snapshot (user photo, media) for a specific product
 * review. Accepts all required and optional fields permitted by
 * aimall_backend_snapshots, including review linkage, media URI, and optional
 * caption.
 *
 * Permissions: Only authenticated users can add snapshots to reviews. Audit and
 * moderation processes are triggered. On success, returns the complete entity
 * as persisted.
 *
 * @param props.connection
 * @param props.reviewId Target review's unique identifier for new snapshot
 *   linkage.
 * @param props.body Fields required for creating a new media snapshot for a
 *   review.
 * @path /aimall-backend/administrator/reviews/:reviewId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target review's unique identifier for new snapshot linkage. */
    reviewId: string & tags.Format<"uuid">;

    /** Fields required for creating a new media snapshot for a review. */
    body: IAimallBackendSnapshot.ICreate;
  };
  export type Body = IAimallBackendSnapshot.ICreate;
  export type Response = IAimallBackendSnapshot;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/reviews/:reviewId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/snapshots`;
  export const random = (): IAimallBackendSnapshot =>
    typia.random<IAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search and filter of snapshots for a product review
 * (aimall_backend_snapshots).
 *
 * Advanced, filterable search API for user snapshots associated with a review.
 * Supports filtering by format, user, or timeline for flexible review moment
 * display management.
 *
 * Business rules per aimall_backend_snapshots are applied and schema-based
 * filter parameters are available in the request model. Result set is always
 * paginated and access-checked for permissions.
 *
 * @param props.connection
 * @param props.reviewId Target review's unique identifier.
 * @param props.body Snapshot search and filter request for review-linked media.
 * @path /aimall-backend/administrator/reviews/:reviewId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Target review's unique identifier. */
    reviewId: string & tags.Format<"uuid">;

    /** Snapshot search and filter request for review-linked media. */
    body: IAimallBackendSnapshot.IRequest;
  };
  export type Body = IAimallBackendSnapshot.IRequest;
  export type Response = IPageIAimallBackendSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/reviews/:reviewId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/snapshots`;
  export const random = (): IPageIAimallBackendSnapshot =>
    typia.random<IPageIAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a single snapshot attached to a review
 * (aimall_backend_snapshots).
 *
 * Return all fields of a single snapshot record, belonging to a specified
 * review. Validates foreign key relationship between review and snapshot.
 * Returns 404 if not found, adheres to review-specific permissions and snapshot
 * scoping, as modeled in the schema.
 *
 * Authorization ensures only permitted users access the data, with visibility
 * controlled as per roles and business logic.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier for the review parent entity.
 * @param props.snapshotId The unique identifier of the snapshot record being
 *   queried.
 * @path /aimall-backend/administrator/reviews/:reviewId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the review parent entity. */
    reviewId: string & tags.Format<"uuid">;

    /** The unique identifier of the snapshot record being queried. */
    snapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/reviews/:reviewId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IAimallBackendSnapshot =>
    typia.random<IAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing snapshot attached to a product review
 * (aimall_backend_snapshots).
 *
 * Update fields of a snapshot attached to a specified product review. Fields
 * updateable per underlying schema (e.g., media URI, caption).
 *
 * Permission checks enforce that only the snapshot owner or administrators can
 * perform updates. If reviewId or snapshotId is invalid, returns 404. Result is
 * the complete, updated snapshot entity.
 *
 * @param props.connection
 * @param props.reviewId Review's unique identifier.
 * @param props.snapshotId The unique identifier for the snapshot to be updated.
 * @param props.body Body containing snapshot fields that can be updated (e.g.,
 *   media URI, caption).
 * @path /aimall-backend/administrator/reviews/:reviewId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Review's unique identifier. */
    reviewId: string & tags.Format<"uuid">;

    /** The unique identifier for the snapshot to be updated. */
    snapshotId: string & tags.Format<"uuid">;

    /**
     * Body containing snapshot fields that can be updated (e.g., media URI,
     * caption).
     */
    body: IAimallBackendSnapshot.IUpdate;
  };
  export type Body = IAimallBackendSnapshot.IUpdate;
  export type Response = IAimallBackendSnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/reviews/:reviewId/snapshots/:snapshotId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IAimallBackendSnapshot =>
    typia.random<IAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing snapshot attached to a product review
 * (aimall_backend_snapshots).
 *
 * Delete or archive a snapshot record linked to a review, using reviewId and
 * snapshotId for record identification. Checks permissions and ownership before
 * proceeding, per schema's business rules.
 *
 * Implements soft delete if defined in model; else, performs hard deletion from
 * aimall_backend_snapshots. Only authorized users/permissions may perform this
 * action. A 404 is returned if the snapshot doesn't exist.
 *
 * @param props.connection
 * @param props.reviewId Review's unique identifier.
 * @param props.snapshotId Snapshot's unique identifier for deletion.
 * @path /aimall-backend/administrator/reviews/:reviewId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Review's unique identifier. */
    reviewId: string & tags.Format<"uuid">;

    /** Snapshot's unique identifier for deletion. */
    snapshotId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/reviews/:reviewId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/reviews/${encodeURIComponent(props.reviewId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

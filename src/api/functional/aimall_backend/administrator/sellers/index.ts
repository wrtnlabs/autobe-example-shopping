import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendSeller } from "../../../../structures/IPageIAimallBackendSeller";
import { IAimallBackendSeller } from "../../../../structures/IAimallBackendSeller";

/**
 * Fetch all sellers (aimall_backend_sellers).
 *
 * Fetch all registered sellers from the aimall_backend_sellers table. Each
 * seller entry includes business_name, email, contact_phone, status, and audit
 * timestamps.
 *
 * This is typically used by administrators to oversee merchant onboarding and
 * by business intelligence tools. Permission checks enable different result
 * scopes (all sellers for admin; own record for seller).
 *
 * Results may be returned as a paginated list. Errors cover unauthorized access
 * and internal errors.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/sellers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendSeller;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/sellers",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/sellers";
  export const random = (): IPageIAimallBackendSeller =>
    typia.random<IPageIAimallBackendSeller>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Register a new seller account (aimall_backend_sellers).
 *
 * Register a new seller and create their record in aimall_backend_sellers. The
 * payload must include all required business and contact data. Business rules
 * enforce data uniqueness constraints (e.g., no duplicate emails).
 *
 * Typical use-case: new merchant onboarding. Available to self-registering
 * merchants or authorized admin staff per policy. Created sellers are returned
 * in full detail as stored.
 *
 * Error cases: missing or invalid input, duplicate entry, or policy violation
 * on onboarding limits.
 *
 * @param props.connection
 * @param props.body Data for a new seller onboarding per
 *   IAimallBackendSeller.ICreate.
 * @path /aimall-backend/administrator/sellers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data for a new seller onboarding per IAimallBackendSeller.ICreate. */
    body: IAimallBackendSeller.ICreate;
  };
  export type Body = IAimallBackendSeller.ICreate;
  export type Response = IAimallBackendSeller;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/sellers";
  export const random = (): IAimallBackendSeller =>
    typia.random<IAimallBackendSeller>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter sellers with paging (aimall_backend_sellers).
 *
 * Search, filter, and paginate the list of sellers via aimall_backend_sellers.
 * Supports complex criteria such as business_name partial match, status
 * selection, or range queries for created_at.
 *
 * Available only to users with admin roles due to sensitive nature and data
 * visibility requirements. This endpoint supports management consoles and
 * reporting tools needing fine-grained control.
 *
 * Errors include invalid filter parameters, out-of-bound pagination, or
 * unauthorized access.
 *
 * @param props.connection
 * @param props.body Request with filter, sort, and paging for seller search.
 * @path /aimall-backend/administrator/sellers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Request with filter, sort, and paging for seller search. */
    body: IAimallBackendSeller.IRequest;
  };
  export type Body = IAimallBackendSeller.IRequest;
  export type Response = IPageIAimallBackendSeller;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/sellers";
  export const random = (): IPageIAimallBackendSeller =>
    typia.random<IPageIAimallBackendSeller>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a single seller record by sellerId (aimall_backend_sellers).
 *
 * Retrieve a specific seller's detailed information using their unique
 * sellerId. Returns all schema fields such as business_name, email,
 * contact_phone, status, created/updated timestamps.
 *
 * This endpoint is used by admins for merchant monitoring and by sellers to
 * fetch their own account record. Access is restricted by role: sellers can
 * access their accounts; admins can access any seller.
 *
 * Handles errors such as missing sellerId or insufficient permissions.
 *
 * @param props.connection
 * @param props.sellerId The unique identifier (UUID) for the seller to fetch.
 * @path /aimall-backend/administrator/sellers/:sellerId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) for the seller to fetch. */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendSeller;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IAimallBackendSeller =>
    typia.random<IAimallBackendSeller>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a seller's data (aimall_backend_sellers).
 *
 * Update the details of an existing seller. Supply the sellerId and update
 * fields to apply. This directly modifies aimall_backend_sellers fields for the
 * record.
 *
 * Role constraints: only admin may edit other sellers; self-edit requires owner
 * match. Changes are moderated for compliance if necessary.
 *
 * Error responses for non-existent sellerId or access violation are possible.
 *
 * @param props.connection
 * @param props.sellerId The unique identifier (UUID) of the seller to update.
 * @param props.body Fields and values to update for the target seller.
 * @path /aimall-backend/administrator/sellers/:sellerId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the seller to update. */
    sellerId: string & tags.Format<"uuid">;

    /** Fields and values to update for the target seller. */
    body: IAimallBackendSeller.IUpdate;
  };
  export type Body = IAimallBackendSeller.IUpdate;
  export type Response = IAimallBackendSeller;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/sellers/:sellerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IAimallBackendSeller =>
    typia.random<IAimallBackendSeller>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a seller's account (aimall_backend_sellers).
 *
 * Delete the seller's account by sellerId. This operation removes the row from
 * aimall_backend_sellers as a hard delete (no soft delete field in the
 * schema).
 *
 * Only admin role may perform deletion to ensure compliance and auditability.
 * Related data (products, orders) must be managed to preserve integrity
 * according to business rules.
 *
 * Errors can arise from missing sellerId or policy violations (e.g., attempted
 * unauthorized deletion).
 *
 * @param props.connection
 * @param props.sellerId The unique identifier (UUID) of the seller account to
 *   delete.
 * @path /aimall-backend/administrator/sellers/:sellerId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the seller account to delete. */
    sellerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

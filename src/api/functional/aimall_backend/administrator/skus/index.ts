import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendSku } from "../../../../structures/IPageIAimallBackendSku";
import { IAimallBackendSku } from "../../../../structures/IAimallBackendSku";
export * as inventorySnapshots from "./inventorySnapshots";

/**
 * Get a paginated list of product SKUs from the catalog.
 *
 * Retrieve a paginated list of SKUs from the SKU master table. This endpoint
 * enables administrators and product managers to browse available stock keeping
 * units, each representing a unique combination of product and options as
 * defined in the database schema.
 *
 * Security considerations require that only authorized users with administrator
 * or catalog management roles can access this list. Data returned includes all
 * atomic SKU-level information as dictated by the schema, permitting context
 * for inventory actions, listing management, and reporting.
 *
 * This operation, while returning raw SKU master data, can be integrated with
 * or extended for search/filtering by utilizing the PATCH operation on the same
 * path. Error handling involves pagination controls and data access permission
 * checks.
 *
 * @param props.connection
 * @path /aimall-backend/administrator/skus
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendSku;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/skus",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/skus";
  export const random = (): IPageIAimallBackendSku =>
    typia.random<IPageIAimallBackendSku>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Create a new SKU for product catalog expansion.
 *
 * Create a new SKU master record by submitting a valid SKU creation object.
 * Operation requires all atomic and relationship fields as mandated by the
 * schema, including product association and SKU code. Only administrators or
 * catalog managers with the correct privileges can use this endpoint.
 *
 * Upon validation of uniqueness (SKU code) and integrity constraints, the SKU
 * is saved and returned in detail. This supports catalog expansion, variant
 * onboarding, and tight coupling with inventory and option data. Error
 * responses handle all validation and referential errors.
 *
 * @param props.connection
 * @param props.body New SKU creation object with all required fields.
 * @path /aimall-backend/administrator/skus
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** New SKU creation object with all required fields. */
    body: IAimallBackendSku.ICreate;
  };
  export type Body = IAimallBackendSku.ICreate;
  export type Response = IAimallBackendSku;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/skus",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/skus";
  export const random = (): IAimallBackendSku =>
    typia.random<IAimallBackendSku>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and filter SKUs with advanced criteria.
 *
 * Perform a paginated and filterable search on the SKU master table. Request
 * body allows specifying complex search fields such as product association, SKU
 * code, or other SKU metadata, and returns filtered results for downstream
 * product management tasks.
 *
 * Only authorized administrator users may use this endpoint due to the
 * sensitive nature of catalog data. The request structure aligns with advanced
 * search needs, reflecting the database schema's atomic fields and relationship
 * integrity.
 *
 * This operation complements the GET /skus endpoint and is frequently used in
 * dashboards or analytics tools where precise SKU lists are required. Error
 * handling covers body schema validation and permission enforcement.
 *
 * @param props.connection
 * @param props.body Advanced search criteria, filters, and pagination
 *   parameters for SKUs.
 * @path /aimall-backend/administrator/skus
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Advanced search criteria, filters, and pagination parameters for
     * SKUs.
     */
    body: IAimallBackendSku.IRequest;
  };
  export type Body = IAimallBackendSku.IRequest;
  export type Response = IPageIAimallBackendSku;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/skus",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/administrator/skus";
  export const random = (): IPageIAimallBackendSku =>
    typia.random<IPageIAimallBackendSku>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a specific SKU by its unique SKU identifier.
 *
 * Get details of a single SKU, specified by its unique SKU ID in the path
 * parameter. The result includes all atomic, schema-defined fields for the SKU.
 * This operation is crucial for reviewing, editing, and tracking SKU-level data
 * and is used in product management UIs.
 *
 * Access is restricted to administrator and catalog managers to ensure catalog
 * integrity. The endpoint bridges to related product and option data for
 * complete context, as needed by the application layer. Error responses include
 * not found, permission denied, or parameter validation issues.
 *
 * @param props.connection
 * @param props.skuId The unique identifier of the SKU to retrieve.
 * @path /aimall-backend/administrator/skus/:skuId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the SKU to retrieve. */
    skuId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendSku;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/skus/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IAimallBackendSku =>
    typia.random<IAimallBackendSku>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing SKU in the catalog.
 *
 * Update the details of an existing SKU specified by its unique identifier.
 * Input body must conform to the update DTO reflecting the underlying schema's
 * atomic SKU fields. Used by authorized administrators or product managers
 * only.
 *
 * Typical use cases include correcting SKU codes, reassigning SKUs to products,
 * or aligning SKU definitions after product option updates. All changes are
 * validated for referential and uniqueness constraints. Comprehensive auditing
 * is associated with this operation. Errors include constraint violation,
 * unauthorized access, or resource not found.
 *
 * @param props.connection
 * @param props.skuId The unique identifier of the SKU to update.
 * @param props.body Updated SKU object for the specified SKU.
 * @path /aimall-backend/administrator/skus/:skuId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the SKU to update. */
    skuId: string & tags.Format<"uuid">;

    /** Updated SKU object for the specified SKU. */
    body: IAimallBackendSku.IUpdate;
  };
  export type Body = IAimallBackendSku.IUpdate;
  export type Response = IAimallBackendSku;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/skus/:skuId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): IAimallBackendSku =>
    typia.random<IAimallBackendSku>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a SKU from the product catalog.
 *
 * Delete a SKU entity by its unique identifier. As there is no soft delete
 * field in the 'aimall_backend_skus' schema, this is a hard delete operation.
 * Permissions are limited to catalog administrators, and the operation enforces
 * referential integrity to prevent orphaned inventory/option references.
 *
 * On success, the SKU is removed. Errors occur in the case of missing SKU,
 * referential integrity violation, or unauthorized access. Audit logging is
 * recommended for compliance.
 *
 * @param props.connection
 * @param props.skuId The unique identifier of the SKU to delete.
 * @path /aimall-backend/administrator/skus/:skuId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the SKU to delete. */
    skuId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/skus/:skuId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

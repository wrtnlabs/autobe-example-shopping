import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendInventorySnapshot } from "../../../../../structures/IPageIAimallBackendInventorySnapshot";
import { IAimallBackendInventorySnapshot } from "../../../../../structures/IAimallBackendInventorySnapshot";

/**
 * Fetch all inventory snapshots for a specific SKU.
 *
 * List all inventory change snapshot records for a given SKU, identified by its
 * unique ID. This operation supports in-depth review of inventory history, such
 * as restocks, sales, or adjustments.
 *
 * Access is limited to administrator users due to the sensitive nature of
 * inventory and operational histories. Field validation is applied to ensure
 * correct linkage. Output contains snapshot metadata for downstream analysis,
 * audit, and compliance.
 *
 * Errors may include SKU not found, insufficient permissions, or result set too
 * large (pagination recommended).
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the SKU for which to retrieve
 *   inventory snapshots.
 * @path /aimall-backend/administrator/skus/:skuId/inventorySnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the SKU for which to retrieve inventory
     * snapshots.
     */
    skuId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendInventorySnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/skus/:skuId/inventorySnapshots",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}/inventorySnapshots`;
  export const random = (): IPageIAimallBackendInventorySnapshot =>
    typia.random<IPageIAimallBackendInventorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create an inventory change snapshot for a SKU.
 *
 * Insert a new inventory change snapshot for a SKU. Must provide all
 * atomic/integrity fields as per the schema, including change type, quantity,
 * and actor. The SKU ID is enforced in the path.
 *
 * Performed by administrators or system processes for stock reconciliation,
 * auditing, or after major lifecycle events (sales, restocks). Validations
 * apply for field correctness, referential constraints, and privilege checks.
 * Result is the full persisted snapshot row. Errors occur for constraint
 * violations, unauthorized access, or missing SKU references.
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the SKU for which to create a
 *   snapshot.
 * @param props.body Inventory snapshot creation object with all required
 *   fields.
 * @path /aimall-backend/administrator/skus/:skuId/inventorySnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the SKU for which to create a snapshot. */
    skuId: string & tags.Format<"uuid">;

    /** Inventory snapshot creation object with all required fields. */
    body: IAimallBackendInventorySnapshot.ICreate;
  };
  export type Body = IAimallBackendInventorySnapshot.ICreate;
  export type Response = IAimallBackendInventorySnapshot;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/administrator/skus/:skuId/inventorySnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}/inventorySnapshots`;
  export const random = (): IAimallBackendInventorySnapshot =>
    typia.random<IAimallBackendInventorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced inventory snapshot search for a specific SKU.
 *
 * Search and filter inventory snapshots for a selected SKU using complex query
 * parameters, enabling analytics, stock reconciliation, and compliance audits.
 *
 * The SKU identifier must be specified in the path, and search parameters are
 * provided in the request body reflecting all filterable fields. Output is a
 * paginated result set with relevant inventory snapshots. Endpoint is
 * administrator-only, with strict permissions control.
 *
 * This operation is frequently integrated into inventory dashboards for
 * root-cause analysis and trend monitoring. Errors may include filter
 * validation, unauthorized access, or excessive result size.
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the SKU under analysis.
 * @param props.body Search criteria, filters, and pagination for inventory
 *   snapshots.
 * @path /aimall-backend/administrator/skus/:skuId/inventorySnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Unique identifier of the SKU under analysis. */
    skuId: string & tags.Format<"uuid">;

    /** Search criteria, filters, and pagination for inventory snapshots. */
    body: IAimallBackendInventorySnapshot.IRequest;
  };
  export type Body = IAimallBackendInventorySnapshot.IRequest;
  export type Response = IPageIAimallBackendInventorySnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/administrator/skus/:skuId/inventorySnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}/inventorySnapshots`;
  export const random = (): IPageIAimallBackendInventorySnapshot =>
    typia.random<IPageIAimallBackendInventorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get an inventory snapshot for a SKU by snapshot ID.
 *
 * Get the details of a specific inventory change event (snapshot) for a given
 * SKU. Path parameters SKU ID and snapshot ID are both required and validated
 * against schema relationships.
 *
 * Output includes the atomic, historical record of inventory change â€” such as
 * type (sale, restock), quantity, actor, and timestamp. Only authorized
 * administrators can access this sensitive, audit-oriented endpoint. Errors
 * include not found, unauthorized, and constraint validation issues.
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the parent SKU.
 * @param props.inventorySnapshotId Unique identifier of the inventory snapshot
 *   record.
 * @path /aimall-backend/administrator/skus/:skuId/inventorySnapshots/:inventorySnapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent SKU. */
    skuId: string & tags.Format<"uuid">;

    /** Unique identifier of the inventory snapshot record. */
    inventorySnapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendInventorySnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/administrator/skus/:skuId/inventorySnapshots/:inventorySnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}/inventorySnapshots/${encodeURIComponent(props.inventorySnapshotId ?? "null")}`;
  export const random = (): IAimallBackendInventorySnapshot =>
    typia.random<IAimallBackendInventorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.param("inventorySnapshotId")(() =>
        typia.assert(props.inventorySnapshotId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an inventory snapshot by SKU and snapshot ID.
 *
 * Update an existing inventory change event for a SKU. Path parameters specify
 * both the SKU and the snapshot to change; the body must provide a valid update
 * DTO per schema. Used predominantly for audit correction, historical log
 * repair, or system-driven reconciliation adjustments.
 *
 * Access is restricted to administrators. Potential error scenarios include
 * referential constraint failure, unauthorized access, or log record not found.
 * This endpoint supports audit integrity and should be paired with
 * comprehensive logging.
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the SKU
 * @param props.inventorySnapshotId Unique identifier of the inventory snapshot
 *   record to update.
 * @param props.body Inventory snapshot entity with updated fields as per
 *   schema.
 * @path /aimall-backend/administrator/skus/:skuId/inventorySnapshots/:inventorySnapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the SKU */
    skuId: string & tags.Format<"uuid">;

    /** Unique identifier of the inventory snapshot record to update. */
    inventorySnapshotId: string & tags.Format<"uuid">;

    /** Inventory snapshot entity with updated fields as per schema. */
    body: IAimallBackendInventorySnapshot.IUpdate;
  };
  export type Body = IAimallBackendInventorySnapshot.IUpdate;
  export type Response = IAimallBackendInventorySnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/administrator/skus/:skuId/inventorySnapshots/:inventorySnapshotId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}/inventorySnapshots/${encodeURIComponent(props.inventorySnapshotId ?? "null")}`;
  export const random = (): IAimallBackendInventorySnapshot =>
    typia.random<IAimallBackendInventorySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.param("inventorySnapshotId")(() =>
        typia.assert(props.inventorySnapshotId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an inventory snapshot for a SKU (hard delete).
 *
 * Remove an inventory change log entry for a SKU by snapshot ID. Hard delete is
 * enforced since the schema lacks soft delete fields. Operation is restricted
 * to administrators due to audit compliance and data sensitivity.
 *
 * Input parameters are validated against schema and relational constraints.
 * Success removes the row; errors include missing log, constraint failure, or
 * insufficient permissions. Comprehensive logging is recommended for this
 * risk-sensitive operation.
 *
 * @param props.connection
 * @param props.skuId Unique identifier of the parent SKU.
 * @param props.inventorySnapshotId Unique identifier of the inventory snapshot
 *   to delete.
 * @path /aimall-backend/administrator/skus/:skuId/inventorySnapshots/:inventorySnapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent SKU. */
    skuId: string & tags.Format<"uuid">;

    /** Unique identifier of the inventory snapshot to delete. */
    inventorySnapshotId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/administrator/skus/:skuId/inventorySnapshots/:inventorySnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/administrator/skus/${encodeURIComponent(props.skuId ?? "null")}/inventorySnapshots/${encodeURIComponent(props.inventorySnapshotId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("skuId")(() => typia.assert(props.skuId));
      assert.param("inventorySnapshotId")(() =>
        typia.assert(props.inventorySnapshotId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

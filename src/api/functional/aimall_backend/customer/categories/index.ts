import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCategory } from "../../../../structures/IPageIAimallBackendCategory";
import { IAimallBackendCategory } from "../../../../structures/IAimallBackendCategory";

/**
 * List all product categories for taxonomy management and selection.
 *
 * Fetches all product taxonomy categories. Response includes all categories and
 * their hierarchical context (parent_id, depth, name). Data is strictly
 * normalized; no product or summary data is included. Useful for populating
 * category selectors or displaying the product taxonomy. If paginated, response
 * structure is IPageIAimallBackendCategory. Permissions: available to all
 * customers, sellers, or administrators; administrators may see hidden/system
 * categories as well by additional filtering if supported.
 *
 * @param props.connection
 * @path /aimall-backend/customer/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendCategory;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/categories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/customer/categories";
  export const random = (): IPageIAimallBackendCategory =>
    typia.random<IPageIAimallBackendCategory>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Search or filter paginated categories for admin or advanced user scenarios.
 *
 * Retrieves a filtered and paginated list of product categories according to
 * supplied query parameters. Allows advanced search on category name, depth, or
 * parent_id. Response contains page of categories and supports sorting
 * configuration. Used by administrators or catalog managers in taxonomy
 * administration. Returns 403 for forbidden, 422 for invalid parameters.
 * Security: customer, seller, or administrator role required.
 *
 * @param props.connection
 * @param props.body Filter/search parameters for querying categories, including
 *   pagination, keyword, and sort settings.
 * @path /aimall-backend/customer/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Filter/search parameters for querying categories, including
     * pagination, keyword, and sort settings.
     */
    body: IAimallBackendCategory.IRequest;
  };
  export type Body = IAimallBackendCategory.IRequest;
  export type Response = IPageIAimallBackendCategory;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/customer/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/customer/categories";
  export const random = (): IPageIAimallBackendCategory =>
    typia.random<IPageIAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch one category by its ID for detailed viewing or update.
 *
 * Retrieves details for a specific product category, returning all atomic
 * fields (name, depth, parent_id). Returns 404 if not found. Permissions:
 * customer, seller, or administrator as appropriate for catalog access. Error
 * scenarios include non-existent ID, lack of permission, or database error.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the product category.
 * @path /aimall-backend/customer/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product category. */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCategory;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IAimallBackendCategory =>
    typia.random<IAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

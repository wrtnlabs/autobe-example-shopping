import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendAttachment } from "../../../../../structures/IPageIAimallBackendAttachment";
import { IAimallBackendAttachment } from "../../../../../structures/IAimallBackendAttachment";

/**
 * Retrieve all attachments for a comment (aimall_backend_attachments).
 *
 * Retrieve all attachment records for a given comment (by UUID) in
 * aimall_backend_attachments. This supports feeds or moderation panels needing
 * to render or manage all files linked to a comment.
 *
 * Only customers or administrators with sufficient rights should be able to
 * retrieve attachments; this may be enforced per privacy settings on the
 * comment or organizational policy.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the comment whose attachments to list.
 * @path /aimall-backend/customer/comments/:commentId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** UUID PK of the comment whose attachments to list. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendAttachment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/comments/:commentId/attachments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}/attachments`;
  export const random = (): IPageIAimallBackendAttachment =>
    typia.random<IPageIAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Attach a new file to a comment (aimall_backend_attachments).
 *
 * Attach a new file to a specific comment as an authenticated customer (owner)
 * or administrator. Attachments must include file_uri, file_type, and file_size
 * per IAimallBackendAttachment.ICreate. Created object references the parent
 * comment_id and includes business/app validation for type/size/ownership.
 * Returns the full record for the newly created attachment.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the comment to attach a file to.
 * @param props.body Attachment creation DTO (see
 *   IAimallBackendAttachment.ICreate).
 * @path /aimall-backend/customer/comments/:commentId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID PK of the comment to attach a file to. */
    commentId: string & tags.Format<"uuid">;

    /** Attachment creation DTO (see IAimallBackendAttachment.ICreate). */
    body: IAimallBackendAttachment.ICreate;
  };
  export type Body = IAimallBackendAttachment.ICreate;
  export type Response = IAimallBackendAttachment;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/comments/:commentId/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}/attachments`;
  export const random = (): IAimallBackendAttachment =>
    typia.random<IAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search/filter for comment attachments (aimall_backend_attachments).
 *
 * Query/filter list of all attachments for a particular comment (by UUID) using
 * schema-defined fields in request body. Supports advanced admin or owner
 * moderation scenarios where large numbers of attachments exist. All filters
 * are validated against the schema for aimall_backend_attachments.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the comment for searching attachments.
 * @param props.body Filter criteria for attachment list (see
 *   IAimallBackendAttachment.IRequest).
 * @path /aimall-backend/customer/comments/:commentId/attachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** UUID PK of the comment for searching attachments. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Filter criteria for attachment list (see
     * IAimallBackendAttachment.IRequest).
     */
    body: IAimallBackendAttachment.IRequest;
  };
  export type Body = IAimallBackendAttachment.IRequest;
  export type Response = IPageIAimallBackendAttachment;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/customer/comments/:commentId/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}/attachments`;
  export const random = (): IPageIAimallBackendAttachment =>
    typia.random<IPageIAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific attachment for a comment (aimall_backend_attachments).
 *
 * Fetch metadata and URI for a specific comment attachment by identifiers for
 * both parent comment and attachment UUID PK. For displays such as file
 * expansion or download, or for moderation. Access should be restricted to
 * ownership or administrative rights.
 *
 * @param props.connection
 * @param props.commentId UUID of the parent comment linking the attachment.
 * @param props.attachmentId UUID PK of the attachment to fetch.
 * @path /aimall-backend/customer/comments/:commentId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent comment linking the attachment. */
    commentId: string & tags.Format<"uuid">;

    /** UUID PK of the attachment to fetch. */
    attachmentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendAttachment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/comments/:commentId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IAimallBackendAttachment =>
    typia.random<IAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing comment attachment (aimall_backend_attachments).
 *
 * Update properties of an existing file attached to a comment (for example,
 * modify file_type or metadata). Accepts parent commentId and attachmentId in
 * path and fields to change in payload. Validation enforces only whitelisted
 * fields and correct ownership/admin rights. No public editing allowed.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the parent comment.
 * @param props.attachmentId UUID PK of the attachment being updated.
 * @param props.body Attachment update data for allowed fields (see
 *   IAimallBackendAttachment.IUpdate).
 * @path /aimall-backend/customer/comments/:commentId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID PK of the parent comment. */
    commentId: string & tags.Format<"uuid">;

    /** UUID PK of the attachment being updated. */
    attachmentId: string & tags.Format<"uuid">;

    /**
     * Attachment update data for allowed fields (see
     * IAimallBackendAttachment.IUpdate).
     */
    body: IAimallBackendAttachment.IUpdate;
  };
  export type Body = IAimallBackendAttachment.IUpdate;
  export type Response = IAimallBackendAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/customer/comments/:commentId/attachments/:attachmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IAimallBackendAttachment =>
    typia.random<IAimallBackendAttachment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (hard-delete) an attachment for a comment
 * (aimall_backend_attachments).
 *
 * Permanently delete a file/media attachment for a comment by IDs. Removal is
 * permanent and cannot be undone, and is permitted for comment authors
 * (customers) or administrators with necessary rights. No soft-delete supported
 * by the schema. Any file storage associated with file_uri must be handled
 * according to external object store policies.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the parent comment for the attachment.
 * @param props.attachmentId UUID PK of the attachment to delete.
 * @path /aimall-backend/customer/comments/:commentId/attachments/:attachmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID PK of the parent comment for the attachment. */
    commentId: string & tags.Format<"uuid">;

    /** UUID PK of the attachment to delete. */
    attachmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/customer/comments/:commentId/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

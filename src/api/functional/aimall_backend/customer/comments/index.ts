import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendComment } from "../../../../structures/IAimallBackendComment";
export * as attachments from "./attachments";
export * as comments from "./comments";

/**
 * Create a new community comment (aimall_backend_comments).
 *
 * Create a new community comment as an authenticated customer. Provide body
 * text, privacy status (is_private), references to post or review, and (if
 * threaded) parent_id. Ownership is set to the authenticated customer.
 *
 * This operation is restricted to logged-in customers; administrators may have
 * elevated capabilities through different endpoints. Validation and error
 * handling are enforced by the schema.
 *
 * @param props.connection
 * @param props.body Creation details for the new comment (see
 *   aimall_backend_comments).
 * @path /aimall-backend/customer/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Creation details for the new comment (see aimall_backend_comments). */
    body: IAimallBackendComment.ICreate;
  };
  export type Body = IAimallBackendComment.ICreate;
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/customer/comments";
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a single comment (by commentId) in aimall_backend_comments.
 *
 * Modify body text, privacy flag, or soft-delete a specific comment (UUID) in
 * the aimall_backend_comments table. Accepts an update DTO with allowed
 * properties. Only the comment's author (customer) or administrator may perform
 * the update based on permissions.
 *
 * Attempting to update an unauthorized comment is denied. Use soft-delete
 * (deleted_at) for logical removal.
 *
 * @param props.connection
 * @param props.commentId UUID of the comment to update.
 * @param props.body Fields to modify (see IAimallBackendComment.IUpdate).
 * @path /aimall-backend/customer/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /** Fields to modify (see IAimallBackendComment.IUpdate). */
    body: IAimallBackendComment.IUpdate;
  };
  export type Body = IAimallBackendComment.IUpdate;
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/customer/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (logical delete) a comment by commentId in
 * aimall_backend_comments.
 *
 * Logically delete a comment by setting deleted_at for the target UUID in
 * aimall_backend_comments. Deletion is restricted to ownership (customer) or
 * administrator role. Hard deletion is disallowed in this schema; logical
 * (soft) deletion is tracked for compliance and audit retention.
 *
 * @param props.connection
 * @param props.commentId UUID PK of the comment to soft-delete.
 * @path /aimall-backend/customer/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID PK of the comment to soft-delete. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/customer/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendOrder } from "../../../../structures/IAimallBackendOrder";
export * as orderItems from "./orderItems";
export * as payments from "./payments";
export * as shipments from "./shipments";
export * as orderSnapshots from "./orderSnapshots";

/**
 * Create a new order (Orders table).
 *
 * Creates a new order in the database, initializing required business
 * attributes as specified in the 'aimall_backend_orders' Prisma schema. Order
 * creation involves providing customer, seller, address, order_number (business
 * ID), and the core order content (status, total_amount, currency).
 *
 * Business logic may auto-generate order_number if not supplied. Security
 * checks are performed to ensure valid foreign keys (customer, seller,
 * address), and only allowed users (authenticated customers, sellers,
 * administrators) can submit new orders. Validation errors and role violations
 * are handled with appropriate responses. Related APIs allow follow-up
 * management of items, payments, and shipments.
 *
 * @param props.connection
 * @param props.body All business fields required to create a new order.
 * @path /aimall-backend/customer/orders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** All business fields required to create a new order. */
    body: IAimallBackendOrder.ICreate;
  };
  export type Body = IAimallBackendOrder.ICreate;
  export type Response = IAimallBackendOrder;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/orders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/customer/orders";
  export const random = (): IAimallBackendOrder =>
    typia.random<IAimallBackendOrder>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

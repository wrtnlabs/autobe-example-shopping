import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendOrderItem } from "../../../../../structures/IPageIAimallBackendOrderItem";
import { IAimallBackendOrderItem } from "../../../../../structures/IAimallBackendOrderItem";

/**
 * List all order items for an order (Order Items table).
 *
 * Fetches all item lines associated with a single order, using the order's
 * UUID. The API enumerates over all records in the 'aimall_backend_order_items'
 * table for the specified order. Each item provides full details as per
 * schemaâ€”product linkage, option/SKU, quantity, item and total prices.
 *
 * Permissioned for sellers, administrators, and owning customers. Related
 * endpoints provide item creation, mutation, or deletion inside an order.
 * Security ensures only actors with a business relationship to the order may
 * view item-level detail.
 *
 * @param props.connection
 * @param props.orderId The UUID of the parent order whose items are listed.
 * @path /aimall-backend/customer/orders/:orderId/orderItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** The UUID of the parent order whose items are listed. */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/orders/:orderId/orderItems",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/orderItems`;
  export const random = (): IPageIAimallBackendOrderItem =>
    typia.random<IPageIAimallBackendOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Add a new order item to an order (Order Items table).
 *
 * Adds a new order item line to an existing order using the parent order's
 * UUID. Input payload must supply all fields as per the
 * 'aimall_backend_order_items' schema (product, SKU/option, item name,
 * quantity, unit/total price). Use case includes administrator corrections,
 * seller adjustment after customer request, or test data.
 *
 * Order state is validated to reject additions for immutable or already
 * delivered orders. Permissions ensure only sellers/administrators and the
 * owning customer (where allowed) may mutate items in an open order.
 *
 * @param props.connection
 * @param props.orderId UUID of the order to which a new item is added.
 * @param props.body Fields required to create an order item.
 * @path /aimall-backend/customer/orders/:orderId/orderItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the order to which a new item is added. */
    orderId: string & tags.Format<"uuid">;

    /** Fields required to create an order item. */
    body: IAimallBackendOrderItem.ICreate;
  };
  export type Body = IAimallBackendOrderItem.ICreate;
  export type Response = IAimallBackendOrderItem;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/orders/:orderId/orderItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/orderItems`;
  export const random = (): IAimallBackendOrderItem =>
    typia.random<IAimallBackendOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter order items for a specific order (Order Items table).
 *
 * Allows advanced searching and filtering among all item lines of a specified
 * order. Enables queries such as filtering by product, SKU, quantity, or item
 * price. Best suited for administrative, seller, or analytic case management;
 * full support for pagination and complex search as per request body
 * parameters. Results mirror the relation schema fields exactly.
 *
 * Only accessible to actors with rights to the parent order, ensuring all
 * item-level queries are scoped in business logic.
 *
 * @param props.connection
 * @param props.orderId UUID of the parent order whose items are being searched.
 * @param props.body Search/filter and pagination parameters for order items
 *   within an order.
 * @path /aimall-backend/customer/orders/:orderId/orderItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** UUID of the parent order whose items are being searched. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search/filter and pagination parameters for order items within an
     * order.
     */
    body: IAimallBackendOrderItem.IRequest;
  };
  export type Body = IAimallBackendOrderItem.IRequest;
  export type Response = IPageIAimallBackendOrderItem;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/customer/orders/:orderId/orderItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/orderItems`;
  export const random = (): IPageIAimallBackendOrderItem =>
    typia.random<IPageIAimallBackendOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a single order item in an order (Order Items table).
 *
 * Gets the complete atomic details for a single order item, restricted to
 * users/roles with access to its parent order. Returns the exact schema
 * structure for one item: product, option (if applicable), item name, quantity,
 * and all price fields. Used by order inspection, returns/replacement
 * processing, or fulfillment dashboards.
 *
 * Endpoint validates both parent order and order item existence before loading,
 * and blocks access unless the actor has rights to both.
 *
 * @param props.connection
 * @param props.orderId UUID of the parent order to which the item belongs.
 * @param props.orderItemId UUID of the order item to retrieve.
 * @path /aimall-backend/customer/orders/:orderId/orderItems/:orderItemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent order to which the item belongs. */
    orderId: string & tags.Format<"uuid">;

    /** UUID of the order item to retrieve. */
    orderItemId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/orders/:orderId/orderItems/:orderItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/orderItems/${encodeURIComponent(props.orderItemId ?? "null")}`;
  export const random = (): IAimallBackendOrderItem =>
    typia.random<IAimallBackendOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderItemId")(() => typia.assert(props.orderItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete/remove a single order item from an order (Order Items table).
 *
 * Removes a single order item line from a given order record, specified by both
 * parent order UUID and order item UUID. Only possible if the parent order is
 * open and mutable. The action does not affect the parent order's existence but
 * will cause recalculation of total amounts in subsequent operations.
 *
 * Permitted for sellers/administrators and, in some business workflows, the
 * order-owning customer. Operation returns an appropriate confirmation or error
 * if not found or not permissible.
 *
 * @param props.connection
 * @param props.orderId UUID of the parent order from which the item will be
 *   removed.
 * @param props.orderItemId UUID of the order item to delete.
 * @path /aimall-backend/customer/orders/:orderId/orderItems/:orderItemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent order from which the item will be removed. */
    orderId: string & tags.Format<"uuid">;

    /** UUID of the order item to delete. */
    orderItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/customer/orders/:orderId/orderItems/:orderItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/orderItems/${encodeURIComponent(props.orderItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderItemId")(() => typia.assert(props.orderItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

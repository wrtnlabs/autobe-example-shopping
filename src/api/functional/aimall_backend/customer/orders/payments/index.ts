import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendPayment } from "../../../../../structures/IPageIAimallBackendPayment";
import { IAimallBackendPayment } from "../../../../../structures/IAimallBackendPayment";

/**
 * Retrieve a list of payment transactions for the specified order from
 * aimall_backend_payments.
 *
 * Retrieve a list of all payment transactions made for a specific order from
 * the aimall_backend_payments table. This operation enables the querying of
 * multiple types of payment events tied to a single order, reflecting the
 * real-world scenario where an order may be paid through several different
 * channels (e.g., credit card, coupon, points). By providing the orderId as a
 * path parameter, users can access all related payment records, which support
 * business audit, reporting, and reconciliation.
 *
 * Access is strictly enforced: only users with appropriate roles (the ordering
 * customer, involved seller, or platform administrator) are authorized to view
 * payment details, ensuring no leakage of transaction or PII data. This
 * endpoint is commonly paired with order retrieval and payment audit tools for
 * robust financial tracking.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose payments are being
 *   retrieved.
 * @path /aimall-backend/customer/orders/:orderId/payments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose payments are being retrieved. */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendPayment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/orders/:orderId/payments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IPageIAimallBackendPayment =>
    typia.random<IPageIAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a payment transaction associated with the specified order in
 * aimall_backend_payments.
 *
 * Create a new payment transaction for a specific order by submitting full
 * payment details (method, amount, currency, optional external TX code) in the
 * request body. The payment is linked to the specified order using the orderId
 * path parameter. Only parties directly involved in the order (usually the
 * customer or the seller) are permitted to use this endpoint, protecting
 * financial integrity and preventing unauthorized billing events.
 *
 * Business validation ensures the cumulative payment amount matches the
 * expected order total after payment creation. The returned response body
 * provides the complete payment record, linking to follow-up actions such as
 * refunds or transaction confirmation.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order under which the
 *   payment is being created.
 * @param props.body Payment transaction creation data, including method,
 *   amount, and currency.
 * @path /aimall-backend/customer/orders/:orderId/payments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target order under which the payment is
     * being created.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Payment transaction creation data, including method, amount, and
     * currency.
     */
    body: IAimallBackendPayment.ICreate;
  };
  export type Body = IAimallBackendPayment.ICreate;
  export type Response = IAimallBackendPayment;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IAimallBackendPayment =>
    typia.random<IAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific payment for an order from
 * aimall_backend_payments.
 *
 * Fetch the details of a specific payment tied to an order from the
 * aimall_backend_payments table. This operation supports scenarios including
 * detailed customer receipts, refund request validation, and financial audit
 * investigations. The endpoint requires both orderId and paymentId via path,
 * ensuring linkage and data integrity.
 *
 * Appropriate access control is enforced to prohibit unauthorized viewing of
 * sensitive payment details. Combined with the payment list endpoints, this API
 * forms the basis of robust financial transparency and customer service
 * functions.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order.
 * @param props.paymentId Unique identifier of the specific payment transaction
 *   to retrieve.
 * @path /aimall-backend/customer/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the specific payment transaction to retrieve. */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendPayment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IAimallBackendPayment =>
    typia.random<IAimallBackendPayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendPost } from "../../../../structures/IAimallBackendPost";
export * as comments from "./comments";
export * as attachments from "./attachments";
export * as snapshots from "./snapshots";

/**
 * Create a new community post/thread/Q&A.
 *
 * Allows any authenticated user to publish a new community post. Receives post
 * details (title, body, is_private, etc.) as the request body, with atomic
 * fields matching the aimall_backend_posts schema. The system will store the
 * post and return the full record as confirmation.
 *
 * Post creation may trigger AI or admin moderation depending on content.
 * Privacy flags set by the user restrict visibility at API or UI level. Posting
 * is subject to anti-abuse filters and compliance checks; errors may result if
 * input data is invalid or user is restricted.
 *
 * @param props.connection
 * @param props.body Data defining the new post (title, content, privacy, etc.).
 * @path /aimall-backend/customer/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data defining the new post (title, content, privacy, etc.). */
    body: IAimallBackendPost.ICreate;
  };
  export type Body = IAimallBackendPost.ICreate;
  export type Response = IAimallBackendPost;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/customer/posts";
  export const random = (): IAimallBackendPost =>
    typia.random<IAimallBackendPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update/edit a community post by postId.
 *
 * Updates an existing community post identified by postId. Can be used for post
 * editsâ€”such as refining content, fixing typos, or toggling privacy. Only the
 * post's original author or an administrator can update, with author validation
 * performed at the application level.
 *
 * The API receives the new data for the post fields as specified by
 * IAimallBackendPost.IUpdate, storing changes as per atomic schema fields.
 * Update is tracked with modification timestamps for auditing. Errors returned
 * if unauthorized or if post does not exist.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post to update.
 * @param props.body Fields to update in the post (title, body, etc.).
 * @path /aimall-backend/customer/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the post to update. */
    postId: string & tags.Format<"uuid">;

    /** Fields to update in the post (title, body, etc.). */
    body: IAimallBackendPost.IUpdate;
  };
  export type Body = IAimallBackendPost.IUpdate;
  export type Response = IAimallBackendPost;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/customer/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IAimallBackendPost =>
    typia.random<IAimallBackendPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a community post by postId; sets deleted_at but keeps record.
 *
 * Soft deletes a post in the community by updating the deleted_at field to the
 * current timestamp. This disables regular retrieval for general users but
 * retains the record for audit and potential restoration. Only original authors
 * or administrators may delete; author validation and permission checks are
 * enforced downstream.
 *
 * Attempting to delete posts not found, already deleted, or without permission
 * returns errors. Soft delete is in compliance with the schema and business
 * audit requirements. Hard deletion requires database/infra intervention or
 * future schema extensions.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post to delete (soft delete).
 * @path /aimall-backend/customer/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the post to delete (soft delete). */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/customer/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendSnapshot } from "../../../../../structures/IPageIAimallBackendSnapshot";
import { IAimallBackendSnapshot } from "../../../../../structures/IAimallBackendSnapshot";

/**
 * List all snapshots attached to a specific community post
 * (aimall_backend_snapshots).
 *
 * Retrieve a paginated list of snapshots associated with a specific community
 * post. Snapshot records enrich the timeline by capturing user image/photo
 * moments tied to posts and social engagement events.
 *
 * Accessible to all authenticated users. Permissions are enforced so only
 * public or authorized private snapshots are displayed, according to business
 * rules outlined in the Prisma schema. Response includes essential snapshot
 * fields and post linkage.
 *
 * Relationship: Each snapshot record references a post by post_id. The data is
 * sourced directly from the aimall_backend_snapshots table.
 *
 * If the post or snapshots do not exist, a proper 404 or empty result is
 * returned.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the community post whose
 *   snapshots are being queried.
 * @path /aimall-backend/customer/posts/:postId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the community post whose snapshots are being
     * queried.
     */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/posts/:postId/snapshots",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots`;
  export const random = (): IPageIAimallBackendSnapshot =>
    typia.random<IPageIAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new media snapshot attached to a post (aimall_backend_snapshots).
 *
 * Create (upload) a new snapshot (photo/media) directly linked to a specific
 * community post. This endpoint enforces all validation rules defined in
 * aimall_backend_snapshots from the Prisma schema, including post_id
 * relationship and media URI/data integrity.
 *
 * Permission: Only authenticated users can upload. Server processes field
 * validation (e.g., non-null media_uri), applies content moderation, and
 * persists all atomic fields such as media_uri, caption, and reference
 * timestamps.
 *
 * Returns the complete entity as stored.
 *
 * @param props.connection
 * @param props.postId Target post's unique identifier to which the snapshot
 *   will be linked.
 * @param props.body All snapshot creation parameters (media URI, optional
 *   caption, etc., per the schema).
 * @path /aimall-backend/customer/posts/:postId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target post's unique identifier to which the snapshot will be linked. */
    postId: string & tags.Format<"uuid">;

    /**
     * All snapshot creation parameters (media URI, optional caption, etc.,
     * per the schema).
     */
    body: IAimallBackendSnapshot.ICreate;
  };
  export type Body = IAimallBackendSnapshot.ICreate;
  export type Response = IAimallBackendSnapshot;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/posts/:postId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots`;
  export const random = (): IAimallBackendSnapshot =>
    typia.random<IAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search and filtering of snapshots on a specific post
 * (aimall_backend_snapshots).
 *
 * Provides advanced, paginated search of snapshots (user-generated
 * photos/videos) for a specific community post. Supports complex filtering by
 * attributes such as media format, creation date, or user.
 *
 * Utilizes the aimall_backend_snapshots schema and enforces that results are
 * restricted to the supplied post (post_id). Ensures permissions are enforced,
 * only public/private snapshots visible according to business rules. Pagination
 * and sorting are supported via the request body.
 *
 * Returns paginated and filtered snapshot entities with structure based on the
 * underlying schema. If no results are found, returns an empty page.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the community post for which
 *   snapshot search is performed.
 * @param props.body Snapshot search and filter parameters for advanced querying
 *   on the post's attached snapshots.
 * @path /aimall-backend/customer/posts/:postId/snapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Unique identifier of the community post for which snapshot search is
     * performed.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Snapshot search and filter parameters for advanced querying on the
     * post's attached snapshots.
     */
    body: IAimallBackendSnapshot.IRequest;
  };
  export type Body = IAimallBackendSnapshot.IRequest;
  export type Response = IPageIAimallBackendSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/customer/posts/:postId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots`;
  export const random = (): IPageIAimallBackendSnapshot =>
    typia.random<IPageIAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a single snapshot attached to a post
 * (aimall_backend_snapshots).
 *
 * Get detailed information for a single snapshot (user photo/moment) attached
 * to a specified post. The API validates both the post and snapshot linkage for
 * data integrity and permission handling.
 *
 * The response contains all atomic fields of the aimall_backend_snapshots
 * entry, as referenced from the Prisma schema. Security logic restricts private
 * media or enforces access rules tied to the post's visibility. If the post or
 * snapshot does not exist, a 404 error is returned.
 *
 * @param props.connection
 * @param props.postId Unique ID of the parent community post for the snapshot.
 * @param props.snapshotId Unique identifier of the snapshot media record.
 * @path /aimall-backend/customer/posts/:postId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the parent community post for the snapshot. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the snapshot media record. */
    snapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/posts/:postId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IAimallBackendSnapshot =>
    typia.random<IAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing snapshot (photo/media) on a post
 * (aimall_backend_snapshots).
 *
 * Update an existing snapshot entity attached to a target community post.
 * Supports update to editable fields as specified in aimall_backend_snapshots
 * (e.g., caption or media URI).
 *
 * Requires both postId and snapshotId to ensure correct context and linkage.
 * Permission: Only the owner or admin may edit, subject to content moderation
 * and audit logs. If either entity does not exist, returns 404.
 *
 * Applies validation rules (e.g., only caption/media can be changed) as modeled
 * in the schema.
 *
 * @param props.connection
 * @param props.postId Parent post's unique identifier.
 * @param props.snapshotId Snapshot's unique identifier to update.
 * @param props.body Snapshot update request body with editable fields (e.g.,
 *   caption or media URI).
 * @path /aimall-backend/customer/posts/:postId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Parent post's unique identifier. */
    postId: string & tags.Format<"uuid">;

    /** Snapshot's unique identifier to update. */
    snapshotId: string & tags.Format<"uuid">;

    /**
     * Snapshot update request body with editable fields (e.g., caption or
     * media URI).
     */
    body: IAimallBackendSnapshot.IUpdate;
  };
  export type Body = IAimallBackendSnapshot.IUpdate;
  export type Response = IAimallBackendSnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/customer/posts/:postId/snapshots/:snapshotId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IAimallBackendSnapshot =>
    typia.random<IAimallBackendSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an existing snapshot (photo/media) on a post
 * (aimall_backend_snapshots).
 *
 * Delete (or soft-delete) a snapshot/media entity from a target post. The
 * operation identifies the snapshot via postId and snapshotId. Handles
 * permission checks for owner/admin. If the snapshot or post does not exist,
 * returns 404.
 *
 * If business requires a soft delete, nullifies link or archives record. If not
 * present in the schema, performs hard delete. Ensures compliance with audit
 * and retention policies as stated by business rules.
 *
 * @param props.connection
 * @param props.postId Parent post's unique ID.
 * @param props.snapshotId Target snapshot's unique ID.
 * @path /aimall-backend/customer/posts/:postId/snapshots/:snapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Parent post's unique ID. */
    postId: string & tags.Format<"uuid">;

    /** Target snapshot's unique ID. */
    snapshotId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/customer/posts/:postId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/posts/${encodeURIComponent(props.postId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendComment } from "../../../../../structures/IPageIAimallBackendComment";
import { IAimallBackendComment } from "../../../../../structures/IAimallBackendComment";

/**
 * Retrieve all comments linked to a specific product review
 * (aimall_backend_comments).
 *
 * Fetch all comments attached to a specific product review, as defined in the
 * aimall_backend_comments Prisma schema. Each comment is linked to the selected
 * review (review_id) and contains per-comment body, privacy, threading (via
 * parent_id), and timestamps.
 *
 * Only comments associated with the indicated reviewId will be included,
 * supporting the community bulletin and moderation features. Both public and
 * private comments can be returned, with client-side logic or role-based
 * filtering applied as appropriate.
 *
 * Security note: Customers see only comments intended for their view;
 * moderators and admins may access all comment variants for full oversight.
 *
 * If the reviewId does not exist, expect an empty array or a 404 error if the
 * underlying review entity is not found.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the parent product review to fetch
 *   comments for.
 * @path /aimall-backend/customer/reviews/:reviewId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the parent product review to fetch comments for. */
    reviewId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendComment.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/reviews/:reviewId/comments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments`;
  export const random = (): IPageIAimallBackendComment.ISummary =>
    typia.random<IPageIAimallBackendComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new comment on a product review, supporting threads and privacy.
 *
 * Creates and assigns a new comment to the specified product review, using the
 * aimall_backend_comments model for atomic storage of comment details (body,
 * privacy flag, parent threading if a reply, timestamps, author/customer).
 *
 * On success, the response contains the newly created comment in its complete
 * form. Threading, privacy, and authorization checks (such as restricting
 * posting to logged-in users only) apply.
 *
 * Validation failures (missing required fields, reviewer not found, or parent
 * comment not in thread) result in error responses with details.
 *
 * @param props.connection
 * @param props.reviewId Product review UUID to which the comment is linked.
 * @param props.body Required comment information for creation, including body,
 *   author, privacy, and optional parent/threading info.
 * @path /aimall-backend/customer/reviews/:reviewId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Product review UUID to which the comment is linked. */
    reviewId: string & tags.Format<"uuid">;

    /**
     * Required comment information for creation, including body, author,
     * privacy, and optional parent/threading info.
     */
    body: IAimallBackendComment.ICreate;
  };
  export type Body = IAimallBackendComment.ICreate;
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customer/reviews/:reviewId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments`;
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate comments for a specific review with filtering and
 * sorting.
 *
 * Offers advanced retrieval of comments attached to a given product review,
 * leveraging the aimall_backend_comments model and supporting filtrations on
 * comment body, author (customer_id), is_private, creation/modification
 * timestamps, and parent_id for threads.
 *
 * Supports pagination, keyword search, and role-dependent privacy filtering.
 * Customers are restricted to comments they can view; admins and moderators
 * receive the full comment set. Sorting by created_at or updated_at is
 * available.
 *
 * Related API: The GET operation for the same path provides all comments with
 * no search or filter. PATCH is intended for more complex queries.
 *
 * Errors include: reviewId not found or search criteria invalid.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier of the product review for comment
 *   search context.
 * @param props.body Search and pagination parameters for filtered comment
 *   retrieval.
 * @path /aimall-backend/customer/reviews/:reviewId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Unique identifier of the product review for comment search context. */
    reviewId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for filtered comment retrieval. */
    body: IAimallBackendComment.IRequest;
  };
  export type Body = IAimallBackendComment.IRequest;
  export type Response = IPageIAimallBackendComment;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/customer/reviews/:reviewId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments`;
  export const random = (): IPageIAimallBackendComment =>
    typia.random<IPageIAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific comment by commentId for a given product review.
 *
 * Fetches a specific comment from the aimall_backend_comments entity by UUID,
 * linked to a particular review (reviewId). All normalized fields, including
 * body, privacy flag, thread relationships, and timestamps, are returned in
 * detail.
 *
 * This is used for detail views, moderation, or context display workflows,
 * allowing users to retrieve a single, uniquely identified comment.
 *
 * Access control ensures customers cannot read private comments unless
 * permitted (their own, for instance). Moderators/admins can access all
 * comments.
 *
 * @param props.connection
 * @param props.reviewId Review UUID the comment belongs to.
 * @param props.commentId UUID of the comment to retrieve.
 * @path /aimall-backend/customer/reviews/:reviewId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Review UUID the comment belongs to. */
    reviewId: string & tags.Format<"uuid">;

    /** UUID of the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/customer/reviews/:reviewId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a comment for a review, restricted to authors and platform
 * moderators/admins.
 *
 * Updates a comment within the aimall_backend_comments entity, identified by
 * review and comment UUIDs. Only mutable fields (body, privacy flag) can be
 * updated; timestamps are refreshed. Author/ownership and moderator/admin
 * permissions are enforced.
 *
 * The operation ensures atomic record updates per the schema, supporting use
 * cases like typo correction, content redaction, or privacy toggling. All
 * activity is tracked for audit purposes.
 *
 * If the comment does not exist or the caller is unauthorized, proper error
 * codes are returned.
 *
 * @param props.connection
 * @param props.reviewId Review UUID associated with the comment.
 * @param props.commentId Comment UUID to update.
 * @param props.body Fields to update in the comment record; only mutable values
 *   in IAimallBackendComment.IUpdate.
 * @path /aimall-backend/customer/reviews/:reviewId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Review UUID associated with the comment. */
    reviewId: string & tags.Format<"uuid">;

    /** Comment UUID to update. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the comment record; only mutable values in
     * IAimallBackendComment.IUpdate.
     */
    body: IAimallBackendComment.IUpdate;
  };
  export type Body = IAimallBackendComment.IUpdate;
  export type Response = IAimallBackendComment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/customer/reviews/:reviewId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAimallBackendComment =>
    typia.random<IAimallBackendComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a comment on a review (logical redaction/audit).
 *
 * Performs a soft delete on a comment associated with a product review by
 * setting the deleted_at timestamp in aimall_backend_comments. The record is
 * logically hidden from all normal listings, retaining full auditability per
 * compliance rules.
 *
 * Only allowed for the author, moderators, or admin roles. Deletion of parent
 * comments may be restricted if there are active replies/comments for
 * referential integrity.
 *
 * Error handling for non-existent comment, already deleted, or permission
 * denied conditions. Audit logs are updated whenever a comment is deleted.
 *
 * @param props.connection
 * @param props.reviewId Review UUID the comment belongs to.
 * @param props.commentId UUID of the comment to be deleted.
 * @path /aimall-backend/customer/reviews/:reviewId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Review UUID the comment belongs to. */
    reviewId: string & tags.Format<"uuid">;

    /** UUID of the comment to be deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/customer/reviews/:reviewId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/customer/reviews/${encodeURIComponent(props.reviewId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

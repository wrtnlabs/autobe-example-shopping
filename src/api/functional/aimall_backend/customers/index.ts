import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendCustomer } from "../../../structures/IAimallBackendCustomer";

/**
 * Register (create) a new customer account (aimall_backend_customers table).
 *
 * Register a new customer in the system backend. All required atomic fields
 * from IAimallBackendCustomer.ICreate must be supplied - including email
 * (unique), phone (unique), password_hash (nullable for external accounts), and
 * status. After validation, system inserts and returns the full customer object
 * including assigned id, audit timestamps, and all supplied/derived values.
 *
 * Typically used by registration APIs (for end-users) or backoffice tools
 * (admin bulk input). Uniqueness of email/phone is enforced by constraints in
 * the model. Additional logic (email/SMS verification, onboarding, or
 * third-party OAuth linkage) may be triggered as part of higher layer
 * workflows.
 *
 * @param props.connection
 * @param props.body Payload with all required info for creating a new customer
 *   (per IAimallBackendCustomer.ICreate schema).
 * @path /aimall-backend/customers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload with all required info for creating a new customer (per
     * IAimallBackendCustomer.ICreate schema).
     */
    body: IAimallBackendCustomer.ICreate;
  };
  export type Body = IAimallBackendCustomer.ICreate;
  export type Response = IAimallBackendCustomer;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/customers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/customers";
  export const random = (): IAimallBackendCustomer =>
    typia.random<IAimallBackendCustomer>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

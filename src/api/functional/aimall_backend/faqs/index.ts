import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendFaq } from "../../../structures/IPageIAimallBackendFaq";
import { IAimallBackendFaq } from "../../../structures/IAimallBackendFaq";

/**
 * List or paginate FAQ entries for help desks and self-service support.
 *
 * List all visible FAQ entries or paginate through FAQ records as defined in
 * the aimall_backend_faqs model. FAQ data includes the question, answer,
 * category, sort order, visibility flag, and timestamps for creation and last
 * update.
 *
 * End users (customers, guests) and administrators may read APIs for display,
 * but only visible=true records are shown to general public. This endpoint is
 * suitable for customer help UIs and administrator FAQ search panels.
 *
 * Related: PATCH for advanced search/filtering support, GET /faqs/{id} for
 * detail view.
 *
 * @param props.connection
 * @path /aimall-backend/faqs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendFaq;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/faqs",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/faqs";
  export const random = (): IPageIAimallBackendFaq =>
    typia.random<IPageIAimallBackendFaq>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Advanced FAQ search and filter, supports sorting and paging.
 *
 * Query, filter, and search FAQ database with complex criteria. Filters include
 * category, visibility, keyword, and display ordering. Pagination and sort
 * order are supported for scalable UX.
 *
 * The endpoint applies to public help center, administrator panels, and
 * analytics use. Implementation uses atomically stored field data only, and may
 * be access-controlled for audit or compliance workflows. No hidden fields are
 * exposed to guest/public users unless visibility is true.
 *
 * @param props.connection
 * @param props.body Query/filter parameters for FAQ search and pagination,
 *   matching schema properties.
 * @path /aimall-backend/faqs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Query/filter parameters for FAQ search and pagination, matching
     * schema properties.
     */
    body: IAimallBackendFaq.IRequest;
  };
  export type Body = IAimallBackendFaq.IRequest;
  export type Response = IPageIAimallBackendFaq;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/faqs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/faqs";
  export const random = (): IPageIAimallBackendFaq =>
    typia.random<IPageIAimallBackendFaq>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve all fields for a given FAQ by ID, as per schema definition.
 *
 * Returns complete details of an individual FAQ entry matching the provided
 * UUID. Returned fields include full question, answer, category tag, visibility
 * status, sorting order, as well as timestamps for creation and last update.
 *
 * This endpoint is used in helpdesk UI for FAQ detail views, search results
 * access and administrator panels. Only visible=true records are returned to
 * non-admin/guest queries. Administrator users may access non-visible or hidden
 * FAQs for content management workflows.
 *
 * @param props.connection
 * @param props.faqId The UUID of the FAQ record to retrieve.
 * @path /aimall-backend/faqs/:faqId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the FAQ record to retrieve. */
    faqId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendFaq;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/faqs/:faqId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/faqs/${encodeURIComponent(props.faqId ?? "null")}`;
  export const random = (): IAimallBackendFaq =>
    typia.random<IAimallBackendFaq>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("faqId")(() => typia.assert(props.faqId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

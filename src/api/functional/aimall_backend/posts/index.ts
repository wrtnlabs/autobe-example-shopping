import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendPost } from "../../../structures/IPageIAimallBackendPost";
import { IAimallBackendPost } from "../../../structures/IAimallBackendPost";

/**
 * List all community posts (aimall_backend_posts) as an array or collection.
 *
 * Returns all community posts as represented by the aimall_backend_posts table.
 * This is a simple index endpoint, intended for public users, authenticated
 * members, or admins to browse the selection of posts.
 *
 * Returns atomic post data without pagination/filtering. Accessible as a public
 * endpoint for reading, with restrictions on certain private content by the API
 * or downstream application logic. Often used for building community feeds or
 * Q&A boards. Pair with search and detail endpoints for best results.
 *
 * @param props.connection
 * @path /aimall-backend/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendPost;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/posts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/posts";
  export const random = (): IPageIAimallBackendPost =>
    typia.random<IPageIAimallBackendPost>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Search/filter/community posts with pagination and advanced queries.
 *
 * Enables users and admins to search and filter community posts using advanced
 * criteria. Parameters may include author (customerId), post title, date
 * ranges, is_private flag, etc. Designed according to the aimall_backend_posts
 * schema. Supports pagination and sorting for large post sets.
 *
 * All users can filter public posts; authenticated users may filter/search
 * their own posts, and admins can search all. Returns a paginated result set.
 * Common in admin consoles or for content-heavy boards. Implement error
 * handling for invalid filters and access scope violations.
 *
 * @param props.connection
 * @param props.body Search and filtering criteria with pagination parameters
 *   for posts.
 * @path /aimall-backend/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search and filtering criteria with pagination parameters for posts. */
    body: IAimallBackendPost.IRequest;
  };
  export type Body = IAimallBackendPost.IRequest;
  export type Response = IPageIAimallBackendPost;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/posts";
  export const random = (): IPageIAimallBackendPost =>
    typia.random<IPageIAimallBackendPost>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch a single community post's detail by postId.
 *
 * Get the full details of a community post by ID. Returns the atomic record
 * from aimall_backend_posts, showing all defined post fields. If the post has
 * been soft deleted (deleted_at), access depends on calling user and
 * implementation logic (e.g., only admin can see deleted).
 *
 * Typically used for detailed post display, moderation, and Q&A flows. Public
 * users or members can access the endpoint with restrictions on private or
 * deleted data. Returns 404 if not found or if access blocked by
 * privacy/deletion rules.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the post to fetch.
 * @path /aimall-backend/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the post to fetch. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendPost;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IAimallBackendPost =>
    typia.random<IAimallBackendPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

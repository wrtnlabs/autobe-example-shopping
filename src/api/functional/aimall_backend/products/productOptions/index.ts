import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendProductOption } from "../../../../structures/IPageIAimallBackendProductOption";
import { IAimallBackendProductOption } from "../../../../structures/IAimallBackendProductOption";

/**
 * Retrieve all product options associated with a given product
 * (aimall_backend_product_options).
 *
 * List all product option records for a specified product by UUID. Each option
 * record references a valid product from aimall_backend_products and includes
 * atomic fields such as name and value. Listing is typically for customers to
 * select variants or for sellers/admins to review available configurations.
 *
 * The operation is public and requires only a valid product ID. All option
 * records associated with this productId are aggregated and returned,
 * referencing the aimall_backend_product_options schema. The endpoint omits
 * non-existent/invalid records and ensures that results are consistent with
 * business/display logic. No sensitive information is returned in output.
 *
 * For extended management or batch operations, see advanced endpoints for
 * option creation and modification. Output is a list or paginated DTO of
 * product option entities.
 *
 * @param props.connection
 * @param props.productId UUID of the product for which to list associated
 *   options.
 * @path /aimall-backend/products/:productId/productOptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** UUID of the product for which to list associated options. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendProductOption;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/products/:productId/productOptions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/products/${encodeURIComponent(props.productId ?? "null")}/productOptions`;
  export const random = (): IPageIAimallBackendProductOption =>
    typia.random<IPageIAimallBackendProductOption>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search/filter of product options for a given product
 * (aimall_backend_product_options).
 *
 * Perform advanced search and filter across the product option records for a
 * specified product, as defined by aimall_backend_product_options. Operations
 * are scoped by productId and may include criteria on the option name or value
 * for powerful variant management tools.
 *
 * This operation is available to all users—including customers, sellers, and
 * admins—enabling granular querying for product variant data. Paginated output
 * ensures scalability and performance for large product catalogs. The endpoint
 * requires a productId as a path parameter, and all
 * filtering/sorting/pagination details must be present in the request body,
 * conforming to the product option search DTO. Only records that pass the
 * search criteria and belong to the specified product are returned.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose options are being searched.
 * @param props.body Advanced query/filter DTO for productOption records
 *   associated with a product.
 * @path /aimall-backend/products/:productId/productOptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** UUID of the product whose options are being searched. */
    productId: string & tags.Format<"uuid">;

    /**
     * Advanced query/filter DTO for productOption records associated with a
     * product.
     */
    body: IAimallBackendProductOption.IRequest;
  };
  export type Body = IAimallBackendProductOption.IRequest;
  export type Response = IPageIAimallBackendProductOption;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/products/:productId/productOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/products/${encodeURIComponent(props.productId ?? "null")}/productOptions`;
  export const random = (): IPageIAimallBackendProductOption =>
    typia.random<IPageIAimallBackendProductOption>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detail data for a product option by product and option IDs
 * (aimall_backend_product_options).
 *
 * Retrieve a single product option record, ensuring it is attached to the
 * referenced productId as per the foreign key relationship in
 * aimall_backend_product_options. Enables user interfaces and variant
 * management screens to provide full detail for an option.
 *
 * Used for detail display by customers, sellers, or administrators—this
 * endpoint exposes all public, normalized fields for a productOption, such as
 * name and value. Authorization is not required for basic reads. The endpoint
 * performs integrity checks to ensure the productOptionId belongs to productId
 * and returns appropriate errors if not found.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product of the product option.
 * @param props.productOptionId UUID of the product option record to retrieve.
 * @path /aimall-backend/products/:productId/productOptions/:productOptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent product of the product option. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the product option record to retrieve. */
    productOptionId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendProductOption;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/products/:productId/productOptions/:productOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/products/${encodeURIComponent(props.productId ?? "null")}/productOptions/${encodeURIComponent(props.productOptionId ?? "null")}`;
  export const random = (): IAimallBackendProductOption =>
    typia.random<IAimallBackendProductOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("productOptionId")(() =>
        typia.assert(props.productOptionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IPageIAimallBackendReview } from "../../../structures/IPageIAimallBackendReview";

/**
 * List all active product reviews for browsing, analytics, or moderation.
 *
 * Retrieves a paginated, sorted list of active reviews from the
 * aimall_backend_reviews table. Each review includes id, product_id,
 * customer_id, title, body, rating, created_at, updated_at. Consumers may limit
 * output via product, author, or rating criteria through query parameters (not
 * shown in this get spec, but standard in REST). Soft-deleted reviews are
 * hidden in normal queries per compliance rules.
 *
 * Read access is public but may restrict certain private details based on user
 * role and data sensitivity (e.g., some review info is limited to admins). The
 * operation supports core product UX (e.g. review display) and analytic
 * systems. Proper error and validation handling provided for edge case
 * queries.
 *
 * @param props.connection
 * @path /aimall-backend/reviews
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageIAimallBackendReview.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/reviews",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aimall-backend/reviews";
  export const random = (): IPageIAimallBackendReview.ISummary =>
    typia.random<IPageIAimallBackendReview.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

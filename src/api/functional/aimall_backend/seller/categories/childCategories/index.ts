import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendCategory } from "../../../../../structures/IPageIAimallBackendCategory";
import { IAimallBackendCategory } from "../../../../../structures/IAimallBackendCategory";

/**
 * List immediate child categories for a given parent category
 * (aimall_backend_categories).
 *
 * Retrieve a list of child categories directly under the specified parent
 * category. The aimall_backend_categories table uses the parent_id column to
 * model category nesting and supports up to three levels of hierarchy for
 * product taxonomy.
 *
 * This API enables customers, sellers, and administrators to fetch all
 * immediately subordinate categories, facilitating faceted navigation, dynamic
 * menu generation, or administrative updates. The operation checks that the
 * specified category exists and then finds all categories with parent_id equal
 * to categoryId, ensuring strong data integrity and enforcing the unique
 * constraint (parent_id, name) for category names.
 *
 * Only categories that exist (not deleted) are returned; you may filter or
 * restrict based on your access policies. This endpoint can be used for
 * recursive traversal by repeatedly calling it on child categories, and is
 * essential for deep-linking and analytics on verticals.
 *
 * Error behavior: If the given categoryId does not exist, a not found error
 * will be returned; if the parent category has no children, an empty array is
 * returned.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the parent category whose
 *   children will be listed.
 * @path /aimall-backend/seller/categories/:categoryId/childCategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the parent category whose children will be
     * listed.
     */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendCategory;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/categories/:categoryId/childCategories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/categories/${encodeURIComponent(props.categoryId ?? "null")}/childCategories`;
  export const random = (): IPageIAimallBackendCategory =>
    typia.random<IPageIAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new child category nested under the given parent
 * (aimall_backend_categories).
 *
 * Create a new child category immediately under the specified parent category.
 * The operation leverages the normalized structure of the
 * aimall_backend_categories table, including fields for parent_id (set to the
 * path parameter), name, and depth (assigned as parent category depth plus
 * one).
 *
 * This route ensures that within the same parent, category names are unique,
 * enforcing the (parent_id, name) constraint. Only administrator and seller
 * roles are authorized to use this creation endpoint as it may impact global
 * navigation or search structures. Upon successful creation, the complete
 * category object is returned, including system-generated fields such as id and
 * depth.
 *
 * Validation: If the supplied name duplicates any sibling under the same
 * parent, a conflict error will occur. If the parentId does not exist, the
 * system returns an error. Business rules (such as max depth) should be
 * enforced in application logic.
 *
 * @param props.connection
 * @param props.categoryId Parent category ID under which the child will be
 *   created.
 * @param props.body Specification of the new child category (excluding
 *   parent_id, which is set by path parameter).
 * @path /aimall-backend/seller/categories/:categoryId/childCategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Parent category ID under which the child will be created. */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Specification of the new child category (excluding parent_id, which
     * is set by path parameter).
     */
    body: IAimallBackendCategory.ICreate;
  };
  export type Body = IAimallBackendCategory.ICreate;
  export type Response = IAimallBackendCategory;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/seller/categories/:categoryId/childCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/categories/${encodeURIComponent(props.categoryId ?? "null")}/childCategories`;
  export const random = (): IAimallBackendCategory =>
    typia.random<IAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced search for child categories with filtering/pagination below a parent
 * (aimall_backend_categories).
 *
 * Fetch a filtered, sorted, and paginated list of child categories for a given
 * parent category. This operation is performed on the aimall_backend_categories
 * table and leverages its fields and relationships, such as parent_id, name,
 * and depth, supporting multi-level product taxonomy navigation, especially for
 * large catalogs.
 *
 * Advanced search queries, such as partial matching of category names,
 * filtering by depth or custom business logic, and pagination (offset/limit),
 * are submitted via the request body. Sorting order can be controlled by
 * clients, enabling dynamic UI structures or analytics.
 *
 * Security considerations: Only users with the 'administrator' or 'seller'
 * roles may perform complex category searches for management purposes. Proper
 * validation is required to avoid fetching deeply nested or orphaned
 * categories. Expected errors include invalid parent categoryId or malformed
 * filters.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the parent category for which
 *   children are to be searched.
 * @param props.body Filtering and pagination/search parameters for child
 *   category search.
 * @path /aimall-backend/seller/categories/:categoryId/childCategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Unique identifier of the parent category for which children are to be
     * searched.
     */
    categoryId: string & tags.Format<"uuid">;

    /** Filtering and pagination/search parameters for child category search. */
    body: IAimallBackendCategory.IRequest;
  };
  export type Body = IAimallBackendCategory.IRequest;
  export type Response = IPageIAimallBackendCategory;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/seller/categories/:categoryId/childCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/categories/${encodeURIComponent(props.categoryId ?? "null")}/childCategories`;
  export const random = (): IPageIAimallBackendCategory =>
    typia.random<IPageIAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific child category under a parent
 * (aimall_backend_categories).
 *
 * Retrieve the complete details for a single child category beneath a specified
 * parent category. The operation enforces that the target child category
 * actually lists the given parentId as its parent_id column and matches the
 * exact UUIDs provided.
 *
 * This check is necessary for preventing category tree corruption or reference
 * errors. The returned object includes the full set of fields for the
 * aimall_backend_categories table: id, parent_id, name, depth, etc. This API
 * aids administrative tools that need to edit or display category specifics and
 * forms the backbone of hierarchical product taxonomy management systems.
 *
 * Errors: If either category ID is invalid or the specified parent/child
 * relationship does not exist, a not-found error is returned. Access control
 * may restrict this operation to administrators and sellers who maintain the
 * category catalog.
 *
 * @param props.connection
 * @param props.categoryId Parent category ID in which to search for the child.
 * @param props.childCategoryId Unique identifier for the child category to
 *   retrieve.
 * @path /aimall-backend/seller/categories/:categoryId/childCategories/:childCategoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Parent category ID in which to search for the child. */
    categoryId: string & tags.Format<"uuid">;

    /** Unique identifier for the child category to retrieve. */
    childCategoryId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendCategory;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/categories/:categoryId/childCategories/:childCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/categories/${encodeURIComponent(props.categoryId ?? "null")}/childCategories/${encodeURIComponent(props.childCategoryId ?? "null")}`;
  export const random = (): IAimallBackendCategory =>
    typia.random<IAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("childCategoryId")(() =>
        typia.assert(props.childCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of a specific child category under a parent
 * (aimall_backend_categories).
 *
 * Modify one or more fields of a specified child category directly under a
 * parent category. The operation validates that the relationship is legal,
 * i.e., the target child’s parent_id matches the supplied parentId. Updatable
 * fields typically include the category name (subject to uniqueness within the
 * same parent), and optionally the depth or other metadata, depending on the
 * business rules.
 *
 * On successful update, the API returns the detailed, updated category object.
 * Role-based access restricts this endpoint to administrators and sellers
 * responsible for product taxonomy management.
 *
 * If constraints are violated—such as a name clash with a sibling category
 * under the same parent, or if the child is orphaned (parent_id does not
 * match)—an error will be returned. The operation does not support moving
 * categories between parents; only direct updates to fields of the child are
 * permitted.
 *
 * @param props.connection
 * @param props.categoryId ID of the parent category of the target child
 *   category.
 * @param props.childCategoryId ID of the child category to update.
 * @param props.body Update information for the child category (e.g., new name);
 *   cannot change parent_id via this route.
 * @path /aimall-backend/seller/categories/:categoryId/childCategories/:childCategoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the parent category of the target child category. */
    categoryId: string & tags.Format<"uuid">;

    /** ID of the child category to update. */
    childCategoryId: string & tags.Format<"uuid">;

    /**
     * Update information for the child category (e.g., new name); cannot
     * change parent_id via this route.
     */
    body: IAimallBackendCategory.IUpdate;
  };
  export type Body = IAimallBackendCategory.IUpdate;
  export type Response = IAimallBackendCategory;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/seller/categories/:categoryId/childCategories/:childCategoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/categories/${encodeURIComponent(props.categoryId ?? "null")}/childCategories/${encodeURIComponent(props.childCategoryId ?? "null")}`;
  export const random = (): IAimallBackendCategory =>
    typia.random<IAimallBackendCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("childCategoryId")(() =>
        typia.assert(props.childCategoryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a specific child category under a parent
 * (aimall_backend_categories).
 *
 * Permanently delete a specific child category that is directly under a given
 * parent category. The operation checks that the target child’s parent_id
 * matches the parentId provided. Since the aimall_backend_categories table does
 * not have any soft deletion fields (such as deleted_at), this endpoint removes
 * the record entirely from the system, subject to referential integrity.
 *
 * This operation is restricted to administrator and seller roles, and should be
 * guarded by business logic to prevent deletion of categories still referenced
 * by products or serving as parents to other categories. Attempting to delete a
 * non-existent or mismatched (parent/child) pair results in an error; trying to
 * delete a parent category with active children or products should be handled
 * appropriately by the application.
 *
 * @param props.connection
 * @param props.categoryId Parent category ID owning the child to delete.
 * @param props.childCategoryId Child category ID to be deleted.
 * @path /aimall-backend/seller/categories/:categoryId/childCategories/:childCategoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Parent category ID owning the child to delete. */
    categoryId: string & tags.Format<"uuid">;

    /** Child category ID to be deleted. */
    childCategoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/seller/categories/:categoryId/childCategories/:childCategoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/categories/${encodeURIComponent(props.categoryId ?? "null")}/childCategories/${encodeURIComponent(props.childCategoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.param("childCategoryId")(() =>
        typia.assert(props.childCategoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendOrderSnapshot } from "../../../../../structures/IPageIAimallBackendOrderSnapshot";
import { IAimallBackendOrderSnapshot } from "../../../../../structures/IAimallBackendOrderSnapshot";

/**
 * List all order audit snapshots for a specific order (Order Snapshots table).
 *
 * Fetch the full list of snapshot records for the targeted order. Each snapshot
 * provides a point-in-time audit of the order's state, including all related
 * items, payments, and status information, consistent with the normalized audit
 * model of 'aimall_backend_order_snapshots'.
 *
 * Authorization is typically granted to the customer who owns the order, the
 * respective seller, and administrators with audit permissions. Sensitive
 * historical data (such as payment details or personal information) is exposed
 * only per role-based access controls. This ensures compliance and customer
 * privacy.
 *
 * Useful for customers investigating past order events (returns,
 * modifications), sellers tracking fulfillment history, and admins handling
 * dispute resolution or compliance monitoring.
 *
 * @param props.connection
 * @param props.orderId Target order's universally unique identifier (UUID) for
 *   which to retrieve all snapshot records.
 * @path /aimall-backend/seller/orders/:orderId/orderSnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /**
     * Target order's universally unique identifier (UUID) for which to
     * retrieve all snapshot records.
     */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendOrderSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/orders/:orderId/orderSnapshots",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/orderSnapshots`;
  export const random = (): IPageIAimallBackendOrderSnapshot =>
    typia.random<IPageIAimallBackendOrderSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter audit snapshots of a specific order (Order Snapshots table).
 *
 * Perform a filtered, paginated search over the audit snapshot records for a
 * given order. Enables clients and administrators to query for specific
 * snapshot eventsâ€”such as those within a certain date range, of particular
 * types, or matching structured metadata as stored in the
 * 'aimall_backend_order_snapshots' table.
 *
 * The operation requires at least an orderId and may support additional filter
 * fields (type, timestamp range, etc.) as per the request body schema. Access
 * control mimics the GET endpoint but typically allows more granular extraction
 * suitable for analytics and compliance.
 *
 * Business rules ensure visibility and audit constraints are enforced; admins
 * may have broader scope, while regular users' access is limited to their own
 * records.
 *
 * @param props.connection
 * @param props.orderId Target order's universally unique identifier (UUID) to
 *   filter related snapshot records.
 * @param props.body Request body specifying filtering, sorting, or pagination
 *   criteria for order snapshots.
 * @path /aimall-backend/seller/orders/:orderId/orderSnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Target order's universally unique identifier (UUID) to filter related
     * snapshot records.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Request body specifying filtering, sorting, or pagination criteria
     * for order snapshots.
     */
    body: IAimallBackendOrderSnapshot.IRequest;
  };
  export type Body = IAimallBackendOrderSnapshot.IRequest;
  export type Response = IPageIAimallBackendOrderSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/aimall-backend/seller/orders/:orderId/orderSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/orderSnapshots`;
  export const random = (): IPageIAimallBackendOrderSnapshot =>
    typia.random<IPageIAimallBackendOrderSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single audit snapshot for an order (Order Snapshots table).
 *
 * Retrieve a detailed snapshot record for a specified order and snapshot event.
 * Returns the serialized history of the order at that snapshot, including all
 * base fields and structured metadata per the 'aimall_backend_order_snapshots'
 * schema.
 *
 * Access is checked for order ownership (customer), fulfillment actor (seller),
 * and authorized administrator. Used for compliance reviews, dispute handling,
 * or technical support scenarios to reconstruct order state at critical
 * points.
 *
 * Related APIs: order listing, order detail, order history. Errors are returned
 * if the snapshot or order does not exist or is not accessible by the user
 * role.
 *
 * @param props.connection
 * @param props.orderId UUID of the target order.
 * @param props.orderSnapshotId UUID identifying the specific snapshot record to
 *   fetch.
 * @path /aimall-backend/seller/orders/:orderId/orderSnapshots/:orderSnapshotId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the target order. */
    orderId: string & tags.Format<"uuid">;

    /** UUID identifying the specific snapshot record to fetch. */
    orderSnapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendOrderSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/orders/:orderId/orderSnapshots/:orderSnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/orderSnapshots/${encodeURIComponent(props.orderSnapshotId ?? "null")}`;
  export const random = (): IAimallBackendOrderSnapshot =>
    typia.random<IAimallBackendOrderSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("orderSnapshotId")(() =>
        typia.assert(props.orderSnapshotId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

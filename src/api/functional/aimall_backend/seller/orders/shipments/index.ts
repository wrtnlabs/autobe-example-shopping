import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPageIAimallBackendShipment } from "../../../../../structures/IPageIAimallBackendShipment";
import { IAimallBackendShipment } from "../../../../../structures/IAimallBackendShipment";

/**
 * Retrieve shipments (fulfillment events) for an order from
 * aimall_backend_shipments.
 *
 * Retrieve all shipment records linked to a specific order. This operation
 * provides full delivery history and logistics tracking for both customers and
 * sellers. It queries the aimall_backend_shipments table, presenting structured
 * details such as carrier, tracking number, shipment status, and
 * shipping/delivery times.
 *
 * User access is enforced: only the customer who placed the order, the seller
 * fulfilling it, or an administrator may view shipment data, to protect
 * logistics privacy and compliance requirements. The endpoint is primarily used
 * for customer notifications, seller logistics dashboards, and admin audit
 * purposes.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose shipments are being
 *   listed.
 * @path /aimall-backend/seller/orders/:orderId/shipments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose shipments are being listed. */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IPageIAimallBackendShipment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/orders/:orderId/shipments",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments`;
  export const random = (): IPageIAimallBackendShipment =>
    typia.random<IPageIAimallBackendShipment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a shipment record for an order in aimall_backend_shipments.
 *
 * Add a new shipment record to an order by submitting fulfillment details,
 * including destination address, carrier, tracking number, status, and shipping
 * times. The request body must conform to the IAimallBackendShipment.ICreate
 * structure, providing a full, atomic snapshot of the shipment event as
 * required by audit, logistics, and compliance rules. Only authorized users,
 * usually sellers or administrators, may create shipment records to enforce
 * business and compliance logic.
 *
 * Returned data contains all shipment event properties, supporting integration
 * to downstream notification, tracking, and audit/SLAs.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order to which the shipment
 *   event will be added.
 * @param props.body Shipment creation details: address, carrier, tracking, and
 *   status.
 * @path /aimall-backend/seller/orders/:orderId/shipments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the order to which the shipment event will be
     * added.
     */
    orderId: string & tags.Format<"uuid">;

    /** Shipment creation details: address, carrier, tracking, and status. */
    body: IAimallBackendShipment.ICreate;
  };
  export type Body = IAimallBackendShipment.ICreate;
  export type Response = IAimallBackendShipment;

  export const METADATA = {
    method: "POST",
    path: "/aimall-backend/seller/orders/:orderId/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments`;
  export const random = (): IAimallBackendShipment =>
    typia.random<IAimallBackendShipment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed shipment event (fulfillment) by ID for an order from
 * aimall_backend_shipments.
 *
 * Fetch details of a specific shipment record tied to an order from
 * aimall_backend_shipments. Used for customer notification, seller logistics
 * tracking, and admin compliance/audit workflows. The orderId and shipmentId
 * parameters provide full referential linkage and ensure correct data
 * integrity. Returns structured information including carrier, tracking number,
 * status, and timestamps for shipping events.
 *
 * Access control ensures that only relevant actors may view the shipment
 * record, supporting secure logistics and privacy requirements in e-commerce
 * operations.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order record.
 * @param props.shipmentId Unique identifier of the shipment record within the
 *   order.
 * @path /aimall-backend/seller/orders/:orderId/shipments/:shipmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent order record. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the shipment record within the order. */
    shipmentId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendShipment;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/orders/:orderId/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IAimallBackendShipment =>
    typia.random<IAimallBackendShipment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a shipment record for a given order in aimall_backend_shipments.
 *
 * Update a shipment record for an order, reflecting new information such as
 * status updates, tracking changes, or carrier modifications. This endpoint
 * supports operational delivery workflows and SLA compliance tracking by
 * logistics teams and administrators. Required identifiers orderId and
 * shipmentId ensure correct row targeting; the request body must conform to the
 * IAimallBackendShipment.IUpdate structure. Access is restricted for compliance
 * and logistics security.
 *
 * The updated shipment record is returned, providing a full current view for
 * dashboard and analytics integration.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order.
 * @param props.shipmentId Unique identifier of the shipment to update.
 * @param props.body Fields to update (e.g., carrier, tracking number, status)
 *   for the shipment record.
 * @path /aimall-backend/seller/orders/:orderId/shipments/:shipmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the shipment to update. */
    shipmentId: string & tags.Format<"uuid">;

    /**
     * Fields to update (e.g., carrier, tracking number, status) for the
     * shipment record.
     */
    body: IAimallBackendShipment.IUpdate;
  };
  export type Body = IAimallBackendShipment.IUpdate;
  export type Response = IAimallBackendShipment;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/seller/orders/:orderId/shipments/:shipmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IAimallBackendShipment =>
    typia.random<IAimallBackendShipment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete (hard) a shipment record from an order in
 * aimall_backend_shipments.
 *
 * Remove (hard delete) a shipment record linked to an order from the
 * aimall_backend_shipments table. This delete is permanent due to lack of a
 * soft-delete schema field. Only actors directly responsible for the order
 * fulfillment (seller, admin) are permitted to invoke this endpoint. Common
 * scenarios include error correction, fulfillment rollback, or audit-driven
 * cleanup. Strong validation prevents removal if it impacts compliance or
 * tracking integrity.
 *
 * Returns no content; success is indicated by HTTP status only.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose shipment record is
 *   being deleted.
 * @param props.shipmentId Unique identifier of the shipment record to remove.
 * @path /aimall-backend/seller/orders/:orderId/shipments/:shipmentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the order whose shipment record is being
     * deleted.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the shipment record to remove. */
    shipmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aimall-backend/seller/orders/:orderId/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

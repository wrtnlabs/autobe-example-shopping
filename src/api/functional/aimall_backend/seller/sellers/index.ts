import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAimallBackendSeller } from "../../../../structures/IAimallBackendSeller";

/**
 * Fetch a single seller record by sellerId (aimall_backend_sellers).
 *
 * Retrieve a specific seller's detailed information using their unique
 * sellerId. Returns all schema fields such as business_name, email,
 * contact_phone, status, created/updated timestamps.
 *
 * This endpoint is used by admins for merchant monitoring and by sellers to
 * fetch their own account record. Access is restricted by role: sellers can
 * access their accounts; admins can access any seller.
 *
 * Handles errors such as missing sellerId or insufficient permissions.
 *
 * @param props.connection
 * @param props.sellerId The unique identifier (UUID) for the seller to fetch.
 * @path /aimall-backend/seller/sellers/:sellerId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) for the seller to fetch. */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IAimallBackendSeller;

  export const METADATA = {
    method: "GET",
    path: "/aimall-backend/seller/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aimall-backend/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IAimallBackendSeller =>
    typia.random<IAimallBackendSeller>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a seller's data (aimall_backend_sellers).
 *
 * Update the details of an existing seller. Supply the sellerId and update
 * fields to apply. This directly modifies aimall_backend_sellers fields for the
 * record.
 *
 * Role constraints: only admin may edit other sellers; self-edit requires owner
 * match. Changes are moderated for compliance if necessary.
 *
 * Error responses for non-existent sellerId or access violation are possible.
 *
 * @param props.connection
 * @param props.sellerId The unique identifier (UUID) of the seller to update.
 * @param props.body Fields and values to update for the target seller.
 * @path /aimall-backend/seller/sellers/:sellerId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the seller to update. */
    sellerId: string & tags.Format<"uuid">;

    /** Fields and values to update for the target seller. */
    body: IAimallBackendSeller.IUpdate;
  };
  export type Body = IAimallBackendSeller.IUpdate;
  export type Response = IAimallBackendSeller;

  export const METADATA = {
    method: "PUT",
    path: "/aimall-backend/seller/sellers/:sellerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aimall-backend/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IAimallBackendSeller =>
    typia.random<IAimallBackendSeller>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAuditLog } from "../../structures/IAuditLog";
import { IPageIAuditLog } from "../../structures/IPageIAuditLog";

/**
 * Create a new audit log entry for user/system/admin actions.
 *
 * This endpoint creates a new audit log entry, mapping directly to the
 * 'audit_logs' table. On POST, the system validates the payload fields
 * (user_id, event_type, event_reason, event_context, actor_id) for integrity
 * and requiredness.
 *
 * Audit log creation is privileged to system and admin users. Every action
 * generates an immutable entry, is never updatable or deletable (except via
 * dedicated compliance procedure), and is returned as a fully atomic audit log
 * object. Creating audit logs is a critical compliance featureâ€”errors in
 * logging must be alerted/escalated for system monitoring.
 *
 * If provided fields are invalid or not authorized, the endpoint returns a
 * validation/permission error. On success, the new record is returned.
 * Notification or side effects (e.g., compliance alerts) are handled
 * separately, outside this endpoint.
 *
 * @param props.body Payload for audit log creation, matching IAuditLog.ICreate
 *   (user_id, event_type, event_reason, event_context, actor_id).
 * @path /auditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Payload for audit log creation, matching IAuditLog.ICreate (user_id,
     * event_type, event_reason, event_context, actor_id).
     */
    body: IAuditLog.ICreate;
  };
  export type Body = IAuditLog.ICreate;
  export type Response = IAuditLog;

  export const METADATA = {
    method: "POST",
    path: "/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auditLogs";
  export const random = (g?: Partial<typia.IRandomGenerator>): IAuditLog =>
    typia.random<IAuditLog>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a filtered, paginated list of audit logs.
 *
 * This list endpoint provides filtered access to audit log entries, mapping to
 * the 'audit_logs' table. Admins or compliance officers can query logs by
 * user_id, event_type, event_reason, actor_id, or date ranges. Pagination and
 * sorting are supported, specified in the request body (per
 * IAudiLog.IRequestSearch).
 *
 * Returned results contain individual audit log atomic records, never
 * denormalized or cross-joined data. Only users authorized for compliance/audit
 * review can use this endpoint. If no records match the query, returns an empty
 * result set with pagination info.
 *
 * All accesses to audit logs are themselves logged in the system for monitoring
 * of compliance data access. Non-admin or unauthorized access attempts result
 * in a forbidden error. Request/response structure adheres to patch-based list
 * pattern, per compliance and admin dashboard requirements.
 *
 * @param props.body Search, filter, and pagination inputs for audit logs
 *   (IAuditLog.IRequestSearch).
 * @path /auditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Search, filter, and pagination inputs for audit logs
     * (IAuditLog.IRequestSearch).
     */
    body: IAuditLog.IRequestSearch;
  };
  export type Body = IAuditLog.IRequestSearch;
  export type Response = IPageIAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auditLogs";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIAuditLog =>
    typia.random<IPageIAuditLog>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a single audit log entry by ID.
 *
 * This endpoint retrieves a specific audit log by its unique ID, mapping
 * directly to the 'audit_logs' table. Field-level atomicity is strictly
 * preserved: no joined or denormalized entity data in the response (all
 * references must be followed via additional calls).
 *
 * It serves compliance, monitoring, and troubleshooting needs by allowing
 * admins/auditors to inspect any logged system/user/RBAC action. Access is
 * strictly restricted to users with compliance/audit privileges. If the audit
 * log with the provided ID is not found, returns a not-found error. All
 * successful and failed accesses themselves are audit-logged, maintaining an
 * immutable compliance chain.
 *
 * @param props.id Unique identifier of the audit log entry to retrieve.
 * @path /auditLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the audit log entry to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAuditLog =>
    typia.random<IAuditLog>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an audit log entry by ID under strict compliance process.
 *
 * This endpoint allows updates to an audit log entry by its unique ID, for
 * exceptional, compliance-driven scenarios (such as correcting an error in
 * logged context, or retroactively attaching justification/notes). Normally,
 * audit logs are immutable, but this endpoint is guarded by strict policy and
 * triggers secondary audit entries for any update.
 *
 * The update payload must match permitted/required fields in IAuditLog.IUpdate,
 * and the record to be updated must exist (not deleted or missing). All updates
 * are themselves logged for an immutable compliance history. This flexibility
 * is required for compliance regimes where correction/annotation of audit
 * records is permitted under documented processes.
 *
 * If unauthorized, missing, or invalid, the call is rejected with an
 * appropriate error. Only admins/compliance users (per RBAC assignment) may
 * update audit records. Updated record is returned after a successful update,
 * and side effects (e.g., notification) are handled via system rules outside
 * this endpoint.
 *
 * @param props.id Unique identifier for the audit log to update.
 * @param props.body Audit log update payload, matching IAuditLog.IUpdate
 *   (permitted fields only, e.g., event_reason, event_context).
 * @path /auditLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier for the audit log to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Audit log update payload, matching IAuditLog.IUpdate (permitted
     * fields only, e.g., event_reason, event_context).
     */
    body: IAuditLog.IUpdate;
  };
  export type Body = IAuditLog.IUpdate;
  export type Response = IAuditLog;

  export const METADATA = {
    method: "PUT",
    path: "/auditLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IAuditLog =>
    typia.random<IAuditLog>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete (archive) an audit log entry (audit_logs table), enforcing RBAC,
 * not permanent removal.
 *
 * This operation performs a soft delete (not physical removal) of an audit log
 * entry identified by id. The audit_logs table records user actions and
 * critical events, and deleting a row means marking it as deleted (soft-delete)
 * for compliance, not erasing the immutable history. Permissions are
 * identity-checked through RBAC; only audit personnel or escalated admins may
 * delete. The API enforces that only accounts with explicit permission can
 * remove audit logs, and all such actions are themselves audit-logged with full
 * detail. A successful request marks audit_logs.deleted_at for the record.
 * Attempting to delete a non-existent or already deleted record produces a
 * clear error; forbidden attempts are also blocked. This operation must be used
 * alongside RBAC assignment/validation operations and in compliance with
 * retention policy logic.
 *
 * @param props.id Target audit log's unique ID to be soft deleted
 * @path /auditLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target audit log's unique ID to be soft deleted */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IAuditLog.ISoftDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/auditLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auditLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAuditLog.ISoftDeleteResult =>
    typia.random<IAuditLog.ISoftDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IBoardPost } from "../../structures/IBoardPost";
import { IPageIBoardPost } from "../../structures/IPageIBoardPost";

/**
 * Create a new board post (board_posts table).
 *
 * Creates a new board post, either as a top-level thread message (parent_id
 * null) or as a reply to an existing post (parent_id set). Fields specified are
 * thread_id, parent_id (optional), author_id (typically implied by session),
 * and body (markdown/text). Creation is only allowed for users meeting
 * board/thread permissions per config. All attempts and payloads are
 * audit-logged.
 *
 * Schema: board_posts - id (uuid), thread_id, parent_id, author_id, body,
 * created_at. Does not support updating posts here (use PUT for edits).
 *
 * To get a post, use GET /boardPosts/{id}. To list/search posts, use PATCH
 * /boardPosts.
 *
 * @param props.body Payload for new board post (thread_id, parent_id
 *   [optional], body).
 * @path /boardPosts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Payload for new board post (thread_id, parent_id [optional], body). */
    body: IBoardPost.ICreate;
  };
  export type Body = IBoardPost.ICreate;
  export type Response = IBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/boardPosts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/boardPosts";
  export const random = (g?: Partial<typia.IRandomGenerator>): IBoardPost =>
    typia.random<IBoardPost>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List, filter, and paginate board posts (board_posts table).
 *
 * Returns a paginated, filterable list of board posts, supporting search
 * parameters such as thread_id, parent_id (for reply chains), author_id, date
 * range, or content keyword. Pagination via typical (page, pageSize) controls,
 * sorting by created_at and optionally thread/parent order.
 *
 * Security: Any authenticated user (subject to board/thread permission;
 * enforced via thread->board->board_config). Sensitive/tombstoned (deleted) or
 * flagged posts only visible to moderators/admins.
 *
 * Schema: board_posts - fields include id, thread_id, parent_id, author_id,
 * body, created_at, deleted_at. Read-only for normal users; moderation tools
 * may update/delete. Supports powering both forum/public display and admin
 * workflows.
 *
 * To get a single post, use GET /boardPosts/{id}. To create a new post, use
 * POST /boardPosts.
 *
 * @param props.body Paging and filtering parameters for board post listing.
 * @path /boardPosts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Paging and filtering parameters for board post listing. */
    body: IBoardPost.IRequest;
  };
  export type Body = IBoardPost.IRequest;
  export type Response = IPageIBoardPost;

  export const METADATA = {
    method: "PATCH",
    path: "/boardPosts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/boardPosts";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIBoardPost => typia.random<IPageIBoardPost>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve details of a board post by id (board_posts table).
 *
 * Fetches a single board post by uuid, returning full post details (id,
 * thread_id, parent_id if reply, author_id, content, created_at, deleted_at).
 * If the post is deleted/hidden, permissions and board/thread config apply for
 * allowed access.
 *
 * Security: Any user/role permitted to view board posts for given thread/board
 * may access this endpoint. Moderators/admins may use it for moderation tools.
 * All accesses are audit-logged for compliance.
 *
 * Schema: board_posts - No joins on referenced entities; base type only.
 * Replies and thread relationships resolved via parent/thread_id fields, not
 * deeply through this endpoint.
 *
 * @param props.id The id of the board post to retrieve.
 * @path /boardPosts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The id of the board post to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/boardPosts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/boardPosts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IBoardPost =>
    typia.random<IBoardPost>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Edit a board post by id (board_posts table).
 *
 * Updates a board post by id, modifying the body content and, if permissions
 * allow, moving it to a new parent (changing parent_id). Author or
 * moderators/admins (see board/thread config) may patch the post. All changes
 * are logged and versioned for auditâ€”and content history is preserved for
 * compliance.
 *
 * Schema: board_posts - updatable fields are body, parent_id. The created_at
 * timestamp remains fixed. Editing logic checks update eligibility (such as
 * time window, role, and moderation settings). Soft deletion not handled here
 * (see DELETE endpoint if implemented).
 *
 * @param props.id The id of the board post to edit.
 * @param props.body Payload specifying new body content and/or parent_id for
 *   moving replies.
 * @path /boardPosts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The id of the board post to edit. */
    id: string & tags.Format<"uuid">;

    /**
     * Payload specifying new body content and/or parent_id for moving
     * replies.
     */
    body: IBoardPost.IUpdate;
  };
  export type Body = IBoardPost.IUpdate;
  export type Response = IBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/boardPosts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/boardPosts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IBoardPost =>
    typia.random<IBoardPost>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a specific board post (Engagement Boards: board_posts table) by
 * ID, maintaining audit trail.
 *
 * This API operation allows authorized users (the original author, a designated
 * board moderator, or an administrator with sufficient privileges) to mark a
 * board post as deleted. The operation targets the 'board_posts' entity in the
 * Engagement & Board System domain.
 *
 * Upon invocation, the 'deleted_at' timestamp is set for the specified post
 * rather than physically removing the record, to meet compliance, auditability,
 * and regulatory requirements (GDPR/CCPA, as described in the requirements and
 * the Prisma schema). This means all deleted posts are still available for
 * audit and export as necessary but are hidden from standard user queries
 * unless the user is authorized for advanced/administrative visibility.
 *
 * The 'id' parameter must represent a valid existing board post. The backend
 * must verify that the acting user has the right to remove the post (either
 * original author, moderator, or admin) according to RBAC
 * permissions/resources. Attempts to delete already-deleted or non-existing
 * posts must return appropriate error codes/messages.
 *
 * This is commonly used with PATCH (listing/searching posts), GET (retrieving
 * one), and PUT (updating); soft deletion maintains persistent history for all
 * board activity as per compliance and business requirements.
 *
 * @param props.id ID of the board post to soft-delete.
 * @path /boardPosts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the board post to soft-delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IBoardPost.ISoftDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/boardPosts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/boardPosts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IBoardPost.ISoftDeleteResult =>
    typia.random<IBoardPost.ISoftDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

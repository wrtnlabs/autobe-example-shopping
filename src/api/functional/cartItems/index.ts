import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICartItem } from "../../structures/ICartItem";
import { IPageICartItem } from "../../structures/IPageICartItem";

/**
 * Create a new cart item in the cart_items table.
 *
 * This API endpoint creates a new cart_items record, representing the addition
 * of a product variant to a user’s persistent or guest cart. Clients must
 * supply a valid cart reference, product_variant_id, quantity, and optional
 * note fields, as described by the schema for atomic, normalized cart item
 * creation.
 *
 * All creation events are validated for business rules (e.g., cart must exist
 * and not be deleted, variant must be valid, user/session scoping must be
 * respected). On success, the newly created cart item is returned with its
 * unique ID.
 *
 * Changes to the cart and item tables are audit-logged in accordance with
 * compliance requirements. Duplicate entries for the same cart/variant are
 * rejected—quantity mods must use PUT instead.
 *
 * Error responses are issued for failed validations, permission issues, or
 * logical conflicts (duplicate, full cart, inventory violations). For batch and
 * search, use PATCH /cartItems.
 *
 * @param props.body New cart item details (cart, product variant, quantity,
 *   note).
 * @path /cartItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** New cart item details (cart, product variant, quantity, note). */
    body: ICartItem.ICreate;
  };
  export type Body = ICartItem.ICreate;
  export type Response = ICartItem;

  export const METADATA = {
    method: "POST",
    path: "/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/cartItems";
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartItem =>
    typia.random<ICartItem>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a paginated list of cart items from the cart_items table.
 *
 * This API operation queries the cart_items table for all item records based on
 * optional search, filter, and pagination criteria. Designed for use in cart
 * interfaces or batch item listings, this endpoint supports business
 * requirements around persistent cart management, cart migrations, and
 * audit/report flows as outlined in Cart & Order.
 *
 * Clients can request filtered lists (for example, by cart ID, product variant,
 * date range, or note) as well as pagination and sorting per API standards. The
 * operation is strictly read-only and does not modify any data.
 *
 * Full RBAC and session ownership/scoping are enforced to ensure security.
 * Error cases, such as invalid filters or RBAC violations, yield clear error
 * codes.
 *
 * For retrieving single items, use GET /cartItems/{id}. To add or remove items
 * use POST or DELETE accordingly. The endpoint is also used in compliance
 * exports and analytics queries, and all responses are audit-logged for
 * traceability.
 *
 * @param props.body Listing, pagination, and filter options for cart items.
 * @path /cartItems
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Listing, pagination, and filter options for cart items. */
    body: ICartItem.IRequest;
  };
  export type Body = ICartItem.IRequest;
  export type Response = IPageICartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/cartItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/cartItems";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageICartItem =>
    typia.random<IPageICartItem>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a cart item by its ID from the cart_items table.
 *
 * This API operation fetches the details of a single cart item from the
 * cart_items table using its unique identifier. The operation retrieves all
 * attributes of the cart item, such as its linked cart, referenced product
 * variant, quantity, optional note, creation and update timestamps, and
 * soft-delete state.
 *
 * This endpoint is primarily used for cart detail UIs, auditing user carts, and
 * compliance troubleshooting. All responses are subject to contextual RBAC and
 * session/user validation—the caller must be authorized for the referenced
 * cart.
 *
 * Related endpoints include listing items (PATCH /cartItems), modifying items
 * (PUT), adding (POST), or deleting individual items (DELETE).
 *
 * On error (item not found, RBAC violation, deleted), an appropriate error code
 * and message are returned. Access and retrieval are always audit-logged for
 * compliance.
 *
 * @param props.id Cart item unique identifier.
 * @path /cartItems/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Cart item unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICartItem;

  export const METADATA = {
    method: "GET",
    path: "/cartItems/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/cartItems/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartItem =>
    typia.random<ICartItem>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Replace or update an existing cart item by its ID in the cart_items table.
 *
 * This API operation updates an existing entry in the cart_items table,
 * replacing all atomic fields for the specified cart item. Fields that can be
 * updated include the referenced cart, product_variant, quantity, and
 * (optionally) the note. This supports Cart & Order requirements for dynamic,
 * real-time cart changes—for example, updating the quantity or swapping
 * options.
 *
 * Business logic requires that a cart item’s uniqueness is preserved (cart_id,
 * product_variant_id); the operation enforces no duplicates when updating.
 * Updating sets the 'updated_at' timestamp for full auditability.
 *
 * All changes are subject to cart-item validation, user/session context
 * checking, and RBAC enforcement. Errors are returned for permission
 * violations, non-existent cart items, or logical/data conflicts. Related
 * endpoints for adding or deleting items are defined on POST and DELETE of
 * /cartItems.
 *
 * @param props.id Unique identifier for the target cart item.
 * @param props.body Replacement cart item data.
 * @path /cartItems/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier for the target cart item. */
    id: string & tags.Format<"uuid">;

    /** Replacement cart item data. */
    body: ICartItem.IUpdate;
  };
  export type Body = ICartItem.IUpdate;
  export type Response = ICartItem;

  export const METADATA = {
    method: "PUT",
    path: "/cartItems/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/cartItems/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartItem =>
    typia.random<ICartItem>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a cart item by its ID in the cart_items table.
 *
 * This endpoint marks the referenced cart item as deleted (soft delete), by
 * updating its 'deleted_at' column in the cart_items table. The operation does
 * not physically remove cart item data, ensuring all actions are fully
 * auditable per Cart & Order and compliance requirements.
 *
 * Attempting to delete an item that is not present or already deleted returns
 * an error. Authorization is enforced by matching cart, user, or session scope.
 * Cart item removal triggers update of the parent cart's last update timestamp
 * for accurate recency tracking.
 *
 * Related endpoints include creation (POST), update (PUT), and batch query
 * (PATCH). All soft deletions are logged both for compliance and for the
 * possibility of undelete/recovery flows.
 *
 * RBAC and scoping are rigorously checked. This endpoint does not alter related
 * product, variant, or order data.—product removal must be done elsewhere.
 *
 * Returns the logically deleted cart item record as confirmation of the
 * operation.
 *
 * @param props.id Unique identifier for the cart item to delete.
 * @path /cartItems/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier for the cart item to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICartItem;

  export const METADATA = {
    method: "DELETE",
    path: "/cartItems/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/cartItems/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartItem =>
    typia.random<ICartItem>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

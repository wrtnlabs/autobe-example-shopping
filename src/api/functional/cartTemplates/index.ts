import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICartTemplate } from "../../structures/ICartTemplate";
import { IPageICartTemplate } from "../../structures/IPageICartTemplate";

/**
 * Create a new cart template in the cart_templates table.
 *
 * This API operation creates a new cart_templates record, representing a saved
 * user configuration for persistent, repeatable cart contents. It supports
 * functional requirements for persistent carts, allowing users to name, save,
 * and later load predefined cart configurations (see Cart & Order).
 *
 * Clients must provide a valid user reference, a template name, and other
 * required metadata (creation time, etc.). The new template is validated,
 * persisted, and returned with its assigned ID.
 *
 * All creations are logged for audit/compliance, and permission checks are
 * performed by matching session/user context. Name uniqueness is enforced per
 * user. Errors are returned for failed validation or business rule conflicts.
 *
 * For retrieving templates, use PATCH/GET endpoints. For updating or deleting,
 * see PUT/DELETE /cartTemplates/{id}.
 *
 * @param props.body Details for the new cart template (user ID, name).
 * @path /cartTemplates
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details for the new cart template (user ID, name). */
    body: ICartTemplate.ICreate;
  };
  export type Body = ICartTemplate.ICreate;
  export type Response = ICartTemplate;

  export const METADATA = {
    method: "POST",
    path: "/cartTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/cartTemplates";
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartTemplate =>
    typia.random<ICartTemplate>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a paginated list of cart templates from the cart_templates table.
 *
 * This API operation enables paginated querying of the cart_templates table,
 * returning cart template records according to search and filter criteria (by
 * user, name, creation date, etc.). Used in cart management UIs to display all
 * templates available to a user and/or an admin for analytics, repeat
 * purchases, and compliance reporting.
 *
 * Supports all business requirements for user-specific cart template
 * management. Only records not deleted (soft-deleted) are returned by default.
 * Filters and search parameters are accepted in the request body as per API
 * conventions.
 *
 * Related endpoints include retrieving a single template (GET
 * /cartTemplates/{id}) and creating, updating, or deleting templates. All
 * queries are auditable.
 *
 * @param props.body Paginated searching and filtering options for cart
 *   templates.
 * @path /cartTemplates
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Paginated searching and filtering options for cart templates. */
    body: ICartTemplate.IRequest;
  };
  export type Body = ICartTemplate.IRequest;
  export type Response = IPageICartTemplate;

  export const METADATA = {
    method: "PATCH",
    path: "/cartTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/cartTemplates";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageICartTemplate => typia.random<IPageICartTemplate>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a single cart template by ID from the cart_templates table.
 *
 * This API operation retrieves a cart template from the cart_templates table by
 * its unique ID, returning the full details of the template, such as its owner,
 * name, creation, and update info. Used in cart template management, repeat
 * purchase UIs, and admin batch & compliance review (as required by Cart &
 * Order).
 *
 * Authorization is enforced for user-owned templates (must match session user
 * or admin with appropriate permissions). If the template does not exist or is
 * soft deleted, the endpoint returns a not found error.
 *
 * This endpoint does not retrieve the full cart items for the template—item
 * details require a separate query. Every retrieval is audit-logged. Related
 * endpoints exist for batch query (PATCH), create (POST), update (PUT), or
 * delete (DELETE /cartTemplates/{id}).
 *
 * @param props.id Unique identifier for the cart template.
 * @path /cartTemplates/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier for the cart template. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICartTemplate;

  export const METADATA = {
    method: "GET",
    path: "/cartTemplates/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/cartTemplates/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartTemplate =>
    typia.random<ICartTemplate>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Replace or update an existing cart template by its ID in the cart_templates
 * table.
 *
 * This API operation updates or replaces a specific cart_template entity by its
 * unique ID. All relevant fields can be replaced, such as the user owner,
 * template name, or updated_at timestamp. This enables users to modify
 * previously saved templates for frequent or bulk purchases.
 *
 * The operation enforces that name uniqueness per user is maintained and that
 * only authorized sessions/admins can update a template. All changes are logged
 * for compliance.
 *
 * This operation does not affect underlying cart items—the template only holds
 * metadata and configuration references. Batch updates must use PATCH
 * /cartTemplates instead. Not found, conflict, or permission errors yield clear
 * message and code.
 *
 * @param props.id Unique identifier of the cart template to update.
 * @param props.body Replacement cart template data.
 * @path /cartTemplates/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the cart template to update. */
    id: string & tags.Format<"uuid">;

    /** Replacement cart template data. */
    body: ICartTemplate.IUpdate;
  };
  export type Body = ICartTemplate.IUpdate;
  export type Response = ICartTemplate;

  export const METADATA = {
    method: "PUT",
    path: "/cartTemplates/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/cartTemplates/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartTemplate =>
    typia.random<ICartTemplate>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a cart template by its ID in the cart_templates table.
 *
 * This endpoint marks a cart template as logically deleted (soft delete) based
 * on its unique ID, by updating the deleted_at field in the cart_templates
 * table. Actual record deletion is not performed to remain fully compliant with
 * regulatory, audit, and business logic requirements related to persistent
 * carts (as stated in Cart & Order).
 *
 * Authorization is strictly enforced by user/session or admin permission. On
 * success, the deleted template (with deleted_at set) is returned for
 * confirmation. If the template is not found or already deleted, an error is
 * issued.
 *
 * This operation does not alter related cart items or orders. To retrieve all
 * active templates, use PATCH /cartTemplates. For compliance and audit, every
 * deletion triggers full audit logging.
 *
 * @param props.id Unique identifier of the cart template to delete.
 * @path /cartTemplates/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the cart template to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICartTemplate;

  export const METADATA = {
    method: "DELETE",
    path: "/cartTemplates/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/cartTemplates/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICartTemplate =>
    typia.random<ICartTemplate>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

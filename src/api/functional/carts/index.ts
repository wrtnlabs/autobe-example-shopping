import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICart } from "../../structures/ICart";
import { IPageICart } from "../../structures/IPageICart";

/**
 * Create a new shopping cart (member or guest) with optional initial contents
 * (CartOrder.carts).
 *
 * This operation creates a new shopping cart (possibly with initial contents)
 * for the authenticated user or guest (session_token provided). The
 * CartOrder.carts table supports multiple carts per user or session (e.g.,
 * guest session and later migration to member).
 *
 * On creation, mandatory fields are: user_id (if authenticated, optional for
 * guest), and session_token (identifies guest cart until login). Optionally,
 * initial cart_items may be created.
 *
 * Business logic: Cart expiration is calculated on creation (configurable).
 * Duplicate cart creation with the same session_token/user is prevented
 * (enforced by DB unique constraints).
 *
 * Success returns full cart info (ID, status, items, expiry, etc.). Access is
 * restricted to the owner. Errors include violation of unique constraints,
 * invalid or expired session_token, and permission checks. This endpoint
 * complements cart listing, detail, and item-editing APIs.
 *
 * @param props.body Cart creation info (may include items, session_token,
 *   user_id).
 * @path /carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Cart creation info (may include items, session_token, user_id). */
    body: ICart.ICreate;
  };
  export type Body = ICart.ICreate;
  export type Response = ICart;

  export const METADATA = {
    method: "POST",
    path: "/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/carts";
  export const random = (g?: Partial<typia.IRandomGenerator>): ICart =>
    typia.random<ICart>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search the current user's shopping carts with pagination
 * (CartOrder.carts).
 *
 * Returns a paginated, filterable list of shopping carts owned by the current
 * user (including guest carts where session_token matches). The CartOrder.carts
 * table supports both user_id and session-based cart tracking. Supports
 * searching by cart status (active, expired), expiry window, and optionally
 * session_token (for guest/anonymous users).
 *
 * Results support pagination and sorting (e.g., by updated_at) to handle users
 * with multiple carts (frequent behavior with cart templates, guest/member, and
 * cross-device migration). RBAC ensures only the current user's carts are
 * returned.
 *
 * Business cases: resuming abandoned carts, cross-device shopping, cart
 * analytics, and migration on login. Errors include invalid search params or
 * permission denied for other users' carts.
 *
 * Relation to: cart detail (GET), create (POST), update (PUT), delete (DELETE).
 *
 * @param props.body Filter/search/paging info for cart listing.
 * @path /carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filter/search/paging info for cart listing. */
    body: ICart.IRequest;
  };
  export type Body = ICart.IRequest;
  export type Response = IPageICart;

  export const METADATA = {
    method: "PATCH",
    path: "/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/carts";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageICart =>
    typia.random<IPageICart>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve detail for a single cart owned by the user or guest
 * (CartOrder.carts).
 *
 * Returns all data and items for a specific shopping cart. The CartOrder.carts
 * table tracks authentic carts for users (member or guest). The ID parameter
 * identifies the cart; access is only granted for carts that belong to the
 * authenticated user or have a matching session_token (for guest flows).
 *
 * Returned detail includes cart status, items, last updated, expiration, and
 * links to product variants for the contained items.
 *
 * Business logic: attempting to access someone else's cart returns 'not found'
 * or 'permission denied' for privacy/compliance. Edge cases:
 * expired/soft-deleted carts may require special handling (e.g., display as
 * 'abandoned').
 *
 * Paired with cart list/search (PATCH), item editing (PUT/POST), and checkout
 * order creation APIs.
 *
 * @param props.id Cart unique ID for lookup.
 * @path /carts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Cart unique ID for lookup. */
    id: string;
  };
  export type Response = ICart;

  export const METADATA = {
    method: "GET",
    path: "/carts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/carts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICart =>
    typia.random<ICart>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Replace or update an existing cart by its ID in the carts table.
 *
 * This API operation allows updating or replacing the persistent shopping cart
 * identified by the provided cart ID. The carts table represents user or
 * session scoped shopping carts, supporting both guest and member flows as
 * outlined in Cart & Order requirements. The operation requires a full update
 * of the atomic cart state, such as user assignment (migrating guest to
 * member), session token changes (e.g., after login), or updating expiration
 * logic.
 *
 * When a cart is updated, new metadata (like extension of expiry or session
 * handoff) triggers compliance tracking via audit fields (e.g., updated_at).
 * User and session linkage are validated; associated cart items are NOT
 * affected and remain intact unless separately updated through cart item
 * endpoints. All changes are strictly audit-logged to meet regulatory
 * traceability.
 *
 * This operation enforces full replacement of the specified cart resource, not
 * partial patching. In accordance with soft delete policy, 'deleted_at' may be
 * set to force logical deletion.
 *
 * Related operations include creating a new cart (POST /carts) or deleting a
 * cart (DELETE /carts/{id}). For managing cart items, dedicated endpoints
 * (e.g., /cartItems) are used.
 *
 * On error, validation failures (invalid user/session or expired cart) return
 * explicit error codes. Soft delete compliance is enforced in all flows by
 * marking 'deleted_at', not physical deletion.
 *
 * @param props.id Unique identifier for the target cart.
 * @param props.body Updated cart entity data.
 * @path /carts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier for the target cart. */
    id: string & tags.Format<"uuid">;

    /** Updated cart entity data. */
    body: ICart.IUpdate;
  };
  export type Body = ICart.IUpdate;
  export type Response = ICart;

  export const METADATA = {
    method: "PUT",
    path: "/carts/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/carts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICart =>
    typia.random<ICart>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a cart by its ID in the carts table.
 *
 * This API operation performs a logical (soft) deletion of the persistent
 * shopping cart referenced by the provided cart ID. The carts table enforces
 * soft delete across all shopping carts in the system to meet compliance, full
 * audit, and reversibility requirements specified in Cart & Order.
 *
 * When invoked, this endpoint updates the 'deleted_at' column for the specified
 * cart record, marking it as deleted but retaining the record for later audit
 * analysis or undelete flows if necessary. Attempting to delete a non-existent
 * or already deleted cart returns an error with reason.
 *
 * Related endpoints include creating a cart (POST /carts), updating a cart (PUT
 * /carts/{id}), and managing cart items separately. Carts must be referenced
 * using their unique identifier and must match RBAC and session ownership rules
 * to protect user/session scoping integrity.
 *
 * No physical deletion occurs; full compliance with GDPR, CCPA, and regional
 * audit laws is enforced. This endpoint does not affect related cart items,
 * which must be deleted via dedicated cartItem endpoints if needed.
 *
 * @param props.id Unique identifier of the cart to delete.
 * @path /carts/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the cart to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ICart;

  export const METADATA = {
    method: "DELETE",
    path: "/carts/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/carts/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ICart =>
    typia.random<ICart>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

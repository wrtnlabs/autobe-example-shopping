import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IExchange } from "../../structures/IExchange";
import { IPageIExchange } from "../../structures/IPageIExchange";

/**
 * Create a new product exchange request for an order item (after-sales).
 *
 * Registers a new exchange event in the exchanges table, tying to a target
 * order item and user (requester), with provided reason, workflow annotation,
 * and organizational data. Validation ensures the order item is eligible (not
 * already returned/exchanged), business logic is followed, and initiating user
 * permissions are checked (customers, sellers, or admins). Upon creation,
 * exchange status starts at 'requested', to be transitioned by further workflow
 * endpoints (such as approval, shipment, completion).
 *
 * Storefront UIs or service bots use this endpoint for after-sales exchanges;
 * audit trails and workflow dependencies reference this entity for complete
 * compliance.
 *
 * Errors: Ineligible order item, business rule violations, permission denials
 * are handled with standard API error contracts.
 *
 * @param props.body Exchange creation payload with target order item, user,
 *   reason, workflow context.
 * @path /exchanges
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Exchange creation payload with target order item, user, reason,
     * workflow context.
     */
    body: IExchange.ICreate;
  };
  export type Body = IExchange.ICreate;
  export type Response = IExchange;

  export const METADATA = {
    method: "POST",
    path: "/exchanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/exchanges";
  export const random = (g?: Partial<typia.IRandomGenerator>): IExchange =>
    typia.random<IExchange>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a paginated, filtered list of exchange records (after-sales
 * subsystem).
 *
 * This endpoint returns a paginated and filterable list of exchange requests,
 * enabling advanced UI search/reporting (e.g., by user, item, date, status, or
 * exchange reason). Exchange records are created when users initiate an
 * exchange for a purchased order item (wrong size/color, etc). Returned fields
 * include all atomic/normalized columns: order item, user, reason, status,
 * timestamps.
 *
 * Security: RBAC enforcement ensures only permitted users see results
 * (customers see their own, sellers/admins see broader scope). All returned
 * data respects privacy masking as required by API policy.
 *
 * Related endpoints include detail, creation, modification, and audit log
 * retrieval for exchanges. List result may be used in analytics/reporting.
 *
 * Errors: Invalid search parameters, authorization, or backend errors follow
 * standardized policy.
 *
 * @param props.body Exchange list/retrieval/search filter request (paging,
 *   filters).
 * @path /exchanges
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Exchange list/retrieval/search filter request (paging, filters). */
    body: IExchange.IRequest;
  };
  export type Body = IExchange.IRequest;
  export type Response = IPageIExchange;

  export const METADATA = {
    method: "PATCH",
    path: "/exchanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/exchanges";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIExchange =>
    typia.random<IPageIExchange>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve details for a specified exchange record.
 *
 * Returns complete, atomic record of the specified exchange—including order
 * item reference, requesting user, exchange reason, workflow status,
 * annotations, and timestamps. Access is RBAC-guarded. Customers may only view
 * their own; sellers/admins may access broader record sets as required by
 * operational scope.
 *
 * This endpoint is integral to after-sales and compliance processes—details may
 * be used in customer support, processing, auditing, or dispute resolution.
 * Also serves as a prerequisite call for allowed workflow actions
 * (approve/ship/complete/cancel exchange).
 *
 * Errors: 404 for not found or deleted records; RBAC errors for unauthorized
 * access.
 *
 * @param props.id Exchange's unique identifier (UUID) to retrieve.
 * @path /exchanges/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Exchange's unique identifier (UUID) to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IExchange;

  export const METADATA = {
    method: "GET",
    path: "/exchanges/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/exchanges/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IExchange =>
    typia.random<IExchange>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update workflow status or fields for an existing exchange record
 * (after-sales).
 *
 * Authorized actors use this endpoint to update a specific exchange record,
 * reflecting workflow events such as approval, shipping, completion, or
 * rejection. Permissible update fields include status, comment/annotations, and
 * business reasonings (e.g., admin override, resolution note). Enforcement of
 * state transitions is via business logic (e.g., cannot alter completed
 * exchanges).
 *
 * RBAC: Access is strictly permission-checked; only permitted users, sellers,
 * or admins can modify records, changes are always audit-logged. Edits outside
 * allowed transitions are rejected with error codes.
 *
 * Audit: All changes logged for audit/compliance. Downstream effects (e.g.,
 * inventory update) are executed by workflow subsystems as required, not by
 * this API directly.
 *
 * Errors: RBAC or workflow violations, attempts to update deleted or completed
 * exchanges return errors.
 *
 * @param props.id Exchange record's unique identifier (UUID) to update.
 * @param props.body Exchange update information and workflow status/request.
 * @path /exchanges/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Exchange record's unique identifier (UUID) to update. */
    id: string & tags.Format<"uuid">;

    /** Exchange update information and workflow status/request. */
    body: IExchange.IUpdate;
  };
  export type Body = IExchange.IUpdate;
  export type Response = IExchange;

  export const METADATA = {
    method: "PUT",
    path: "/exchanges/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/exchanges/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IExchange =>
    typia.random<IExchange>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete an exchange record for after-sales compliance/audit (CartOrder
 * domain).
 *
 * This operation sets the deleted_at timestamp on a specified exchange record,
 * marking it as deleted while preserving all history and data for anti-fraud or
 * compliance. Only permitted when business rules allow (must not be active
 * beyond certain workflow stages, RBAC enforced). Results in exclusion from
 * standard customer views, but history/audit logs preserve event for reference,
 * reporting, or legal use.
 *
 * RBAC/permissions: Only the owner, seller, or admin may perform soft-deletion,
 * and only when policy permits. Attempts to delete a non-existent or
 * already-deleted (or completed/locked) record return standardized errors.
 *
 * Audit: Event is logged for compliance export.
 *
 * Note: This does not reverse shipment/inventory updates or refund
 * logic—related effects should be validated downstream in operational or admin
 * UIs.
 *
 * @param props.id Exchange record's unique identifier (UUID) to delete.
 * @path /exchanges/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Exchange record's unique identifier (UUID) to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IExchange;

  export const METADATA = {
    method: "DELETE",
    path: "/exchanges/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/exchanges/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IExchange =>
    typia.random<IExchange>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

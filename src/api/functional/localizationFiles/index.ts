import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ILocalizationFile } from "../../structures/ILocalizationFile";
import { IPageILocalizationFile } from "../../structures/IPageILocalizationFile";

/**
 * Add a new i18n localization file record (localization_files table).
 *
 * This API creates a new localization file metadata record, validating for
 * unique [channel_id, file_name, version] as required by the localization_files
 * Prisma schema. All fields—file_name, channel_id, uploaded_by, upload time,
 * file_url, version—must be present and meet normalization rules. Uploader
 * permission is checked and event is audit-logged for compliance. On successful
 * insert, record is returned in full detail. Duplicates or unauthorized
 * attempts return clear constraint/permission errors. Soft delete is not
 * available via this entry. Associated endpoints: PATCH for list, GET for
 * detail, PUT for update, DELETE for removal.
 *
 * @param props.body All required metadata/fields for localization file upload,
 *   including file URL, name, channel, version, and uploader.
 * @path /localizationFiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * All required metadata/fields for localization file upload, including
     * file URL, name, channel, version, and uploader.
     */
    body: ILocalizationFile.ICreate;
  };
  export type Body = ILocalizationFile.ICreate;
  export type Response = ILocalizationFile;

  export const METADATA = {
    method: "POST",
    path: "/localizationFiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/localizationFiles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationFile => typia.random<ILocalizationFile>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search/paginate localization files for i18n import/export
 * (localization_files table).
 *
 * This API operation lists localization files uploaded/imported to the system,
 * supporting filtering (by file name, channel id, uploader, version, upload
 * time), pagination, and sorting. Localization files allow for batch
 * import/export of translation data, version management, and coordinated
 * language pack deployment. The system enforces access controls: only
 * authorized users (i18n team, admin) may access this endpoint. Pagination
 * parameters (page, limit, offset) handle large-scale localization systems.
 * Only non-deleted (active) file records are returned. Returns paginated list
 * with file metadata. Related endpoints include GET for file detail, POST for
 * upload, PUT for update, DELETE for removal.
 *
 * @param props.body Filtering, sorting, and pagination details for searching
 *   localization files.
 * @path /localizationFiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering, sorting, and pagination details for searching localization
     * files.
     */
    body: ILocalizationFile.IRequest;
  };
  export type Body = ILocalizationFile.IRequest;
  export type Response = IPageILocalizationFile;

  export const METADATA = {
    method: "PATCH",
    path: "/localizationFiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/localizationFiles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageILocalizationFile => typia.random<IPageILocalizationFile>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a single localization file record by ID (localization_files table).
 *
 * Fetches the metadata and file attributes of a localization file, located by
 * its UUID. According to the localization_files Prisma schema, fields include
 * file_name, channel_id, uploader, file_url, version, and upload timestamp.
 * Fails with error if not found or soft-deleted. Permissions restrict access to
 * authorized actors only (admin, i18n staff). Used for QA, import/export
 * review, or automated pipeline integration. Related endpoints are PATCH for
 * list, POST for upload, PUT for update, DELETE for removal.
 *
 * @param props.id Unique identifier of the localization file to get details
 *   for.
 * @path /localizationFiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the localization file to get details for. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ILocalizationFile;

  export const METADATA = {
    method: "GET",
    path: "/localizationFiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/localizationFiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationFile => typia.random<ILocalizationFile>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update metadata of a localization file by ID (localization_files table).
 *
 * This endpoint updates an existing localization file's metadata (e.g.,
 * description, version, uploader) by its unique system identifier. According to
 * normalization and audit requirements, only atomic fields—never unique ids or
 * removal marker—may be altered here. Validation ensures the file exists (not
 * soft deleted) and the input respects constraints (e.g., unique [channel_id,
 * file_name, version]). Permissions are enforced according to admin or i18n
 * role RBAC. All changes are audit logged. Related endpoints: PATCH for
 * search/list, POST for file upload/create, GET for detail, DELETE for removal.
 * Setting of deleted_at must only be done by DELETE operation.
 *
 * @param props.id Unique identifier for the localization file record to update.
 * @param props.body Atomic metadata fields to update for an existing
 *   localization file.
 * @path /localizationFiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier for the localization file record to update. */
    id: string & tags.Format<"uuid">;

    /** Atomic metadata fields to update for an existing localization file. */
    body: ILocalizationFile.IUpdate;
  };
  export type Body = ILocalizationFile.IUpdate;
  export type Response = ILocalizationFile;

  export const METADATA = {
    method: "PUT",
    path: "/localizationFiles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/localizationFiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationFile => typia.random<ILocalizationFile>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a localization file record by ID (localization_files table).
 *
 * This endpoint marks a localization file record as deleted (sets deleted_at
 * timestamp) according to soft-delete, audit, and compliance requirements. The
 * record is excluded from standard searches, but retained for forensic, audit,
 * or rollback purposes. Authorization is enforced by admin/i18n role policy.
 * All deletions are fully audit logged with responsible actor and timestamp.
 * Attempting to delete non-existent or already deleted resource returns
 * appropriate error. Related endpoints: PATCH for search, PUT for update, GET
 * for detail, POST for create/upload.
 *
 * @param props.id Unique identifier of the localization file to soft delete.
 * @path /localizationFiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the localization file to soft delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ILocalizationFile;

  export const METADATA = {
    method: "DELETE",
    path: "/localizationFiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/localizationFiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationFile => typia.random<ILocalizationFile>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

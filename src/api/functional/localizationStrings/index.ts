import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ILocalizationString } from "../../structures/ILocalizationString";
import { IPageILocalizationString } from "../../structures/IPageILocalizationString";

/**
 * Create a new localization string record (localization_strings table).
 *
 * Creates and inserts a new localization string entity into the system's
 * translation catalog. Each entry uniquely combines key, locale code, and
 * version, storing the translated value and optional context. According to the
 * localization_strings Prisma schema, uniqueness is enforced across key,
 * locale, version; attempts to insert duplicates will fail with a constraint
 * error. On success, the complete normalized object is returned, including
 * generated id. Permissions restrict this operation to translation-authorized
 * actors (admins, localization managers). Audit log tracks all creation events
 * for compliance and rollback. Validation ensures all fields (key, locale,
 * value, version) are present and validâ€”missing or malformed data cause a
 * validation error. Soft deletes are not relevant at creation. Associated
 * endpoints include PATCH for list, GET/PUT/DELETE for entity management.
 *
 * @param props.body Creation info for the new localization string. All required
 *   fields: key, locale, value, and version, with optional context.
 * @path /localizationStrings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Creation info for the new localization string. All required fields:
     * key, locale, value, and version, with optional context.
     */
    body: ILocalizationString.ICreate;
  };
  export type Body = ILocalizationString.ICreate;
  export type Response = ILocalizationString;

  export const METADATA = {
    method: "POST",
    path: "/localizationStrings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/localizationStrings";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationString => typia.random<ILocalizationString>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search/paginate localization string entries using filter/sort options
 * (localization_strings table).
 *
 * This API endpoint enables searching, filtering, and paginating system-wide
 * localization strings. Each record represents a translatable key-value pair,
 * with locale, version, and context, normalized according to the
 * localization_strings schema. Query logic allows filter by key (partial
 * match), locale code, version, or context string; supports partial/text search
 * using system's full text indices. Pagination parameters (limit,
 * offset/page/size) enable scalable access. Sorting can be done by key, locale,
 * or version. Only records not soft-deleted (excluding those with deleted_at
 * set) are included. Designed for admin-side localization management,
 * translation QA/approval, or export purposes.
 *
 * Permission gating ensures this access is allowed for qualified actors
 * (translation team, admin, etc.). Errors reported include invalid query
 * params, out-of-range limits, or permission failures. Returned data is
 * paginated in a standard structure, e.g. { data: [ ... ], pagination: { ... }
 * }. Related endpoints include POST for creation, PUT for update, and GET for
 * detail.
 *
 * @param props.body Filtering, pagination, and (optionally) sort information
 *   for retrieving localization strings.
 * @path /localizationStrings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering, pagination, and (optionally) sort information for
     * retrieving localization strings.
     */
    body: ILocalizationString.IRequest;
  };
  export type Body = ILocalizationString.IRequest;
  export type Response = IPageILocalizationString;

  export const METADATA = {
    method: "PATCH",
    path: "/localizationStrings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/localizationStrings";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageILocalizationString => typia.random<IPageILocalizationString>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a single localization string (localization_strings table) by its unique
 * ID.
 *
 * This API retrieves the full details of a localization string, identified by
 * its UUID. Each record corresponds to a normalized, versioned translation of a
 * specific key for a locale (e.g., interface label, message, etc.). Access
 * control permits only authorized users (admin or translation managers).
 * Returns the full normalized record (key, locale, value, version, context),
 * unless not found or soft-deleted (deleted_at set), in which case a not found
 * or forbidden error is returned. Built for admin-side review, translation
 * edits, or integration QA. Related endpoints include PATCH for list/search,
 * POST for create, PUT for update, DELETE for removal.
 *
 * @param props.id Unique identifier of the localization string to retrieve.
 * @path /localizationStrings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the localization string to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ILocalizationString;

  export const METADATA = {
    method: "GET",
    path: "/localizationStrings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/localizationStrings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationString => typia.random<ILocalizationString>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a localization string record (localization_strings table) by ID.
 *
 * This endpoint updates an existing localization string, specified by UUID.
 * According to the localization_strings Prisma schema, the entry uniquely
 * identifies a [key, locale, version] translation. The update logic prohibits
 * changes to unique key/locale/version, instead supporting updates to value,
 * context, or (where business rules allow) version. Validates existence (not
 * soft-deleted), permission, and constraint logic on attempted update. All
 * changes are audit-logged with the updating actor's ID for compliance. Related
 * endpoints allow for PATCH search, POST create, GET details, DELETE removal.
 * Soft deletes are handled strictly via DELETE; PUT does not affect soft-delete
 * state.
 *
 * @param props.id Unique identifier of the localization string to update.
 * @param props.body Updated information for the localization string record;
 *   atomic fields only (value, context, etc.).
 * @path /localizationStrings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the localization string to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Updated information for the localization string record; atomic fields
     * only (value, context, etc.).
     */
    body: ILocalizationString.IUpdate;
  };
  export type Body = ILocalizationString.IUpdate;
  export type Response = ILocalizationString;

  export const METADATA = {
    method: "PUT",
    path: "/localizationStrings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/localizationStrings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationString => typia.random<ILocalizationString>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a localization string record by ID (localization_strings table).
 *
 * This API operation marks a localization string record as deleted, setting its
 * deleted_at timestamp as required by auditability and compliance logic.
 * According to the localization_strings schema, soft deletion is implemented
 * for all removal flows. Only actors with the proper permissions (admin,
 * localization manager) may perform this operation; illicit attempts are
 * forbidden and logged. Soft deleted entries are excluded from general queries,
 * but remain accessible to privileged actors for review or recovery. If the
 * record is not found or already soft deleted, an explicit error is returned.
 * All deletion events are audit logged for rollback and investigation. Related
 * endpoints: PATCH for list, PUT for update, GET for detail, POST for
 * creation.
 *
 * @param props.id Unique identifier of the localization string to delete (set
 *   deleted_at).
 * @path /localizationStrings/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /**
     * Unique identifier of the localization string to delete (set
     * deleted_at).
     */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ILocalizationString;

  export const METADATA = {
    method: "DELETE",
    path: "/localizationStrings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/localizationStrings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ILocalizationString => typia.random<ILocalizationString>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

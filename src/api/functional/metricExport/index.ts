import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMetricExport } from "../../structures/IMetricExport";
import { IPageIMetricExport } from "../../structures/IPageIMetricExport";

/**
 * Create new metric export record (table: metric_export).
 *
 * This API endpoint allows clients to create a new metric export record in the
 * 'metric_export' table. Clients provide details about which dashboard is being
 * exported, in what format, and with what configuration. The endpoint will
 * validate that the dashboard exists, the requesting user/actor has the
 * appropriate privileges to export, and that all required fields (dashboard_id,
 * export_format, configuration, export_file_url, export_time, requested_by) are
 * present. After validation, an immutable record is created, and the audit
 * trail is updated for compliance reasons. Errors will be returned if
 * validation fails, if the dashboard is not found, or if the user is
 * unauthorized. This is typically used by analytics/report download UIs in
 * admin or seller dashboards.
 *
 * @param props.body Details for metric export creation.
 * @path /metricExport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details for metric export creation. */
    body: IMetricExport.ICreate;
  };
  export type Body = IMetricExport.ICreate;
  export type Response = IMetricExport;

  export const METADATA = {
    method: "POST",
    path: "/metricExport",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/metricExport";
  export const random = (g?: Partial<typia.IRandomGenerator>): IMetricExport =>
    typia.random<IMetricExport>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get list of metric export records (metric_export table), with
 * search/paging/filter.
 *
 * This operation retrieves a paginated, filterable, and searchable set of
 * metric export records from the metric_export table. Exports are linked to
 * dashboards, are immutable, and have references to export format, config,
 * file_url, and audit timestamps. Pagination, search (by
 * dashboard/name/user/time), and sorting are supported for compliance and UX
 * needs. RBAC is enforced. Audit logs maintained for all accesses. Failures:
 * 400/403/500 as above. Related: GET reads detail, PATCH lists, POST is not
 * supported (exports are only created by dashboard/action).
 *
 * @param props.body List/search/paginate/sort params for export records.
 * @path /metricExport
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** List/search/paginate/sort params for export records. */
    body: IMetricExport.IRequest;
  };
  export type Body = IMetricExport.IRequest;
  export type Response = IPageIMetricExport;

  export const METADATA = {
    method: "PATCH",
    path: "/metricExport",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/metricExport";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIMetricExport => typia.random<IPageIMetricExport>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get atomic metric export detail record by ID (metric_export table).
 *
 * Fetches all atomic/detail fields for a single metric export entry from
 * metric_export by IDâ€”file URL, dashboard, export config, audit info,
 * requested_by, etc. RBAC: only permitted users may view entity. Audit log
 * enforced. Returns 404 not found, 403 unauthorized as required by compliance.
 * Related PATCH lists exports, GET fetch single detail, POST not supported
 * (exports are created by dashboard/system event).
 *
 * @param props.id ID of the metric export to retrieve.
 * @path /metricExport/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** ID of the metric export to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IMetricExport;

  export const METADATA = {
    method: "GET",
    path: "/metricExport/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/metricExport/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IMetricExport =>
    typia.random<IMetricExport>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update existing metric export by ID (table: metric_export).
 *
 * This endpoint updates certain fields (as allowed) of a metric export record
 * identified by its ID. Only export metadata/configuration and export_file_url
 * are mutable after creation; export_time, dashboard reference, and
 * requested_by are immutable. The endpoint first validates the existence of the
 * specified export record and the privileges of the user attempting the update.
 * An audit trail of the change is written automatically. If the record is not
 * found or user is not authorized, an appropriate error is returned. Updates
 * must not violate uniqueness or integrity constraints. This is typically used
 * for post-processing workflows where export files are updated or
 * reconfigured.
 *
 * @param props.id Target metric export record's ID.
 * @param props.body Updated metric export information.
 * @path /metricExport/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target metric export record's ID. */
    id: string & tags.Format<"uuid">;

    /** Updated metric export information. */
    body: IMetricExport.IUpdate;
  };
  export type Body = IMetricExport.IUpdate;
  export type Response = IMetricExport;

  export const METADATA = {
    method: "PUT",
    path: "/metricExport/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/metricExport/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IMetricExport =>
    typia.random<IMetricExport>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a metric export record by ID (table: metric_export).
 *
 * Marks a metric export record as deleted by setting its 'deleted_at'
 * timestamp. The operation is a soft delete for compliance reasons; the record
 * is retained for audit/logging but is excluded from normal queries. The
 * endpoint checks the existence of the record, enforces privilege checks, and
 * updates the deleted_at field. The operation is irreversible except by admin
 * recovery APIs. Returns success/failure status. Used for managing export
 * retention, privacy requests, or admin workflows.
 *
 * @param props.id Target metric export record's ID.
 * @path /metricExport/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target metric export record's ID. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IMetricExport;

  export const METADATA = {
    method: "DELETE",
    path: "/metricExport/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/metricExport/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IMetricExport =>
    typia.random<IMetricExport>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

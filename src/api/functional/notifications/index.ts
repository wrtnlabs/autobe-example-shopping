import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { INotification } from "../../structures/INotification";
import { IPageINotification } from "../../structures/IPageINotification";

/**
 * Create new notification event (NotificationLocalization.notifications).
 *
 * This API operation allows creation of a notification record, triggering a
 * delivery event through a specified channel and type (email, push, SMS,
 * in-app). All required fields (recipient user, channel, template, content,
 * send time, status, delivery type, payload) must be supplied and validated
 * before insertion in the notifications table. The operation ensures
 * audit-compliance by creating immutable delivery logs, supports sending to
 * multiple channels, tracks failures for reporting, and enforces strict input
 * validation.
 *
 * Business logic includes verifying that the recipient and channel exist, the
 * template is valid and active, and (optionally) that the sending system/user
 * has permission to notify the recipient. The payload and delivery type
 * determines downstream dispatch logic. Any RBAC, localization, or preference
 * checks are performed before record creation. If successful, the full
 * notification record (including actual sent/failed state and unique
 * notification ID) is returned.
 *
 * Error handling includes validation errors (400), permission denied (403), or
 * references to non-existent user/channel/template (404/409).
 *
 * @param props.body Notification event details to create, including recipient,
 *   channel, delivery type, status, and template used.
 * @path /notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Notification event details to create, including recipient, channel,
     * delivery type, status, and template used.
     */
    body: INotification.ICreate;
  };
  export type Body = INotification.ICreate;
  export type Response = INotification;

  export const METADATA = {
    method: "POST",
    path: "/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notifications";
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search paged notifications with filters (notifications table).
 *
 * This endpoint returns a paginated, optionally filtered list of notification
 * events stored in the 'notifications' database table. Results contain
 * notification metadata (recipient user, template, channel, delivery type,
 * status, payload, and timestamps). Filtering/sorting can include user,
 * channel, template type, delivery status, and date range for audit or support
 * purposes.
 *
 * Query parameters are submitted via request body, supporting easy extension
 * for new filters as business/notification needs grow. Strong RBAC controls
 * must separate scope between audit staff, admins, campaign managers, and
 * regular users to ensure privacyâ€”only permitted actors may access all/any
 * records (users get only their notifications).
 *
 * Error handling: permission errors, validation issues, or malformed
 * filter/sort input. The endpoint can support notification dashboards, export
 * features, and audit flows. Related endpoints include notification
 * template/query, per-ID fetch, send notification, and notification preference
 * update.
 *
 * @param props.body Notification search filters, pagination, and sorting
 *   information.
 * @path /notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Notification search filters, pagination, and sorting information. */
    body: INotification.IRequest;
  };
  export type Body = INotification.IRequest;
  export type Response = IPageINotification;

  export const METADATA = {
    method: "PATCH",
    path: "/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/notifications";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageINotification => typia.random<IPageINotification>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a single notification by ID (NotificationLocalization.notifications).
 *
 * This API operation retrieves the full record of a specific notification using
 * its unique ID from the notifications table. Each notification entry contains
 * references to the recipient user, associated channel, template, detailed
 * delivery status, type (email, push, SMS), and full-rendered payload as sent
 * to the user. The retrieval ensures auditability and compliance by providing
 * complete delivery tracing, including possible failure reasons and
 * historical/timestamped context. RBAC checks ensure only authorized
 * stakeholders (recipient, admin, compliance auditor) may access this record.
 *
 * Security is enforced by verifying user permissions at the API layer before
 * allowing sensitive PII or message content to be returned. All access is
 * audit-logged for compliance. The operation is commonly used in combination
 * with notification listing and debugging workflows.
 *
 * Returned data includes: user/channel/template references, exact payload,
 * status, timestamps, and (optionally) a failure explanation. The API responds
 * with 404 if the notification is missing or deleted, and 403 for insufficient
 * permissions.
 *
 * @param props.id Unique identifier of the notification to retrieve.
 * @path /notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the notification to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotification;

  export const METADATA = {
    method: "GET",
    path: "/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update notification record delivery status/data
 * (NotificationLocalization.notifications).
 *
 * This operation updates specific fields of an existing notification (found by
 * ID) in the notifications table. While most notification fields are immutable
 * once sent (for audit/compliance), some (like delivery status, failure reason)
 * may be updated to reflect system delivery outcomes or troubleshooting
 * results. Full RBAC and permission checks are enforced; end users generally
 * cannot alter these records. All updates are audit-logged and may trigger
 * downstream workflow or compliance hooks.
 *
 * Validation ensures the notification exists, allowed fields are being updated,
 * immutable fields are protected, and audit policies are followed. On success,
 * the updated notification record is returned. On error, 400 (invalid data),
 * 404 (not found), or 403 (forbidden) are returned.
 *
 * Changes include: delivery status, sent_at, payload corrections, and failure
 * explanations, but never altering recipient or core send properties.
 *
 * @param props.id Unique identifier of the notification to update.
 * @param props.body Notification fields eligible for update (typically delivery
 *   status, sent time, failure reason).
 * @path /notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the notification to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Notification fields eligible for update (typically delivery status,
     * sent time, failure reason).
     */
    body: INotification.IUpdate;
  };
  export type Body = INotification.IUpdate;
  export type Response = INotification;

  export const METADATA = {
    method: "PUT",
    path: "/notifications/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete (mark as deleted) a notification by ID
 * (NotificationLocalization.notifications).
 *
 * This API operation marks a notification record as deleted, by setting a
 * soft-delete timestamp (deleted_at) for the specified notification ID in the
 * notifications table. This supports full audit/compliance (records are never
 * hard-deleted) and allows users or admins to hide notifications from active
 * views. All deletion operations are strictly permissioned (typically owner,
 * admin, or automated compliance systems only), and are logged for audit
 * purposes.
 *
 * On success, the operation returns a confirmation or the updated notification
 * record. If the ID is invalid, or already deleted, a 404 is returned. All
 * access and actions are audit-logged per compliance policy.
 *
 * @param props.id Unique identifier of the notification to soft-delete.
 * @path /notifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the notification to soft-delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = INotification;

  export const METADATA = {
    method: "DELETE",
    path: "/notifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/notifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): INotification =>
    typia.random<INotification>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

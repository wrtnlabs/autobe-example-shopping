import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IOrder } from "../../structures/IOrder";
import { IPageIOrder } from "../../structures/IPageIOrder";

/**
 * Create a new order (Prisma: orders table).
 *
 * This endpoint creates a new order in the system. Input includes order header
 * data (user, channel), item list with quantities and variants, and optional
 * memo, as well as initial status and payment details. The endpoint enforces
 * business logic for inventory, pricing, anti-fraud (on create), and audit
 * logging (who, what, when). Compliance checks include validating required
 * business and regulatory fields (e.g., order number uniqueness, channel).
 * Errors are returned for failed validation, integrity constraints, or business
 * rule violations. Processing is atomic—no partial creates—and all actions are
 * thoroughly audit-logged.
 *
 * @param props.body Order creation details including items, user, channel,
 *   payment.
 * @path /orders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Order creation details including items, user, channel, payment. */
    body: IOrder.ICreate;
  };
  export type Body = IOrder.ICreate;
  export type Response = IOrder;

  export const METADATA = {
    method: "POST",
    path: "/orders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/orders";
  export const random = (g?: Partial<typia.IRandomGenerator>): IOrder =>
    typia.random<IOrder>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a paginated, filterable list of orders (Prisma: orders table).
 *
 * This endpoint enables clients to search and retrieve a paginated list of
 * orders from the system, supporting advanced queries with filtering and
 * sorting (by status, date, channel, user, etc.). It draws directly on the
 * Orders table, including only those records not marked as soft-deleted
 * (`deleted_at`). Security and permissions are enforced based on user
 * role—admins may access all, customers only their own. Input validation
 * ensures query parameters are well-formed, and business logic ensures legal
 * compliance for data retention and audit logging. Used in combination with
 * detail endpoints for full management workflows. Errors for invalid filters,
 * unauthorized access, or server/database errors are handled with structured
 * responses. This endpoint is typically paired with the order detail, create,
 * and update endpoints for full lifecycle management. Returns a standardized
 * paged order response including summary properties and pagination metadata for
 * UI/analytics use.
 *
 * @param props.body Query parameters for searching and paginating orders,
 *   including filters, search, page, and sort info.
 * @path /orders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Query parameters for searching and paginating orders, including
     * filters, search, page, and sort info.
     */
    body: IOrder.IRequest;
  };
  export type Body = IOrder.IRequest;
  export type Response = IPageIOrder;

  export const METADATA = {
    method: "PATCH",
    path: "/orders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/orders";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIOrder =>
    typia.random<IPageIOrder>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch detailed information of a specific order by ID (Prisma: orders table).
 *
 * This endpoint retrieves all available details about a specific order,
 * identified by its unique ID. The response includes the main order record, all
 * related items, current status, payment records, shipment details, and audit
 * trail. Sensitive fields are filtered based on RBAC enforcement—customers only
 * see their orders; admins can access all. All actions are logged for
 * compliance purposes. Input validation checks ID format (UUID) and existence;
 * missing or unauthorized access returns appropriate errors. Used together with
 * search, update, and delete endpoints for complete order management.
 *
 * @param props.id Target order's ID
 * @path /orders/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target order's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOrder;

  export const METADATA = {
    method: "GET",
    path: "/orders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/orders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IOrder =>
    typia.random<IOrder>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an existing order in full by ID (Prisma: orders table).
 *
 * This endpoint performs a full update of an existing order. All fields that
 * are permitted to change at the current order status (e.g., address, items,
 * status, payment reference) may be updated according to business logic and
 * compliance rules. The endpoint enforces input validation, checks workflow
 * validity, ensures no illegal state transitions, and logs all actions to the
 * audit log with timestamp and actor info. The primary key ID must match a
 * valid order; soft-deleted orders are not updatable. All changes may trigger
 * downstream processes such as inventory adjustment, notification, or shipment
 * update. Errors include invalid input, forbidden transitions, not found, or
 * insufficient permissions.
 *
 * @param props.id Target order's ID
 * @param props.body Complete set of updatable order properties and related
 *   records.
 * @path /orders/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target order's ID */
    id: string & tags.Format<"uuid">;

    /** Complete set of updatable order properties and related records. */
    body: IOrder.IUpdate;
  };
  export type Body = IOrder.IUpdate;
  export type Response = IOrder;

  export const METADATA = {
    method: "PUT",
    path: "/orders/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/orders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IOrder =>
    typia.random<IOrder>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete an order by ID (Prisma: orders table).
 *
 * This endpoint marks an existing order as deleted (soft delete), recording the
 * actor and reason in audit logs. No physical removal occurs—record remains for
 * future audit and possible recovery. Order status is updated to reflect
 * cancellation/deletion as appropriate, and refund/cancellation business logic
 * is triggered (if applicable to the order’s state). RBAC and permissions are
 * strictly enforced; customers can only delete their own orders, while admins
 * have broader access. All deletions are logged with actor, reason, and
 * timestamp for compliance. Returns the (soft) deleted order record, including
 * new `deleted_at` timestamp.
 *
 * @param props.id Target order's ID
 * @path /orders/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target order's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOrder;

  export const METADATA = {
    method: "DELETE",
    path: "/orders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/orders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IOrder =>
    typia.random<IOrder>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductBulletin } from "../../structures/IProductBulletin";
import { IPageIProductBulletin } from "../../structures/IPageIProductBulletin";

/**
 * Create a new product bulletin post (product_bulletins table, Engagement
 * Boards).
 *
 * This endpoint enables an authorized user (typically product seller or site
 * admin) to create a new product bulletin post associated with a given product.
 * It inserts a record into the 'product_bulletins' table, requiring all
 * necessary fields (product_id, author_id, title, body). If the actor is a
 * moderator/admin, the bulletin may be marked as pinned or visible only to
 * staff/draft, depending on business requirements.
 *
 * Upon successful creation, the endpoint returns the full product bulletin
 * post, complete with post ID, timestamps, and all entered information. Related
 * business workflows (such as notifying subscribers, product followers, or
 * triggering moderation hooks) are possible via event hooks. This endpoint
 * works alongside listing (PATCH), reading (GET), updating (PUT), and deleting
 * (DELETE) endpoints for the product bulletin lifecycle.
 *
 * @param props.body Information required to create a product bulletin post:
 *   product ID, author ID (inferred from session), title, body, status, etc.
 * @path /productBulletins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Information required to create a product bulletin post: product ID,
     * author ID (inferred from session), title, body, status, etc.
     */
    body: IProductBulletin.ICreate;
  };
  export type Body = IProductBulletin.ICreate;
  export type Response = IProductBulletin;

  export const METADATA = {
    method: "POST",
    path: "/productBulletins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productBulletins";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductBulletin => typia.random<IProductBulletin>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a paginated and filtered list of product bulletin posts
 * (product_bulletins table, Engagement Boards).
 *
 * This endpoint retrieves a paginated and filtered list of product bulletin
 * posts from the 'product_bulletins' table, supporting full search and
 * administrative review workflows. The endpoint handles complex queries by
 * accepting a PATCH request with filtering criteria, such as keyword searches,
 * product IDs, author filtration, created_at date ranges, or content status
 * (published/deleted/pending). This ensures flexibility for admin dashboards,
 * product page boards, or public query tools.
 *
 * Advanced usage may allow staff/moderators to include soft-deleted posts or
 * draft bulletins by permission. Endpoints must validate query parameters
 * against RBAC rules for visibility (i.e., regular users see public/published
 * only, moderators see all).
 *
 * This API is to be used in conjunction with GET (read a single), POST
 * (create), PUT (update), and DELETE (remove/soft-delete) for full CRUD
 * lifecycle coverage. Audit logging of all accesses is strongly recommended for
 * compliance and operational transparency.
 *
 * @param props.body Filtering and pagination information for bulletin search.
 * @path /productBulletins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering and pagination information for bulletin search. */
    body: IProductBulletin.IRequest;
  };
  export type Body = IProductBulletin.IRequest;
  export type Response = IPageIProductBulletin;

  export const METADATA = {
    method: "PATCH",
    path: "/productBulletins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productBulletins";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductBulletin => typia.random<IPageIProductBulletin>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve details of a single product bulletin post (product_bulletins table)
 * by ID.
 *
 * This API retrieves the full detail of a single product bulletin post. It
 * queries the 'product_bulletins' table using the provided 'id' parameter (a
 * UUID). If the post exists and the requesting user has the necessary
 * permissions (public for published, staff/admin can view deleted/drafts), all
 * post attributes are returned: title, body, product reference, author,
 * created_at timestamp, and status (published/deleted/etc). Soft-deleted
 * bulletins are only accessible to staff/admin by design, with access checks
 * enforced by RBAC.
 *
 * This endpoint is core for product-specific announcement board interfaces,
 * audit/review panels, and moderation tools. It complements the PATCH
 * (list/search), POST (create), PUT (update), and DELETE (soft-delete)
 * endpoints for the product bulletin lifecycle.
 *
 * @param props.id ID of the product bulletin post to retrieve.
 * @path /productBulletins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** ID of the product bulletin post to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductBulletin;

  export const METADATA = {
    method: "GET",
    path: "/productBulletins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productBulletins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductBulletin => typia.random<IProductBulletin>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an existing product bulletin post (product_bulletins table) by ID.
 *
 * Enables an authorized actor (post author, moderator, or admin) to update an
 * existing product bulletin post. The endpoint receives the 'id' parameter in
 * the path and a body specifying fields to modify (title, body, pin/status
 * flag, and optional metadata). The update sets new values in the
 * 'product_bulletins' table and updates the audit timestamp.
 *
 * RBAC is used to ensure only permitted fields/roles can modify certain
 * properties (e.g., only admins can pin posts, regular authors cannot change
 * published/deleted status arbitrarily). The entire change is logged for
 * compliance, including previous state if needed for rollback. Used alongside
 * GET (for details), PATCH (for search/list), POST (create), and DELETE
 * (soft-delete) endpoints in the product bulletin lifecycle.
 *
 * @param props.id ID of the product bulletin post to update.
 * @param props.body Fields to update for the product bulletin post (e.g.,
 *   title, body, status, pin flag).
 * @path /productBulletins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of the product bulletin post to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Fields to update for the product bulletin post (e.g., title, body,
     * status, pin flag).
     */
    body: IProductBulletin.IUpdate;
  };
  export type Body = IProductBulletin.IUpdate;
  export type Response = IProductBulletin;

  export const METADATA = {
    method: "PUT",
    path: "/productBulletins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productBulletins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductBulletin => typia.random<IProductBulletin>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a product bulletin post (product_bulletins table) by ID for audit
 * compliance.
 *
 * This endpoint enables an authorized user (original author, moderator, or
 * admin with sufficient RBAC privileges) to soft-delete a product bulletin
 * post, setting the deleted_at timestamp rather than removing the record. The
 * operation targets the 'product_bulletins' table and ensures that audit log
 * and compliance requirements are met. Soft-deleted bulletins are excluded from
 * most user-facing listings, but remain accessible to moderators/staff as
 * needed.
 *
 * Related endpoints cover list/search (PATCH), details (GET), update (PUT), and
 * create (POST). This operation should validate authorization before allowing
 * deletion and return confirmation of the change.
 *
 * @param props.id ID of the product bulletin post to soft-delete.
 * @path /productBulletins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the product bulletin post to soft-delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductBulletin.ISoftDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/productBulletins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productBulletins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductBulletin.ISoftDeleteResult =>
    typia.random<IProductBulletin.ISoftDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

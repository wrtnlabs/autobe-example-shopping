import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductBundle } from "../../structures/IProductBundle";
import { IPageIProductBundle } from "../../structures/IPageIProductBundle";

/**
 * Create a new product bundle ('product_bundles' table).
 *
 * Creates a product bundle: associates a parent product and a set of variants
 * (quantity specified for each) in a new bundle entity, persisted as an atomic
 * record in the 'product_bundles' table. The API checks all input references
 * for existence (product ID, variant ID), ensures uniqueness per policy, and
 * validates all atomic fields. Transaction is limited to single bundle
 * creation.
 *
 * Returned value is the newly-built bundle record, suitable for immediate use
 * in merchandising, analytics, or order logic. Permissions are checked for
 * admin/seller (deny on insufficient rights). On error, supplies invalid
 * reference, duplication, or permission error codes. This record serves as the
 * anchor for related downstream attachments—it never includes nested detail,
 * only references and atomic values.
 *
 * @param props.body Payload to create atomic product bundle (parent product ID,
 *   variant ID, quantity, etc.).
 * @path /productBundles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Payload to create atomic product bundle (parent product ID, variant
     * ID, quantity, etc.).
     */
    body: IProductBundle.ICreate;
  };
  export type Body = IProductBundle.ICreate;
  export type Response = IProductBundle;

  export const METADATA = {
    method: "POST",
    path: "/productBundles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productBundles";
  export const random = (g?: Partial<typia.IRandomGenerator>): IProductBundle =>
    typia.random<IProductBundle>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List product bundles with search/pagination ('product_bundles' table).
 *
 * Returns a paginated, optionally filtered and sorted set of product bundle
 * records from the 'product_bundles' table. Supports search by parent product,
 * included variant, date intervals, or quantity fields. Only non-soft-deleted
 * bundles included. The endpoint carefully limits what is included in the
 * summary records (atomic fields; expanded detail is always a downstream
 * call).
 *
 * Pagination metadata is always included. Authorization is scoped for
 * admin/seller, ensuring no visibility for unauthorized calls. Possible errors
 * include permission denied, invalid filters, or pagination parameters out of
 * range. Bulk administration, analytics, and reporting tools access this for
 * inventory and merchandising management.
 *
 * @param props.body Bundle list query and filter/search/pagination parameters.
 * @path /productBundles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Bundle list query and filter/search/pagination parameters. */
    body: IProductBundle.IRequest;
  };
  export type Body = IProductBundle.IRequest;
  export type Response = IPageIProductBundle;

  export const METADATA = {
    method: "PATCH",
    path: "/productBundles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productBundles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductBundle => typia.random<IPageIProductBundle>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get detailed info for product bundle by ID ('product_bundles' table).
 *
 * Fetches a single product bundle by UUID. Returns complete atomic data and
 * immediate references (product_id, variant_id, quantity, timestamps), without
 * recursively expanding full product/variant details (handled elsewhere).
 * Required for detail screens, edit forms, or confirming linked records (e.g.,
 * before edit/delete).
 *
 * Authorization is mandatory: only admin or seller with access rights may use
 * this call. The endpoint validates bundle existence, permissions, and
 * non-deleted state (deleted_at is null). On failure, supplies not-found,
 * unauthorized, or already deleted errors as per compliance. Used as basis for
 * update/delete actions and audit.
 *
 * @param props.id UUID of product bundle to retrieve.
 * @path /productBundles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of product bundle to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductBundle;

  export const METADATA = {
    method: "GET",
    path: "/productBundles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productBundles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IProductBundle =>
    typia.random<IProductBundle>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update atomic product bundle (by ID, 'product_bundles' table).
 *
 * Edits an atomic product bundle entity by primary key—updating fields like
 * quantity, or possibly updating the component variant (permitted by business
 * rules). Only admin/seller with necessary permissions can invoke. The API
 * accepts inputs for updatable fields, validates foreign references (must
 * exist, not soft deleted), and checks for referential/uniqueness
 * requirements.
 *
 * After update, returns the altered bundle record. Side effects (audit log
 * entry, policy-driven compliance) handled as transactional emits. All
 * downstream or nested references are left untouched; handled through related
 * endpoints. On error, the endpoint returns standard errors: not found,
 * permission denied, or validation errors. This API is called by admin or
 * seller management UIs and via integration for stock adjustment/merch
 * operations.
 *
 * @param props.id UUID of product bundle to update.
 * @param props.body Update (patch) payload for bundle atomic fields (quantity,
 *   variant ID, etc.).
 * @path /productBundles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** UUID of product bundle to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Update (patch) payload for bundle atomic fields (quantity, variant
     * ID, etc.).
     */
    body: IProductBundle.IUpdate;
  };
  export type Body = IProductBundle.IUpdate;
  export type Response = IProductBundle;

  export const METADATA = {
    method: "PUT",
    path: "/productBundles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productBundles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IProductBundle =>
    typia.random<IProductBundle>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft deletes a single product bundle in the product_bundles table by ID.
 *
 * Deletes a product bundle using its primary key field, implementing soft
 * delete by updating the deleted_at column rather than removing the record.
 * Product bundles serve as composite product definitions within the e-commerce
 * platform, enabling flexible SKU grouping for promotions and merchandising.
 * Their deletion is logged for compliance and reversibility, as required by
 * audit and legal standards for digital commerce. Permission checks enforce
 * seller/admin authority; improper or duplicate deletions are prevented by
 * existence and status checks. Integrates with the overall product bundle CRUD
 * API set and is referenced by the product list and analytics modules as part
 * of catalog management. Error responses are provided for not-found,
 * already-deleted, or insufficient-privilege scenarios. For recovery or audit,
 * deleted records can still be queried by privileged admin endpoints.
 *
 * @param props.id Unique identifier for the product bundle to delete
 * @path /productBundles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier for the product bundle to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/productBundles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productBundles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

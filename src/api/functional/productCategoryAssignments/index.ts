import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductCategoryAssignments } from "../../structures/IProductCategoryAssignments";
import { IPageIProductCategoryAssignments } from "../../structures/IPageIProductCategoryAssignments";

/**
 * Create a product-category assignment (product_category_assignments).
 *
 * Creates a new assignment associating a product with a category, based on the
 * product_category_assignments schema. The request body must include both
 * product_id and category_id. Uniqueness is validated (no duplicate assignments
 * per product-category pair), and permissions are enforced such that only
 * authorized users (channel admins, merchandising managers) may add
 * assignments.
 *
 * Upon successful creation, the assignment record includes timestamps for
 * creation and audits. Related endpoints exist for update, delete, and search.
 * If the assignment already exists or if validation fails, an appropriate error
 * is returned. Audit logs are updated for all creation actions to satisfy
 * regulatory and operational needs for traceability.
 *
 * @param props.body Data to create a new product-category assignment.
 * @path /productCategoryAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Data to create a new product-category assignment. */
    body: IProductCategoryAssignments.ICreate;
  };
  export type Body = IProductCategoryAssignments.ICreate;
  export type Response = IProductCategoryAssignments;

  export const METADATA = {
    method: "POST",
    path: "/productCategoryAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productCategoryAssignments";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductCategoryAssignments =>
    typia.random<IProductCategoryAssignments>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search product-category assignments (product_category_assignments).
 *
 * Retrieves a list of product-category assignments, supporting search,
 * filtering, and pagination, as described in the product_category_assignments
 * schema. Request body includes filtering parameters such as product_id,
 * category_id, timestamp, or channel context. Pagination and full-text search
 * on related fields (product, category) are supported. Soft-deleted entries are
 * automatically excluded, supporting regulatory integrity.
 *
 * This endpoint helps facilitate product catalog organization, quick assignment
 * audits, and migration tasks. Results include count and data arrays. Related
 * endpoints allow creating, updating, and deleting assignments. Errors may
 * occur for invalid queries, exceeded page size, or insufficient permissions.
 * All access is audit-logged for compliance.
 *
 * @param props.body Search/filter parameters for assignment list.
 * @path /productCategoryAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search/filter parameters for assignment list. */
    body: IProductCategoryAssignments.IRequest;
  };
  export type Body = IProductCategoryAssignments.IRequest;
  export type Response = IPageIProductCategoryAssignments;

  export const METADATA = {
    method: "PATCH",
    path: "/productCategoryAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productCategoryAssignments";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductCategoryAssignments =>
    typia.random<IPageIProductCategoryAssignments>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a product-category assignment by ID (product_category_assignments).
 *
 * Gets the details of a specific product-category assignment by its unique ID.
 * The response includes identifiers for both the product and category, plus
 * timestamps and audit markers. If the assignment is not found or is
 * soft-deleted (if implemented), a suitable not found error is returned.
 *
 * RBAC is enforced so that only permitted users with required privileges may
 * call this endpoint. This operation enables catalog managers to review, audit,
 * or troubleshoot product category associations, as required by features such
 * as advanced merchandising, bulk import/export, and compliance analytics.
 * Audit logs are produced for all accesses.
 *
 * @param props.id Product-category assignment's ID
 * @path /productCategoryAssignments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Product-category assignment's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductCategoryAssignments;

  export const METADATA = {
    method: "GET",
    path: "/productCategoryAssignments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productCategoryAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductCategoryAssignments =>
    typia.random<IProductCategoryAssignments>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a product-category assignment by ID (product_category_assignments).
 *
 * Updates details for an existing product-category assignment identified by ID.
 * The operation validates that a record with the given ID exists and is not
 * soft deleted (if supported). Request body may change either product_id or
 * category_id, but must not result in duplicates, preserving assignment
 * uniqueness rules. Only users with sufficient privileges (admin, merchandising
 * manager) may perform updates.
 *
 * Updates trigger changes to the updated_at timestamp (if available) and full
 * audit logging. Attempts to update to a duplicate or invalid relationship
 * result in errors. Related endpoints allow create/delete/search. Soft-deleted
 * assignments may not be updated without restoration.
 *
 * @param props.id Product-category assignment's ID
 * @param props.body Updated product-category assignment details.
 * @path /productCategoryAssignments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Product-category assignment's ID */
    id: string & tags.Format<"uuid">;

    /** Updated product-category assignment details. */
    body: IProductCategoryAssignments.IUpdate;
  };
  export type Body = IProductCategoryAssignments.IUpdate;
  export type Response = IProductCategoryAssignments;

  export const METADATA = {
    method: "PUT",
    path: "/productCategoryAssignments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productCategoryAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductCategoryAssignments =>
    typia.random<IProductCategoryAssignments>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a product-category assignment by ID
 * (product_category_assignments).
 *
 * Soft-deletes a product-category assignment by specifying its unique ID,
 * setting the soft-deleted marker or removing it from active results. Only
 * authorized users may perform this action, according to RBAC rules. Associated
 * products or categories are not affected.
 *
 * The endpoint updates the audit log for this action. The deleted assignment
 * can be recovered (by restoring the marker) per compliance needs. All delete
 * actions are non-destructive, supporting full audit and traceability. Attempts
 * to delete non-existent or already deleted records result in appropriate error
 * codes and messages.
 *
 * @param props.id Product-category assignment's ID
 * @path /productCategoryAssignments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Product-category assignment's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductCategoryAssignments;

  export const METADATA = {
    method: "DELETE",
    path: "/productCategoryAssignments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productCategoryAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductCategoryAssignments =>
    typia.random<IProductCategoryAssignments>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

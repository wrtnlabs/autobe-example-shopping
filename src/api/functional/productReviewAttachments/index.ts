import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductReviewAttachment } from "../../structures/IProductReviewAttachment";
import { IPageIProductReviewAttachment } from "../../structures/IPageIProductReviewAttachment";

/**
 * Create a new product review attachment
 * (EngagementBoards.product_review_attachments).
 *
 * This operation allows a user (typically the review author, or a
 * moderator/admin) to add a media/attachment to an existing product review. The
 * request body must specify the review_id (which review to attach),
 * attachment_id (the uploaded media/attachment), and the sequence/order in
 * which this attachment should appear in the review.
 *
 * On creation, this endpoint checks:
 *
 * - Review_id references a valid, non-deleted product review that accepts
 *   attachments.
 * - Attachment_id references an existing, active attachment in the attachments
 *   table.
 * - User permissions: Only review authors (or privileged moderators/admins) may
 *   attach files to reviews.
 * - Business logic: sequence must be a non-negative integer and not duplicate
 *   within the same review.
 *
 * This action is logged for audit/compliance. It supports moderation and
 * content review features. Errors include validation of reference integrity,
 * permission checks, and attachment/media support (MIME types/size limits
 * enforced externally).
 *
 * It can be composed with review creation/edit APIs and media upload APIs.
 *
 * @param props.body Attachment creation payload: review_id, attachment_id,
 *   sequence.
 * @path /productReviewAttachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Attachment creation payload: review_id, attachment_id, sequence. */
    body: IProductReviewAttachment.ICreate;
  };
  export type Body = IProductReviewAttachment.ICreate;
  export type Response = IProductReviewAttachment;

  export const METADATA = {
    method: "POST",
    path: "/productReviewAttachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productReviewAttachments";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductReviewAttachment => typia.random<IProductReviewAttachment>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search/list product review attachments (media/files for product_reviews) with
 * flexible filtering (product_review_attachments table).
 *
 * This endpoint allows clients (typically admin or moderator interfaces, or
 * review display widgets) to fetch a filtered, paginated list of product review
 * attachments, using criteria such as review ID, media/attachment type,
 * sequence/order, and optionally author or status. The response describes all
 * media files (image, video, doc) attached to reviews, joined from the
 * 'product_review_attachments' and 'attachments' tables.
 *
 * Permissions are enforced: deleted reviews' attachments are only listed for
 * staff/moderators; public endpoints only show active, published attachments.
 * Audit/compliance logging must be in place for this endpoint, particularly
 * around export/bulk access. Pagination enables scalable listing for reviews
 * with many attachments.
 *
 * This endpoint is used in conjunction with product review GET, PATCH, POST
 * endpoints, and is required for complete review media lifecycle management.
 *
 * @param props.body Filtering and pagination information for product review
 *   attachments (by review ID, type, author, etc.).
 * @path /productReviewAttachments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering and pagination information for product review attachments
     * (by review ID, type, author, etc.).
     */
    body: IProductReviewAttachment.IRequest;
  };
  export type Body = IProductReviewAttachment.IRequest;
  export type Response = IPageIProductReviewAttachment;

  export const METADATA = {
    method: "PATCH",
    path: "/productReviewAttachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productReviewAttachments";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductReviewAttachment =>
    typia.random<IPageIProductReviewAttachment>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve metadata and attachment info for a single product review attachment,
 * by ID (EngagementBoards.product_review_attachments).
 *
 * This operation retrieves detailed information about a specific product review
 * attachment. Product review attachments are used to link media files (images,
 * videos, documents) with product reviews. According to the EngagementBoards
 * schema, each product_review_attachment row consists of a review_id (referring
 * to product_reviews), an attachment_id (referring to attachments), and a
 * sequence (to control ordering).
 *
 * Retrieving a review attachment by ID enables clients to fetch all relevant
 * attachment data via the attachment relation, as well as see which review and
 * attachment instance this belongs to. This supports product moderation, user
 * content management, and display of review media in the correct order. Only
 * authorized users, moderators, or the review's author can fetch full metadata,
 * as review media may be subject to moderation, soft deletion, or access
 * controls.
 *
 * Error scenarios include: not found (if id does not exist or is soft-deleted),
 * or permission denied if the requesting user is not authorized to view this
 * attachment (GDPR/CCPA compliance).
 *
 * This operation may be paired with review listing or detail APIs for
 * constructing complete review displays.
 *
 * @param props.id The unique ID of the product review attachment to retrieve.
 * @path /productReviewAttachments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** The unique ID of the product review attachment to retrieve. */
    id: string;
  };
  export type Response = IProductReviewAttachment;

  export const METADATA = {
    method: "GET",
    path: "/productReviewAttachments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productReviewAttachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductReviewAttachment => typia.random<IProductReviewAttachment>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an existing product review attachment
 * (EngagementBoards.product_review_attachments).
 *
 * This operation updates the properties of a product review attachment.
 * Updatable fields are primarily 'sequence' for reordering and, in some
 * business workflows, the 'attachment_id' if replacing the media is allowed
 * (audit tracked; usually reserved for authors, moderators, or repair
 * workflows).
 *
 * The request body must specify which fields to update. ID must match an
 * existing, non-deleted product review attachment. Checks are required to
 * ensure:
 *
 * - The attachment still references a valid product review.
 * - Changing the order/sequence does not violate unique sequence constraints for
 *   the review.
 * - Permission checks: only authors, moderators, or admins may modify an
 *   attachment (per RBAC).
 * - If replacing the attachment_id, the referenced attachment must exist and be
 *   valid (MIME/size etc. enforced externally).
 *
 * Audit logs must capture all changes for compliance. Errors: not found,
 * permission denied, validation errors (e.g., duplicate sequence number in
 * review).
 *
 * This API complements the create and delete endpoints for full lifecycle
 * management of review attachments.
 *
 * @param props.id ID of the product review attachment to update.
 * @param props.body Fields to update for the review attachment (such as
 *   sequence or attachment_id).
 * @path /productReviewAttachments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** ID of the product review attachment to update. */
    id: string;

    /**
     * Fields to update for the review attachment (such as sequence or
     * attachment_id).
     */
    body: IProductReviewAttachment.IUpdate;
  };
  export type Body = IProductReviewAttachment.IUpdate;
  export type Response = IProductReviewAttachment;

  export const METADATA = {
    method: "PUT",
    path: "/productReviewAttachments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productReviewAttachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductReviewAttachment => typia.random<IProductReviewAttachment>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a product review attachment by ID
 * (EngagementBoards.product_review_attachments).
 *
 * This operation marks a product review attachment as deleted. Per
 * audit/compliance requirements, this is a soft-delete action: the record
 * remains in the database for historical/audit trail, but is no longer returned
 * in normal queries or review displays. Authorized users (author, moderators,
 * or admins) may remove attachments if inappropriate, obsolete, or upon
 * request.
 *
 * Checks:
 *
 * - ID exists and is not already deleted.
 * - Permission checks based on review ownership or RBAC.
 *
 * Deletion events are logged for compliance, and will be considered in
 * notification/audit flows. This endpoint complements the create and update
 * operations and works alongside content moderation workflows. Attempting to
 * delete a nonexistent or already deleted attachment returns an error.
 *
 * @param props.id The ID of the product review attachment to soft-delete.
 * @path /productReviewAttachments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** The ID of the product review attachment to soft-delete. */
    id: string;
  };
  export type Response = IProductReviewAttachment;

  export const METADATA = {
    method: "DELETE",
    path: "/productReviewAttachments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productReviewAttachments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductReviewAttachment => typia.random<IProductReviewAttachment>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

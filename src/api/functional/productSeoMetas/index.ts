import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductSeoMeta } from "../../structures/IProductSeoMeta";
import { IPageIProductSeoMeta } from "../../structures/IPageIProductSeoMeta";
import { IProductSeoMetas } from "../../structures/IProductSeoMetas";

/**
 * Create product SEO meta record for a product/channel (`product_seo_metas`
 * table).
 *
 * Creates a new product SEO meta record for a specified product and channel.
 * Used by sellers/admins for advanced SEO and marketing operations. Payload
 * specifies all standard meta fields. Strong input validation: product/channel
 * existence, uniqueness, and required attributes. Access is logged for
 * audit/compliance. Existing meta may trigger error or be handled idempotently,
 * per implementation. Used for search enhancements and meta display on product
 * listings/UI. Failure scenarios (400, 403, 409) clearly reported.
 *
 * @param props.body Product SEO meta creation parameters: product_id,
 *   channel_id, meta_title (and optional description/keywords).
 * @path /productSeoMetas
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Product SEO meta creation parameters: product_id, channel_id,
     * meta_title (and optional description/keywords).
     */
    body: IProductSeoMeta.ICreate;
  };
  export type Body = IProductSeoMeta.ICreate;
  export type Response = IProductSeoMeta;

  export const METADATA = {
    method: "POST",
    path: "/productSeoMetas",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productSeoMetas";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSeoMeta => typia.random<IProductSeoMeta>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search product SEO meta records (`product_seo_metas`), paged/filtered.
 *
 * Retrieves a paged, filtered list of product SEO meta entries associated with
 * products/channels. Supports advanced search for admin/seller SEO operations.
 * Payload specifies filter/sort/search/page controls. Returns atomic metadata
 * (title, description, tags, etc.) and visibility controls. Enforces compliance
 * rules for masking or excluding sensitive/private meta fields. Implements
 * analytics and operational UX features for e-commerce SEO tuning.
 *
 * @param props.body Request parameters for search/pagination/filtering of SEO
 *   metas (by product/channel, etc).
 * @path /productSeoMetas
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Request parameters for search/pagination/filtering of SEO metas (by
     * product/channel, etc).
     */
    body: IProductSeoMeta.IRequest;
  };
  export type Body = IProductSeoMeta.IRequest;
  export type Response = IPageIProductSeoMeta;

  export const METADATA = {
    method: "PATCH",
    path: "/productSeoMetas",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productSeoMetas";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductSeoMeta => typia.random<IPageIProductSeoMeta>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get product SEO meta by ID (Single record, `product_seo_metas` table).
 *
 * Fetch the full SEO metadata for a product/channel by record ID. Returns
 * atomic meta fields: title, description, keywords, and linkage for advanced
 * interface use (SEO audits, search markup, etc). Used in management/analytics
 * flows for SEO tuning by sellers/admins, and possibly for customer-facing or
 * crawling on published entries. Soft-deleted records never shown. Full
 * compliance/audit coverage for metadata fetching.
 *
 * @param props.id Product SEO meta record ID to retrieve.
 * @path /productSeoMetas/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Product SEO meta record ID to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductSeoMeta;

  export const METADATA = {
    method: "GET",
    path: "/productSeoMetas/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productSeoMetas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSeoMeta => typia.random<IProductSeoMeta>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a product_seo_metas entry by ID (product_seo_metas).
 *
 * Updates details of an existing product SEO meta entry, leveraging atomic
 * field changes as described in the 'product_seo_metas' Prisma schema. The
 * update operation requires the unique identifier of the SEO meta (id) and
 * allows modification of properties such as meta_title, meta_description, or
 * meta_keywords. The operation enforces strict audit logging for all changes,
 * updating the 'updated_at' field, and ensuring that only authorized users with
 * suitable permissions may perform updates.
 *
 * Security considerations include RBAC enforcement so only permitted users
 * (typically admins and channel managers) may update SEO metadata. The
 * operation must validate that updates do not violate uniqueness constraints
 * (no duplicate SEO meta per product and channel) and must respect soft
 * deletion fields.
 *
 * Related read and delete operations are available for viewing and
 * soft-deleting SEO meta records for the same entity. If the entity is soft
 * deleted, it must not be possible (or must throw a suitable error) to update
 * it unless restored. Validation includes checks for existence, permission, and
 * validation of data length and structure (e.g., maximum length of meta
 * fields). Errors return a suitable error code and message, such as not found
 * or forbidden.
 *
 * @param props.id Target product SEO meta's ID
 * @param props.body Information for updating the product SEO meta fields.
 * @path /productSeoMetas/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target product SEO meta's ID */
    id: string & tags.Format<"uuid">;

    /** Information for updating the product SEO meta fields. */
    body: IProductSeoMetas.IUpdate;
  };
  export type Body = IProductSeoMetas.IUpdate;
  export type Response = IProductSeoMetas;

  export const METADATA = {
    method: "PUT",
    path: "/productSeoMetas/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productSeoMetas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSeoMetas => typia.random<IProductSeoMetas>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a product_seo_metas entry by ID (product_seo_metas).
 *
 * Logically deletes a product SEO meta record by ID, by setting the
 * 'deleted_at' field in the associated table. The product SEO meta entry is not
 * physically removed from the database, satisfying requirements around
 * regulatory audit, rollback, and legal retention. Only authorized users with
 * appropriate permissions (such as admins or product managers) can perform this
 * operation.
 *
 * The operation first verifies the existence of the record by ID and ensures
 * the record has not already been soft-deleted. If the identifier is not found
 * or if the record is already deleted, a suitable error is returned. The
 * operation does not remove related historical data or SEO logs but ensures the
 * deleted record cannot be used for further SEO queries or updates until
 * restored.
 *
 * The endpoint is tightly coupled with system audit mechanisms to ensure
 * traceability of all deletion actions. Restoration or view operations of
 * soft-deleted entries are possible through other endpoints as required.
 *
 * @param props.id Target product SEO meta's ID
 * @path /productSeoMetas/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target product SEO meta's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductSeoMetas;

  export const METADATA = {
    method: "DELETE",
    path: "/productSeoMetas/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productSeoMetas/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSeoMetas => typia.random<IProductSeoMetas>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

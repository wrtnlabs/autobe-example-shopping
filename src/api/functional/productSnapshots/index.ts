import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductSnapshot } from "../../structures/IProductSnapshot";
import { IPageIProductSnapshot } from "../../structures/IPageIProductSnapshot";

/**
 * Create a new snapshot for a product (`product_snapshots` table,
 * audit/compliance).
 *
 * Creates a new product snapshot. On any product update/publish, a record is
 * inserted capturing the full state at that time. Immutable, never updated,
 * only appended. All changes are trace-logged. Enforces audit and compliance
 * rules. Data is based on the `product_snapshots` schema in Prisma. Failure
 * cases: invalid parameters, permission denied, or missing references. Only
 * sellers or admins permitted.
 *
 * @param props.body Payload for creating a product snapshot, including all
 *   required versioned content and actor/user reference.
 * @path /productSnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Payload for creating a product snapshot, including all required
     * versioned content and actor/user reference.
     */
    body: IProductSnapshot.ICreate;
  };
  export type Body = IProductSnapshot.ICreate;
  export type Response = IProductSnapshot;

  export const METADATA = {
    method: "POST",
    path: "/productSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productSnapshots";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSnapshot => typia.random<IProductSnapshot>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Paginated, filtered retrieval of product_snapshots (product version history).
 *
 * Returns a paginated list of product snapshot records, supporting advanced
 * filters by product reference, actor, creation time, or published status. Used
 * in workflows for campaign setup, catalog rollback, compliance audits, and
 * management dashboards. Each snapshot returned is atomic, canonical, and
 * immutable once created, enabling robust digital commerce compliance (legal
 * rollback, immutable evidence for regulatory bodies). Errors cover bad request
 * and permission failure. The endpoint works in conjunction with other product
 * CRUD, snapshot fetch, and revert endpoints.
 *
 * @param props.body Search and filter parameters for querying product snapshots
 * @path /productSnapshots
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search and filter parameters for querying product snapshots */
    body: IProductSnapshot.IRequest;
  };
  export type Body = IProductSnapshot.IRequest;
  export type Response = IPageIProductSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/productSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productSnapshots";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductSnapshot => typia.random<IPageIProductSnapshot>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific product snapshot (`product_snapshots` table) by ID for
 * audit/history/rollback.
 *
 * This API is used to fetch a single product snapshot by its ID, which is an
 * immutable version of product information, used for audit trails and rollback
 * features per Product Domain requirements (see Prisma: product_snapshots). It
 * returns all snapshot metadata, editor references, and version details. Only
 * authorized users (based on roles/RBAC) can access a snapshot. Snapshots are
 * never edited after creation, ensuring compliance with audit immutability. If
 * the snapshot does not exist or permission is denied, a 404 or 403 error is
 * returned respectively. This endpoint is vital for e-commerce auditing and
 * historical UI reconstruction, supporting features like product history,
 * reversal, legal compliance, and analytics. Integrated with user activity
 * logging for full traceability.
 *
 * @param props.id ID of the product snapshot to retrieve.
 * @path /productSnapshots/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** ID of the product snapshot to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/productSnapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productSnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSnapshot => typia.random<IProductSnapshot>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update allowed meta-flags/status on a product snapshot by ID
 * (compliance/audit/rollback).
 *
 * Updates a product snapshot by ID, limited to changing allowed meta-properties
 * or status flags (e.g., publication, revocation). Per compliance, full content
 * is immutable, only logical switches may be altered (if system design
 * permits). Only admin or system actors may initiate. Full audit logging and
 * error handling for unauthorized mutation included. Guarantees snapshot chain
 * remains append-only for main data. 404 if not found; 403 if forbidden;
 * detailed error reporting for invalid modifications.
 *
 * @param props.id Target product snapshot's ID to update meta-properties.
 * @param props.body Payload to update meta-properties (e.g., published flag) of
 *   a product snapshot. No content/data fields allowed.
 * @path /productSnapshots/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target product snapshot's ID to update meta-properties. */
    id: string & tags.Format<"uuid">;

    /**
     * Payload to update meta-properties (e.g., published flag) of a product
     * snapshot. No content/data fields allowed.
     */
    body: IProductSnapshot.IUpdate;
  };
  export type Body = IProductSnapshot.IUpdate;
  export type Response = IProductSnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/productSnapshots/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productSnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSnapshot => typia.random<IProductSnapshot>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete (logically mark) a product snapshot by ID (never physical
 * deletion).
 *
 * Softly deletes (logically) a product snapshot by ID. Actual snapshot record
 * remains for audit/litigation, but is flagged as deleted/revoked per retention
 * policy. Only privileged users may trigger this. Operation is fully audited.
 * Returns the flagged snapshot or relevant error if not found/denied. Does not
 * erase any history, simply changes visible/active status of the targeted
 * version.
 *
 * @param props.id Target product snapshot's ID to mark deleted/revoked.
 * @path /productSnapshots/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target product snapshot's ID to mark deleted/revoked. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductSnapshot;

  export const METADATA = {
    method: "DELETE",
    path: "/productSnapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productSnapshots/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductSnapshot => typia.random<IProductSnapshot>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

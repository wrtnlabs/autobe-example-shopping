import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProductVariant } from "../../structures/IProductVariant";
import { IPageIProductVariant } from "../../structures/IPageIProductVariant";

/**
 * Create new product variant for a product ('product_variants' table).
 *
 * Enables authorized users (admin or assigned seller) to create a new product
 * variant (e.g., size, color, edition) attached to an existing product,
 * persisting a new row in the 'product_variants' table. The request must pass
 * input validation, ensuring uniqueness of code and validity of parent product
 * ID. Attaches initial meta (timestamps, active flags) and does not include
 * downstream option/attribute data—all such configuration is managed through
 * additional endpoints.
 *
 * After creation, a success response includes the atomic fields for the
 * variant, ready for downstream assignment of options/attributes. Error cases
 * include product not found, code conflicts, permission/authorization failures,
 * or invalid foreign references. An audit log and variant snapshot should be
 * produced as part of the operation.
 *
 * @param props.body Payload for creating product variant: parent product,
 *   unique code, atomic fields.
 * @path /productVariants
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Payload for creating product variant: parent product, unique code,
     * atomic fields.
     */
    body: IProductVariant.ICreate;
  };
  export type Body = IProductVariant.ICreate;
  export type Response = IProductVariant;

  export const METADATA = {
    method: "POST",
    path: "/productVariants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productVariants";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductVariant => typia.random<IProductVariant>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List product variants with search, filtering, and pagination
 * ('product_variants' table).
 *
 * This endpoint returns a paginated set of product variants from the
 * 'product_variants' table, allowing clients to apply search, filtering, and
 * ordering. Filters can include product ID (to find variants for a given
 * product), date range selection (created_at, updated_at), and pattern search
 * for code or label (with GIN/trgm support). The operation ensures that only
 * non-deleted (deleted_at is null) variants are returned, complying with
 * business visibility and audit policies.
 *
 * Pagination meta (total count, pages, etc.) must be included in the response.
 * Security checks restrict access to authenticated users (scope as required:
 * admin, seller). Joins to related atomic fields (product code, base info) may
 * be available in summary mode but never include redundant or deeply nested
 * objects. Error handling covers permission violation, invalid filters, and
 * out-of-range pagination requests. This endpoint is typically combined with
 * single-variant get/post/put/delete endpoints for detailed operations.
 *
 * @param props.body Parameters for variant list query: filters (product, code),
 *   page/size, search terms.
 * @path /productVariants
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Parameters for variant list query: filters (product, code),
     * page/size, search terms.
     */
    body: IProductVariant.IRequest;
  };
  export type Body = IProductVariant.IRequest;
  export type Response = IPageIProductVariant;

  export const METADATA = {
    method: "PATCH",
    path: "/productVariants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/productVariants";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIProductVariant => typia.random<IPageIProductVariant>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve single product variant by ID ('product_variants' table).
 *
 * Retrieves a single product variant identified by its UUID from the
 * 'product_variants' table. The returned object includes all atomic data
 * required to represent the variant—such as code, product association, status,
 * and timestamps—and may join essential reference data (e.g., product
 * code/name).
 *
 * Authorizations are checked to ensure only capable users (admin, assigned
 * seller, or employee) can query for individual variants. On not-found,
 * permission-denied, or deleted states, appropriate errors are surfaced. This
 * endpoint is commonly called after searching for variants (list endpoint) or
 * before performing updates/deletes to present the full initial state.
 *
 * @param props.id UUID of product variant to retrieve.
 * @path /productVariants/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of product variant to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductVariant;

  export const METADATA = {
    method: "GET",
    path: "/productVariants/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productVariants/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductVariant => typia.random<IProductVariant>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an atomic product variant record by ID ('product_variants' table).
 *
 * Permits editing of atomic attributes for a single product variant in the
 * 'product_variants' table, looked up by unique UUID. Allows changes to core
 * fields, such as code or product linkage (unless restricted), but does not
 * handle downstream data (such as option values, attributes, bundles).
 * Authorization is checked for admin/seller context—with operation denied to
 * unauthorized requesters. All business rules (uniqueness, existence, no
 * soft-deleted parent product references) are validated prior to update.
 *
 * A success response returns the altered product variant, reflecting updated
 * atomic fields and metadata. Fails on not-found, code conflict, invalid
 * relationships, or permission errors. The operation triggers a variant
 * snapshot, audit event, and business events as necessary. Use for
 * administrative maintenance, seller edits, or workflow-driven variant
 * updates.
 *
 * @param props.id UUID of product variant to update.
 * @param props.body Payload for atomic attribute updates to product variant.
 * @path /productVariants/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** UUID of product variant to update. */
    id: string & tags.Format<"uuid">;

    /** Payload for atomic attribute updates to product variant. */
    body: IProductVariant.IUpdate;
  };
  export type Body = IProductVariant.IUpdate;
  export type Response = IProductVariant;

  export const METADATA = {
    method: "PUT",
    path: "/productVariants/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/productVariants/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductVariant => typia.random<IProductVariant>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete product variant by ID ('product_variants' table).
 *
 * Marks a specified product variant as deleted by populating the deleted_at
 * field—effectively a compliance/soft-delete as per platform audit policy. The
 * service checks for current status (non-already-deleted),
 * ownership/authorization, and records all pertinent metadata (updated_at,
 * admin/seller ID, snapshot/audit log) for future trace.
 *
 * Returns the variant with updated deleted_at timestamp, confirming
 * inactivation. On not-found, permission error, or redundant invocation
 * (already deleted), returns applicable error. Bundled references and
 * downstream options/attributes are not physically deleted—handled by parent
 * status or separate process. Used in UIs for variant retirement, regulatory
 * purge, or admin/seller control.
 *
 * @param props.id UUID of product variant to delete (softly).
 * @path /productVariants/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of product variant to delete (softly). */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProductVariant;

  export const METADATA = {
    method: "DELETE",
    path: "/productVariants/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/productVariants/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IProductVariant => typia.random<IProductVariant>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IProduct } from "../../structures/IProduct";
import { IPageIProduct } from "../../structures/IPageIProduct";

/**
 * Create new product in shopping mall ('products' table).
 *
 * This operation creates a new product in the shopping mall, allowing sellers
 * or admins to insert a new product record into the 'products' table.
 *
 * On invocation, the endpoint expects a complete product descriptor that
 * includes the product's unique code (scoped to the channel), channel
 * reference, and any basic information required for first registration (e.g.,
 * creation timestamp, name, and optional initial associations if supported).
 * The process verifies channel membership and product code uniqueness to
 * preserve business integrity. The request strictly disallows redundant
 * data—only atomic product identification and foreign keys are permitted; all
 * detailed attributes (variants, media, SEO, descriptions, etc.) must be
 * managed in related downstream endpoints.
 *
 * Upon success, the endpoint should trigger post-processing: generation of an
 * initial product snapshot (immutable record of product state at creation),
 * audit log entry for compliance, and optional event notification for
 * admin/seller dashboards. Error handling includes code conflicts, invalid
 * channel reference, and permission-denied failures. The endpoint is secured
 * for authenticated, properly-permissioned users (admin/seller roles) and
 * returns the created product object with its ID and metadata for further
 * downstream operations.
 *
 * @param props.body Complete atomic product creation payload. Includes unique
 *   code, channel reference, and normal product fields.
 * @path /products
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Complete atomic product creation payload. Includes unique code,
     * channel reference, and normal product fields.
     */
    body: IProduct.ICreate;
  };
  export type Body = IProduct.ICreate;
  export type Response = IProduct;

  export const METADATA = {
    method: "POST",
    path: "/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/products";
  export const random = (g?: Partial<typia.IRandomGenerator>): IProduct =>
    typia.random<IProduct>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search products (products table), supporting multi-field filters and
 * paging.
 *
 * PATCH /products enables product listing and advanced searching. Supports full
 * catalog search, by title/code, filtering by fields (channel, tag, status,
 * created/updated range, etc.), and supports pagination and ordered results.
 * Intended for high-volume product catalogs.
 *
 * The request takes structured search params and returns paged product
 * summaries. Security handled per RBAC and context—different users may see
 * filtered results. All accesses are audit-logged and compliant with product
 * visibility rules. Connected endpoints: GET for details, POST for create, PUT
 * for update, DELETE for soft deletion. Related to ERD: products,
 * product_variants, options, categories, etc.
 *
 * @path /products
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(connection: IConnection): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
      );
}
export namespace patch {
  export type Response = IPageIProduct;

  export const METADATA = {
    method: "PATCH",
    path: "/products",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/products";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIProduct =>
    typia.random<IPageIProduct>(g);
  export const simulate = (connection: IConnection): Response => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch single product by ID (products table), full detail including relations.
 *
 * GET /products/{id} returns full details of a given product, including channel
 * context, all direct attributes, and core links to variants, bundles, options,
 * and SEO metadata. Complements PATCH /products for browsing/searching,
 * supports detail view/audit in admin/seller UI, and consumer product
 * presents.
 *
 * Handles soft deletion, permissions, and visibility rules. Returns 404 on
 * missing/deleted products. Entry includes product info, variant/bundle/options
 * links, and references to snapshots and extended metadata (SEO, related
 * products, reviews, etc). Related: PATCH /products for searching, POST for
 * create, PUT for update, DELETE for soft delete.
 *
 * @param props.id Target product's ID
 * @path /products/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target product's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProduct;

  export const METADATA = {
    method: "GET",
    path: "/products/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/products/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IProduct =>
    typia.random<IProduct>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update existing product information ('products' table).
 *
 * This operation updates an existing product entry in the 'products' table,
 * referenced by its unique ID. The endpoint allows authorized users
 * (admins/sellers with permission) to patch atomic product fields, such as
 * code, administrative flags, or relationships, except for business-limiting
 * keys such as deleted_at (which is handled by the delete endpoint).
 *
 * The process first validates product existence and
 * authentication/authorization of the requester. It applies uniqueness checks
 * (e.g., updated product code must remain unique within the channel) and
 * ensures no redundant or derived fields are accepted. On successful update,
 * the service must generate a new immutable product snapshot (for audit and
 * rollback) and update audit logs accordingly.
 *
 * Error responses include not-found, code conflict, permission failure, and
 * business-rule violations. Transactionality is enforced to avoid partial
 * updates. Returns updated product with metadata; does not include downstream
 * related resource modifications (handled by their specific endpoints).
 *
 * @param props.id Unique identifier (UUID) for the product to be updated.
 * @param props.body Patch payload for updatable product fields; excludes soft
 *   delete marker and related resource data.
 * @path /products/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier (UUID) for the product to be updated. */
    id: string & tags.Format<"uuid">;

    /**
     * Patch payload for updatable product fields; excludes soft delete
     * marker and related resource data.
     */
    body: IProduct.IUpdate;
  };
  export type Body = IProduct.IUpdate;
  export type Response = IProduct;

  export const METADATA = {
    method: "PUT",
    path: "/products/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/products/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IProduct =>
    typia.random<IProduct>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete product by ID (update 'deleted_at' field, 'products' table).
 *
 * This operation marks a product as deleted in the 'products'
 * table—implementing soft delete (sets deleted_at rather than removing data).
 * Used by admins or sellers holding the right permissions, the process finds
 * the target product by UUID, verifies current non-deleted state, and updates
 * the deleted_at timestamp.
 *
 * Post-deletion, the action triggers a new product snapshot (for
 * audit/history/legal compliance), updates audit logs, and typically initiates
 * removal from downstream references (e.g., active catalog listings, product
 * search indices). Error scenarios include not-found (already deleted),
 * permission denied, or transactional errors on update. The deleted product
 * object (with deleted_at populated) is returned for confirmation.
 *
 * @param props.id Unique identifier (UUID) for the product to delete.
 * @path /products/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier (UUID) for the product to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IProduct;

  export const METADATA = {
    method: "DELETE",
    path: "/products/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/products/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IProduct =>
    typia.random<IProduct>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

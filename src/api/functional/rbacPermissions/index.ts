import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRbacPermission } from "../../structures/IRbacPermission";
import { IPageIRbacPermission } from "../../structures/IPageIRbacPermission";

/**
 * Create a new RBAC permission in the rbac_permissions table.
 *
 * This endpoint is used to create a new RBAC permission entity, mapping
 * directly to the 'rbac_permissions' table in the database, enforcing
 * fine-grained system or custom permissions for role-based access control
 * (RBAC).
 *
 * Upon receiving a POST request, the system validates the provided permission
 * code (ensuring uniqueness) and captures additional fields such as description
 * and is_builtin (to differentiate system vs admin-defined roles). Only
 * authorized admin users are permitted to call this endpointâ€”as permission
 * creation can impact overall system security. The system audits this action by
 * recording the creator and timestamp for compliance and rollback.
 *
 * Field validation ensures that permissions are atomic, do not duplicate
 * existing values, and link only by reference (not denormalized) to
 * assignments. Attempting to add a duplicate code will trigger a conflict
 * error, while missing/invalid data results in a validation error. On success,
 * the endpoint returns the created permission object.
 *
 * @param props.body RBAC permission creation payload, matching rbac_permissions
 *   schema. Must include required fields: code (string, unique), description
 *   (optional), is_builtin (bool).
 * @path /rbacPermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * RBAC permission creation payload, matching rbac_permissions schema.
     * Must include required fields: code (string, unique), description
     * (optional), is_builtin (bool).
     */
    body: IRbacPermission.ICreate;
  };
  export type Body = IRbacPermission.ICreate;
  export type Response = IRbacPermission;

  export const METADATA = {
    method: "POST",
    path: "/rbacPermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/rbacPermissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRbacPermission => typia.random<IRbacPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search RBAC permissions (from 'rbac_permissions' table) with
 * paging/filter support.
 *
 * Enables privileged actors (admins/governance officers) to retrieve a
 * paginated and filterable list of all permission definitions currently
 * configured in the 'rbac_permissions' table. Provides search (by
 * code/description), paging, and sorting. Per schema comments, permissions are
 * only assigned to roles via assignments (not managed here). Security: strictly
 * enforced by RBAC scope. All results provide normalized attributes, including
 * is_builtin and timestamp metadata. Provides oversight capability as part of
 * full RBAC CRUD. Errors for permission and bad/paging queries are handled with
 * clear error messages per standard.
 *
 * @param props.body Paging, sort, and filter/search criteria for permission
 *   list.
 * @path /rbacPermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Paging, sort, and filter/search criteria for permission list. */
    body: IRbacPermission.IRequest;
  };
  export type Body = IRbacPermission.IRequest;
  export type Response = IPageIRbacPermission;

  export const METADATA = {
    method: "PATCH",
    path: "/rbacPermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/rbacPermissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIRbacPermission => typia.random<IPageIRbacPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific RBAC permission detail (from 'rbac_permissions' table) by id.
 *
 * Fetches the complete specification of a specific RBAC permission by its id as
 * defined in the database schema ('rbac_permissions'). Returns code,
 * description, is_builtin, timestamps, and all attribute metadata. Used for
 * oversight, RBAC workflow UX and auditing. Access: RBAC enforced so only users
 * with system or permission-management rights may invoke.
 * Not-found/invalid/unauthorized respond with standard error code/message.
 * Complements PATCH/POST/PUT/DELETE for the resource suite.
 *
 * @param props.id Unique id of the RBAC permission to fetch.
 * @path /rbacPermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique id of the RBAC permission to fetch. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRbacPermission;

  export const METADATA = {
    method: "GET",
    path: "/rbacPermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/rbacPermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRbacPermission => typia.random<IRbacPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an RBAC permission by ID in the rbac_permissions table.
 *
 * This endpoint allows updates to an existing RBAC permission identified by its
 * unique ID. All fields, including code, description, and is_builtin can be
 * updated according to authorization policies (e.g., only system users can
 * update code/is_builtin fields). Every update is audit-logged with both the
 * original and new data for compliance traceability.
 *
 * The update logic strictly enforces atomic changes without denormalization or
 * cross-entity changes. If an update attempts to change a permission code to a
 * value already in use, a conflict error is returned. If the specified
 * permission does not exist, a not-found error results. Robust validation
 * ensures only valid fields are updated according to the RBAC permission
 * schema. This operation is critical for evolving system role and permission
 * management under RBAC.
 *
 * All update actions must be captured in the audit log for regulatory
 * compliance and troubleshooting.
 *
 * @param props.id Unique identifier for the RBAC permission to update.
 * @param props.body RBAC permission update payload. May include code,
 *   description, is_builtin (as per admin/system rights).
 * @path /rbacPermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier for the RBAC permission to update. */
    id: string & tags.Format<"uuid">;

    /**
     * RBAC permission update payload. May include code, description,
     * is_builtin (as per admin/system rights).
     */
    body: IRbacPermission.IUpdate;
  };
  export type Body = IRbacPermission.IUpdate;
  export type Response = IRbacPermission;

  export const METADATA = {
    method: "PUT",
    path: "/rbacPermissions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/rbacPermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRbacPermission => typia.random<IRbacPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Logically delete (soft delete) an RBAC permission by ID.
 *
 * This endpoint allows for the logical (soft) deletion of an RBAC permission
 * entry, strictly following the soft delete policy (deleted_at timestamp) for
 * compliance and auditing. It does not physically remove the record,
 * maintaining the ability to audit or restore permissions if necessary.
 *
 * Authorized system/admin users must provide the permission's unique ID. Before
 * marking the permission as deleted, the endpoint checks whether the permission
 * exists and whether it is currently assigned to any roles. If assigned, it may
 * block the deletion or require force confirmation, depending on business rules
 * (e.g., cannot delete active permissions).
 *
 * All deletion attempts and outcomes, including errors like not-found or
 * assignment-in-use, are audit-logged for compliance. Successful soft delete
 * returns either the updated permission object (showing deleted_at) or a
 * confirmation status.
 *
 * @param props.id Unique identifier for the RBAC permission to delete.
 * @path /rbacPermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier for the RBAC permission to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRbacPermission;

  export const METADATA = {
    method: "DELETE",
    path: "/rbacPermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/rbacPermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRbacPermission => typia.random<IRbacPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRecommendation } from "../../structures/IRecommendation";
import { IPageIRecommendation } from "../../structures/IPageIRecommendation";

/**
 * Create new recommendation record (table: recommendation).
 *
 * Clients or automated AI subsystems use this endpoint to create a new
 * recommendation record, providing details such as the user (user_id), AI
 * provider, recommendation type, target entity, and any associated metadata.
 * The endpoint validates all required fields and ensures referential integrity
 * (AI provider and user exist, permission to recommend). Upon successful
 * creation, returns the newly created record. Creation is always audit-logged
 * for compliance. If any validation fails (missing fields, not found, RBAC), an
 * error is returned. Used by personalization, analytics, and reporting
 * modules.
 *
 * @param props.body Recommendation creation details.
 * @path /recommendation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Recommendation creation details. */
    body: IRecommendation.ICreate;
  };
  export type Body = IRecommendation.ICreate;
  export type Response = IRecommendation;

  export const METADATA = {
    method: "POST",
    path: "/recommendation",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recommendation";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRecommendation => typia.random<IRecommendation>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search recommendations with advanced filters/pagination (table:
 * recommendation).
 *
 * Returns a paginated and optionally filtered list of recommendation records
 * from the 'recommendation' table. Clients may provide filters on
 * recommendation_type, user_id, ai_provider_id, or other fields, as well as
 * specify sort order and pagination parameters (page/size). This endpoint
 * enforces RBAC -- only authorized users can list recommendations (admins for
 * global; users for their own records). Results include all metadata about each
 * recommendation, including links to AI providers, user, type, entity, target,
 * and metadata. Errors are returned for invalid queries or insufficient
 * permissions. Used in analytics modules, reporting tools, or personalized
 * UIs.
 *
 * @param props.body Search, filter, and pagination options for recommendations.
 * @path /recommendation
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search, filter, and pagination options for recommendations. */
    body: IRecommendation.IRequest;
  };
  export type Body = IRecommendation.IRequest;
  export type Response = IPageIRecommendation;

  export const METADATA = {
    method: "PATCH",
    path: "/recommendation",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/recommendation";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIRecommendation => typia.random<IPageIRecommendation>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a single recommendation detail by ID (table: recommendation).
 *
 * Retrieves a single recommendation entry from the 'recommendation' table by
 * its unique ID. Checks RBAC: only users with appropriate privileges or the
 * record owner may view this recommendation. If found and authorized, returns
 * full record details, including referencing AI provider info and any
 * additional metadata. Errors are raised if not found or access is denied. Used
 * in recommendation audit tools, personalization engines, or compliance
 * reviews.
 *
 * @param props.id Target recommendation record's ID.
 * @path /recommendation/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target recommendation record's ID. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecommendation;

  export const METADATA = {
    method: "GET",
    path: "/recommendation/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recommendation/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRecommendation => typia.random<IRecommendation>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a recommendation record by ID (table: recommendation).
 *
 * Updates the mutable properties of a recommendation record, such as metadata
 * or the recommendation type, not immutable core references. The endpoint first
 * verifies that the record exists, checks if the user is authorized to update
 * it, and then applies the update, logging the event for audit. Only
 * non-critical business fields are allowed to change. Errors are raised if
 * invalid, forbidden, or not found. Used for correcting or annotating existing
 * recommendation records.
 *
 * @param props.id Target recommendation record's ID.
 * @param props.body Updated recommendation details.
 * @path /recommendation/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target recommendation record's ID. */
    id: string & tags.Format<"uuid">;

    /** Updated recommendation details. */
    body: IRecommendation.IUpdate;
  };
  export type Body = IRecommendation.IUpdate;
  export type Response = IRecommendation;

  export const METADATA = {
    method: "PUT",
    path: "/recommendation/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/recommendation/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRecommendation => typia.random<IRecommendation>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete a recommendation record by ID (table: recommendation).
 *
 * Performs a soft delete on a recommendation record by updating its
 * 'deleted_at' field, preserving for audit/legal compliance. The operation is
 * only available to privileged roles (admin/AI analytics manager). Checks for
 * existence and authorization before marking the record. Returns success status
 * and the updated record. Used in admin dashboards or compliance review UIs.
 *
 * @param props.id Target recommendation record's ID.
 * @path /recommendation/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target recommendation record's ID. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRecommendation;

  export const METADATA = {
    method: "DELETE",
    path: "/recommendation/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/recommendation/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IRecommendation => typia.random<IRecommendation>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

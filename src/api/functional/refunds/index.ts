import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IRefund } from "../../structures/IRefund";
import { IPageIRefund } from "../../structures/IPageIRefund";

/**
 * Create a new refund (refunds table).
 *
 * This API allows for the creation of a new refund record. The client submits
 * refund details such as user reference, amount, refund method, status, legal
 * region, and relevant timestamps (creation, update). Upon request validation,
 * a new entry is persisted in the 'refunds' table and additional business logic
 * may trigger notifications, audit log entries, or compliance workflows (e.g.,
 * regulatory export).
 *
 * The API is critical for finance/admin operations, auto-refund logic, or user
 * self-service initiations (if policy permits). RBAC and business rules should
 * control which actors or roles can submit refunds, particularly for sensitive
 * methods (e.g., bank/cash). After creation, the full refund object—including
 * its assigned ID and initial status—is returned in the response.
 *
 * Errors: validation errors for malformed inputs, 403 for lacking permission,
 * and compliance-triggered rejections such as policy locks or suspicious
 * triggers requiring escalation.
 *
 * Dependent flows may include automatic notification to users/admins or
 * scheduled export to accounting systems.
 *
 * @param props.body Refund creation data (user, amount, method, etc).
 * @path /refunds
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Refund creation data (user, amount, method, etc). */
    body: IRefund.ICreate;
  };
  export type Body = IRefund.ICreate;
  export type Response = IRefund;

  export const METADATA = {
    method: "POST",
    path: "/refunds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/refunds";
  export const random = (g?: Partial<typia.IRandomGenerator>): IRefund =>
    typia.random<IRefund>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search and list paginated refunds (refunds table).
 *
 * This API returns a paginated, filtered list of refund records from the
 * 'refunds' database table. It is designed for administrators, support staff,
 * or finance dashboard users to search for refunds by user, refund method,
 * status, region, time windows, and other compliance or business-related
 * filters.
 *
 * Supports robust pagination and sorting for efficient querying of large
 * histories, helping with regulatory reporting, business reconciliation, and
 * end-user support scenarios.
 *
 * All query parameters are managed through the request body object, enabling
 * extensible future filters (status, region, time, amount, etc.). This list
 * endpoint does not expose any user PII directly but returns references so
 * users with sufficient permissions can navigate to refund details.
 *
 * This API should have strict RBAC: only staff with the appropriate permission
 * (e.g., 'manage_refunds') can fetch all records; users may be scoped only to
 * their own refunds unless elevated. Related endpoints include single refund
 * retrieval, refund creation, and refund update.
 *
 * Error handling includes validation errors for invalid query parameters and
 * permission-related errors where appropriate.
 *
 * @param props.body Refund search filters, pagination, and sorting options.
 * @path /refunds
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Refund search filters, pagination, and sorting options. */
    body: IRefund.IRequest;
  };
  export type Body = IRefund.IRequest;
  export type Response = IPageIRefund;

  export const METADATA = {
    method: "PATCH",
    path: "/refunds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/refunds";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIRefund =>
    typia.random<IPageIRefund>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get full details of a refund by ID (refunds table).
 *
 * This endpoint fetches all available details about a specified refund, as
 * stored in the 'refunds' table. The result includes status, amount, creation
 * and update times, associated user information (referenced by ID), legal
 * region, refund method, and soft-delete status.
 *
 * This API is vital for staff handling refund workflow, compliance review, or
 * for presenting refund status in user portals. Only authorized users (owners,
 * admins, or finance staff with 'view_refund' permission) are allowed to access
 * this endpoint; other access is denied to preserve confidentiality.
 *
 * Error responses include 404 if the refund ID does not exist, and 403 if the
 * caller is not authorized to view the refund. Related endpoints include
 * list/search, create, update, and delete operations for refunds.
 *
 * This detail API helps fulfill business, compliance, and operational
 * requirements for refund tracking.
 *
 * @param props.id Unique identifier of the refund to retrieve.
 * @path /refunds/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the refund to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRefund;

  export const METADATA = {
    method: "GET",
    path: "/refunds/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/refunds/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IRefund =>
    typia.random<IRefund>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a refund record by ID (refunds table).
 *
 * Enables authorized staff (admin/Finance) to update a refund record identified
 * by its unique ID. Fields eligible for update include status, updated amount,
 * legal region, method, etc., as permitted by business rules and workflow
 * state. Each update is audit-logged to fulfill compliance/auditability.
 *
 * This endpoint ensures robust control over refund management, typically for
 * workflow progress (approval, completed, failed, reversed) and error
 * correction. Only users with sufficient permission (e.g., staff in refund
 * processing roles) can execute updates. The updated refund object is returned
 * upon success.
 *
 * The operation must respect regulatory policies (immutable fields, rollback
 * protection); attempts to update locked/refused refunds return business logic
 * errors. 404 is returned for nonexistent IDs. If the refund is soft-deleted
 * (deleted_at set), most updates are prohibited except for restoration with
 * appropriate permissions.
 *
 * Integration points: notification triggers, audit log, external accounting
 * export.
 *
 * Related: get, create, delete refund, and paginated list endpoints.
 *
 * @param props.id Unique identifier of the refund to update.
 * @param props.body Updated refund information (status, amount, region, etc).
 * @path /refunds/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the refund to update. */
    id: string & tags.Format<"uuid">;

    /** Updated refund information (status, amount, region, etc). */
    body: IRefund.IUpdate;
  };
  export type Body = IRefund.IUpdate;
  export type Response = IRefund;

  export const METADATA = {
    method: "PUT",
    path: "/refunds/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/refunds/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IRefund =>
    typia.random<IRefund>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a refund by ID (refunds table).
 *
 * This endpoint is used to soft-delete (not physically delete) a refund record.
 * The operation updates the deleted_at field for the corresponding refund,
 * allowing regulatory retention and compliance history to be maintained. It is
 * only available to authorized users such as financial ops, admins, or
 * compliance personnel per RBAC.
 *
 * If the refund is already deleted or not found, returns 404. Deleted refunds
 * remain present in audit logs and are included in overall refund reporting as
 * needed for legal requirements.
 *
 * No user PII is deleted; refund data remains for audit and data reporting. The
 * API returns the soft-deleted refund record or a delete confirmation object.
 *
 * Access must be strictly controlled. Related operations: listing, detail
 * retrieval, creation, and update of refunds.
 *
 * @param props.id Unique identifier of the refund to be soft-deleted.
 * @path /refunds/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the refund to be soft-deleted. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IRefund;

  export const METADATA = {
    method: "DELETE",
    path: "/refunds/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/refunds/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IRefund =>
    typia.random<IRefund>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

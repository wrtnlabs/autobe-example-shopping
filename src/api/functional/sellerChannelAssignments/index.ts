import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISellerChannelAssignment } from "../../structures/ISellerChannelAssignment";
import { IPageISellerChannelAssignment } from "../../structures/IPageISellerChannelAssignment";

/**
 * Create a new seller_channel_assignment (seller_channel_assignments table).
 *
 * This API endpoint creates a new assignment between a seller and a channel, as
 * defined in the seller_channel_assignments table. The request body includes
 * seller_id, channel_id, and assigned_at (timestamp of assignment). It enforces
 * uniqueness constraint (no duplicate seller/channel pairs) and triggers any
 * business logic (e.g., onboarding notifications or compliance audits). Only
 * admins with appropriate channel management permissions may use this
 * endpoint.
 *
 * If the combination already exists and is active, a 409 Conflict is returned.
 * Newly created assignments include all link metadata. Supports full onboarding
 * and channel management flows requiring dynamic access to channels.
 *
 * @param props.body Data to link a seller to a channel; includes IDs and
 *   assigned_at timestamp.
 * @path /sellerChannelAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Data to link a seller to a channel; includes IDs and assigned_at
     * timestamp.
     */
    body: ISellerChannelAssignment.ICreate;
  };
  export type Body = ISellerChannelAssignment.ICreate;
  export type Response = ISellerChannelAssignment;

  export const METADATA = {
    method: "POST",
    path: "/sellerChannelAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/sellerChannelAssignments";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ISellerChannelAssignment => typia.random<ISellerChannelAssignment>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search seller_channel_assignments (seller_channel_assignments table,
 * PATCH for search).
 *
 * This API endpoint returns a paginated list of seller_channel_assignments, as
 * implemented in the seller_channel_assignments table. Its main purpose is to
 * supply admin users, onboarding systems, and review/audit processes with a
 * filtered list of seller-to-channel assignments, including assignment and
 * revocation info. Supports filtering by seller_id, channel_id, dates, and
 * search keywords; includes pagination controls (page, pageSize, sort order).
 * The response structure contains both the list of assignments and pagination
 * metadata (total count, current page, etc).
 *
 * Security: Only accessible to users with suitable admin privileges or channel
 * management rights. Data includes assigned_at/revoked_at, linked
 * seller/channel IDs, and may be cross-joined to fetch conversation-friendly
 * display (seller nickname, channel name).
 *
 * This operation aligns with onboarding flows, channel assignment management,
 * and compliance reviews, as detailed in system requirements. Useful for
 * developing dashboards or analytics around channel-seller mapping. Errors are
 * returned for invalid paging or access.
 *
 * @param props.body Query object specifying filter, search, and pagination for
 *   seller_channel_assignments.
 * @path /sellerChannelAssignments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Query object specifying filter, search, and pagination for
     * seller_channel_assignments.
     */
    body: ISellerChannelAssignment.IRequest;
  };
  export type Body = ISellerChannelAssignment.IRequest;
  export type Response = IPageISellerChannelAssignment;

  export const METADATA = {
    method: "PATCH",
    path: "/sellerChannelAssignments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/sellerChannelAssignments";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageISellerChannelAssignment =>
    typia.random<IPageISellerChannelAssignment>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get seller_channel_assignment by ID (seller_channel_assignments table).
 *
 * Fetch the details of a specific seller_channel_assignment entity from the
 * seller_channel_assignments table. Fields include id, seller_id, channel_id,
 * assigned_at, revoked_at. Relationships (to seller and channel) are resolved
 * for display (optional: include seller nickname, channel name). The endpoint
 * supports audit, onboarding, and compliance monitoring use cases, as detailed
 * in requirements, such as answering the question: 'Which channels has this
 * seller been granted access to, and when?' Soft deletion/revocation status is
 * also returned (revoked_at).
 *
 * If not found or access denied, returns a 404. Only admin users or those with
 * assignment management rights may access this API.
 *
 * @param props.id Unique ID of the seller_channel_assignment to fetch.
 * @path /sellerChannelAssignments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the seller_channel_assignment to fetch. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISellerChannelAssignment;

  export const METADATA = {
    method: "GET",
    path: "/sellerChannelAssignments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/sellerChannelAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ISellerChannelAssignment => typia.random<ISellerChannelAssignment>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update seller_channel_assignment by ID (seller_channel_assignments table).
 *
 * Update the fields of a seller_channel_assignment entry, identified by id.
 * Editable fields may include revoked_at (to indicate channel removal or
 * suspension), and possibly switching channel_id for reassignment (depending on
 * business constraints). All updates are logged for audit, in compliance with
 * the requirements on assignment granularity and rollback possibility. RBAC
 * checks ensure only channel-admins or super-admins may modify assignments.
 * Soft-deleted or revoked assignments cannot typically be re-enabled without
 * re-creation.
 *
 * @param props.id The ID of the seller_channel_assignment to update.
 * @param props.body Fields to update (e.g., revoked_at, possibly channel_id).
 * @path /sellerChannelAssignments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** The ID of the seller_channel_assignment to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update (e.g., revoked_at, possibly channel_id). */
    body: ISellerChannelAssignment.IUpdate;
  };
  export type Body = ISellerChannelAssignment.IUpdate;
  export type Response = ISellerChannelAssignment;

  export const METADATA = {
    method: "PUT",
    path: "/sellerChannelAssignments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/sellerChannelAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ISellerChannelAssignment => typia.random<ISellerChannelAssignment>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete (revoke/soft-delete) seller_channel_assignment by ID
 * (seller_channel_assignments table).
 *
 * This API marks an assignment record between seller and channel as revoked (by
 * setting revoked_at). Used for removing a seller from a channel, handling
 * onboarding failure, or revocation of access. This upholds compliance
 * requirements for immutable history and audit trails as defined for
 * seller_channel_assignments. RBAC checks restrict to privileged
 * channel-admins. Soft deletion ensures the record can be audited/reinstated as
 * necessary.
 *
 * @param props.id The unique ID of the seller_channel_assignment to
 *   revoke/delete.
 * @path /sellerChannelAssignments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** The unique ID of the seller_channel_assignment to revoke/delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISellerChannelAssignment;

  export const METADATA = {
    method: "DELETE",
    path: "/sellerChannelAssignments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/sellerChannelAssignments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ISellerChannelAssignment => typia.random<ISellerChannelAssignment>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

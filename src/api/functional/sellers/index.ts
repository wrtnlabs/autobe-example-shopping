import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ISeller } from "../../structures/ISeller";
import { IPageISeller } from "../../structures/IPageISeller";

/**
 * Create a new seller (onboard) in sellers table, registering with owner user
 * and necessary metadata.
 *
 * This API operation accepts seller registration information and inserts a new
 * seller record into the sellers database table. The payload includes required
 * attributes such as user_id, nickname, status, plus optional fields per
 * onboarding flow. On success, the new seller is registered, their status set
 * as per the input, and RBAC/permission escalation flows can be triggered
 * externally. Input is validated for duplicate user_id and business rules.
 * Action is fully audit-logged. Related tables
 * (verifications/permissions/assignments) are not written by this endpoint;
 * downstream workflow must invoke those APIs if needed. Errors on duplicate
 * user_id or data validation violation are clearly surfaced in response.
 *
 * @param props.body Creation payload for new seller (must include user_id,
 *   nickname, status); no verifications/assignments
 * @path /sellers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Creation payload for new seller (must include user_id, nickname,
     * status); no verifications/assignments
     */
    body: ISeller.ICreate;
  };
  export type Body = ISeller.ICreate;
  export type Response = ISeller;

  export const METADATA = {
    method: "POST",
    path: "/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/sellers";
  export const random = (g?: Partial<typia.IRandomGenerator>): ISeller =>
    typia.random<ISeller>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Paginated/searchable list operation for all sellers (sellers table), with
 * RBAC and data masking as required.
 *
 * This API retrieves a paginated, searchable list of sellers from the sellers
 * table. Supports filtering on status, date ranges, channel assignment, and
 * free-text search (nickname, email). Pagination, sorting direction (asc/desc),
 * and optional export features (bulk download) are controlled via request body.
 * Only authorized users (admins, operator sellers, etc.) may invoke this
 * endpoint, and the returned data is filtered for privacy in compliance with
 * permission matrix and regulatory policy. API output is a page object
 * including meta (total count, next/prev cursors) and the data array of
 * sellers, showing only permitted fields (no PII/leaked RBAC state). May be
 * composed with additional filter options for advanced enterprise or BI use
 * cases.
 *
 * @param props.body List/search query with pagination, sorting, and filter
 *   properties for the sellers table
 * @path /sellers
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * List/search query with pagination, sorting, and filter properties for
     * the sellers table
     */
    body: ISeller.IRequest;
  };
  export type Body = ISeller.IRequest;
  export type Response = IPageISeller;

  export const METADATA = {
    method: "PATCH",
    path: "/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/sellers";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageISeller =>
    typia.random<IPageISeller>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a single seller's full details by ID (sellers table), enforcing privacy
 * and RBAC masking.
 *
 * This endpoint fetches detailed information of a seller as defined in the
 * sellers table, by primary key id. It returns all data fields including
 * nickname, status, creation/update timestamps, and associated linked entities
 * (such as verification steps, assigned channels, granted permissions). RBAC
 * ensures only authorized roles (the seller themself, relevant admins, or
 * channel managers) can see this data, and PII/masked fields enforced for other
 * viewers. The response may include embedded objects (verifications,
 * permissions) if requested/authorized. A 404 error is returned if the seller
 * does not exist or has been deleted.
 *
 * @param props.id Target seller's unique ID
 * @path /sellers/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target seller's unique ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISeller;

  export const METADATA = {
    method: "GET",
    path: "/sellers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/sellers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ISeller =>
    typia.random<ISeller>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update one seller record by ID in sellers table, with full audit and
 * permission/validation checks.
 *
 * This operation edits (in-place, full overwrite) one seller row identified by
 * id in sellers table. Updatable fields include nickname, status, and any other
 * explicitly allowed columnsâ€”write requests must pass both data validation and
 * RBAC checks (i.e., a seller can self-update their own nickname, but only
 * admins can change status). Business rules (e.g., allow status to be advanced
 * but not regressed) and logic for soft deletion are enforced. All changes are
 * audit-logged. Attempts to update forbidden fields or to operate on a deleted
 * seller are blocked with clear errors (403/404). Verifications, permissions,
 * and assignments must be modified through their dedicated APIs, not here.
 *
 * @param props.id Seller's unique ID (primary key) for update
 * @param props.body Update details for a seller (nickname, status, etc).
 *   Verifications/permissions handled in dedicated endpoints.
 * @path /sellers/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Seller's unique ID (primary key) for update */
    id: string & tags.Format<"uuid">;

    /**
     * Update details for a seller (nickname, status, etc).
     * Verifications/permissions handled in dedicated endpoints.
     */
    body: ISeller.IUpdate;
  };
  export type Body = ISeller.IUpdate;
  export type Response = ISeller;

  export const METADATA = {
    method: "PUT",
    path: "/sellers/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/sellers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): ISeller =>
    typia.random<ISeller>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete/disable a seller row in sellers table, setting deleted_at; with
 * full audit.
 *
 * This operation performs a soft delete of a single seller row, referenced by
 * id in the sellers table. Instead of physical removal, the record's deleted_at
 * timestamp is set. This is in line with compliance and auditability mandates
 * (see 'Business, Compliance & Security'), ensuring data is never irreversibly
 * purged. Only actors with correct permissions may delete (typically admin or
 * the seller with post-confirmation). Operation is audit-logged, and responses
 * indicate success or error cause (not found/forbidden). Linked entities
 * (verifications, assignments) remain for auditâ€”no cascade is performed here.
 *
 * @param props.id Seller's unique ID for soft deletion
 * @path /sellers/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Seller's unique ID for soft deletion */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ISeller.ISoftDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/sellers/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/sellers/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): ISeller.ISoftDeleteResult => typia.random<ISeller.ISoftDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShipment } from "../../structures/IShipment";
import { IPageIShipment } from "../../structures/IPageIShipment";

/**
 * Create a new shipment in the 'shipments' table.
 *
 * This endpoint creates a shipment record in the shipments table, capturing
 * details such as order reference, responsible actor, carrier, tracking number
 * (optional), status, and timestamps. It is used in operational handoff to
 * shipping providers, logistics dashboards, or automated outbound-warehouse
 * workflows. Validation checks all references (order, actor). Related endpoints
 * include update (PUT), listing (PATCH), detail (GET), and deletion (DELETE).
 * Idempotency is managed at workflow/business-logic level (e.g., to prevent
 * duplicate shipment creation for an order). Errors for missing required
 * references or invalid values are returned.
 *
 * @param props.body Required shipment creation fields (order_id, actor_id,
 *   carrier, status, tracking number, timestamps, etc.).
 * @path /shipments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Required shipment creation fields (order_id, actor_id, carrier,
     * status, tracking number, timestamps, etc.).
     */
    body: IShipment.ICreate;
  };
  export type Body = IShipment.ICreate;
  export type Response = IShipment;

  export const METADATA = {
    method: "POST",
    path: "/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shipments";
  export const random = (g?: Partial<typia.IRandomGenerator>): IShipment =>
    typia.random<IShipment>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List shipments with searching, filtering, and pagination in the 'shipments'
 * table.
 *
 * This endpoint retrieves a paginated and filtered list of shipment records
 * from the shipments table. Filters and search fields may include order_id,
 * actor_id, status, carrier, tracking_number, shipped_at, delivered_at, among
 * other attributes relevant to shipment operations and analytics. Pagination
 * and sorting parameters are handled through the request body for maximum
 * flexibility. Records marked deleted are excluded from normal queries. Related
 * endpoints include detail (GET), create (POST), update (PUT), and deletion
 * (DELETE). Returns a paginated result object.
 *
 * @param props.body Filter, search, and pagination information for shipment
 *   list retrieval.
 * @path /shipments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filter, search, and pagination information for shipment list
     * retrieval.
     */
    body: IShipment.IRequest;
  };
  export type Body = IShipment.IRequest;
  export type Response = IPageIShipment;

  export const METADATA = {
    method: "PATCH",
    path: "/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shipments";
  export const random = (g?: Partial<typia.IRandomGenerator>): IPageIShipment =>
    typia.random<IPageIShipment>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a shipment by ID from the 'shipments' table.
 *
 * This endpoint fetches a shipment record by unique ID, returning all stored
 * fields (order, actor, carrier, tracking number, timestamps, etc.), omitting
 * or masking sensitive fields as required by business logic and compliance.
 * This operation is leveraged for parcel tracking, analytic dashboards, or
 * incident investigations. Attempts to query a non-existent or deleted shipment
 * return 404. Related endpoints: list (PATCH), creation (POST), update (PUT),
 * delete (DELETE).
 *
 * @param props.id Unique identifier of the shipment to retrieve.
 * @path /shipments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the shipment to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShipment;

  export const METADATA = {
    method: "GET",
    path: "/shipments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shipments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IShipment =>
    typia.random<IShipment>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a shipment by ID in the 'shipments' table.
 *
 * This endpoint updates selected shipment fields (carrier, tracking_number,
 * status, shipped_at, delivered_at, etc.), enforcing immutability of the order
 * and actor references to satisfy audit and compliance needs. All updates
 * generate audit logs. Related endpoints: creation (POST), listing (PATCH),
 * detail (GET), and deletion (DELETE). Errors for missing or illegal updates,
 * or for already soft-deleted records, are returned. Ensures workflow state
 * transitions are legal as per business requirements.
 *
 * @param props.id Unique identifier of the shipment to update.
 * @param props.body Updatable shipment fields (carrier, tracking number,
 *   status, delivery/shipping times).
 * @path /shipments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the shipment to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Updatable shipment fields (carrier, tracking number, status,
     * delivery/shipping times).
     */
    body: IShipment.IUpdate;
  };
  export type Body = IShipment.IUpdate;
  export type Response = IShipment;

  export const METADATA = {
    method: "PUT",
    path: "/shipments/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shipments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IShipment =>
    typia.random<IShipment>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a shipment entity in the shipments table.
 *
 * This operation marks a shipment as deleted by setting its 'deleted_at' field
 * while retaining all audit history. Shipments track the fulfillment process
 * for orders and include references to the order, actor
 * (shipper/fulfiller/admin), carrier, tracking number, and status
 * (shipped/in-transit/delivered/returned). Deletion is performed for compliance
 * or operational correction—underlying shipment data remains for audit, and
 * further actions (like shipment rollbacks or audit exports) reference this
 * state.
 *
 * Permissions: Only users with relevant RBAC permissions (e.g., admin or
 * authorized seller) can delete a shipment. Attempts to delete non-existent or
 * already-deleted shipments will result in appropriate error responses.
 * Deleting a shipment may impact related order/workflow downstream;
 * dependencies should be checked before execution.
 *
 * Related endpoints: Detailed shipment information (GET /shipments/{id}),
 * creation/modification endpoints, and order fulfillment status change logs all
 * reference the same shipment entity.
 *
 * Errors: Attempts to delete with insufficient permissions, or referencing
 * non-existent/invalid shipment ID, will return standardized errors as per API
 * policy.
 *
 * @param props.id Shipment's unique identifier (UUID) to be soft-deleted.
 * @path /shipments/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Shipment's unique identifier (UUID) to be soft-deleted. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IShipment;

  export const METADATA = {
    method: "DELETE",
    path: "/shipments/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shipments/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IShipment =>
    typia.random<IShipment>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserAddress } from "../../structures/IUserAddress";
import { IPageIUserAddress } from "../../structures/IPageIUserAddress";
import { IGenericDeleteResult } from "../../structures/IGenericDeleteResult";

/**
 * Create a new user address (user_addresses table).
 *
 * This endpoint creates a new user address record as defined in the
 * user_addresses Prisma table. The request body must contain all essential
 * attributes: user_id, type, recipient_name, country, city, street,
 * postal_code, etc. Field-level encryption applies to phone PII. Business logic
 * must enforce uniqueness of primary addresses per type. Failed validations
 * (missing fields, duplicate primary, bad formatting) result in errors.
 * Successful operations are fully audit-logged, and RBAC ensures only users (or
 * authorized admins) may add addresses for a user. All writes are subject to
 * transactional integrity and rollback on error.
 *
 * @param props.body All required address fields, with validation and RBAC
 *   enforcement.
 * @path /userAddresses
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** All required address fields, with validation and RBAC enforcement. */
    body: IUserAddress.ICreate;
  };
  export type Body = IUserAddress.ICreate;
  export type Response = IUserAddress;

  export const METADATA = {
    method: "POST",
    path: "/userAddresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userAddresses";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserAddress =>
    typia.random<IUserAddress>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List or search user addresses (user_addresses table).
 *
 * This API operation lists or searches user address records from the
 * user_addresses schema. The endpoint utilizes a request body with search
 * conditions and pagination parameters (page, limit, sort, filters on type,
 * country, city, etc.). This supports user address book UI, admin audit
 * queries, and compliance checks. PII fields are field-encrypted and exposure
 * is controlled by contextual RBAC; only authorized actors can access other
 * users' addresses. Business rules prohibit access to deleted records unless
 * explicitly requested for compliance purposes. Errors for invalid queries or
 * permission failures are returned as appropriate. Related endpoints provide
 * CRUD for individual address records.
 *
 * @param props.body Search and pagination parameters for user address listing
 *   (type, user_id, region, pagination).
 * @path /userAddresses
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Search and pagination parameters for user address listing (type,
     * user_id, region, pagination).
     */
    body: IUserAddress.IRequest;
  };
  export type Body = IUserAddress.IRequest;
  export type Response = IPageIUserAddress;

  export const METADATA = {
    method: "PATCH",
    path: "/userAddresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userAddresses";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIUserAddress => typia.random<IPageIUserAddress>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a user address by ID (user_addresses table).
 *
 * This API retrieves a single user address record by ID from the user_addresses
 * schema. Each user_addresses row contains recipient name, address parts
 * (country, city, state, street, postal), type, and PII (phone) fields â€“ the
 * latter must be field-encrypted and RBAC-protected. The operation serves
 * customer, admin, and seller use-cases (address book, shipping, audit). Error
 * codes are produced for missing addresses or RBAC violations. Soft-deleted
 * records are not returned unless queried with special compliance role.
 *
 * @param props.id Target user address record's ID
 * @path /userAddresses/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target user address record's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserAddress;

  export const METADATA = {
    method: "GET",
    path: "/userAddresses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userAddresses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserAddress =>
    typia.random<IUserAddress>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a user address by ID (user_addresses table).
 *
 * Updates an existing user address as per ID in the path, referencing
 * user_addresses Prisma table. Mutable fields include recipient_name, phone
 * (field-encrypted), city, street, postal_code, and primary flag. The user_id
 * and type fields are immutable post-creation. RBAC ensures that
 * users/applications may only update addresses they own unless admin privileges
 * permit broader modification. All changes are strictly audit-logged for
 * compliance. Any attempt to violate uniqueness (e.g., multiple primaries of
 * same type) is rejected. address update failures return clear error codes, and
 * attempts to update soft-deleted addresses are disallowed except by compliance
 * roles.
 *
 * @param props.id Target user address record's ID
 * @param props.body Updated information for the existing address; user_id and
 *   type are immutable.
 * @path /userAddresses/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target user address record's ID */
    id: string & tags.Format<"uuid">;

    /**
     * Updated information for the existing address; user_id and type are
     * immutable.
     */
    body: IUserAddress.IUpdate;
  };
  export type Body = IUserAddress.IUpdate;
  export type Response = IUserAddress;

  export const METADATA = {
    method: "PUT",
    path: "/userAddresses/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/userAddresses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserAddress =>
    typia.random<IUserAddress>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a user address by ID (user_addresses table).
 *
 * This API operation soft-deletes a user address record identified by the given
 * ID, referencing the user_addresses schema. It marks the deleted_at timestamp
 * for audit/compliance, and does not physically remove the data. Access to
 * soft-deleted addresses is locked by default except for audit purposes. Only
 * users/roles with erasure or ownership rights can perform this operation. Each
 * deletion is audit-logged, and attempts to delete an already deleted address
 * or unauthorized requests are rejected with appropriate error codes.
 *
 * @param props.id Target user address record's ID
 * @path /userAddresses/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target user address record's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IGenericDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/userAddresses/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userAddresses/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IGenericDeleteResult => typia.random<IGenericDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserBalance } from "../../structures/IUserBalance";
import { IPageIUserBalance } from "../../structures/IPageIUserBalance";

/**
 * Create a new user balance record in 'user_balances'.
 *
 * Allows permitted actors (system, admin, onboarding flows) to create a user
 * balance record, e.g., to set up new deposit or point balances. Validates for
 * uniqueness per user/type/currency; RBAC prevents unauthorized creation (e.g.,
 * users may not self-create balance types unless allowed by policy). All new
 * additions are logged for audit and compliance. Response returns the created
 * entity with all properties (amount, type, currency, timestamps, owner).
 * Related endpoints include list (PATCH), detail (GET), update (PUT), and
 * delete (DELETE). Mutation is not allowed if balance already exists for
 * user/type/currency. All compliance data flows supported.
 *
 * @param props.body User balance creation info: user, type, starting amount,
 *   currency.
 * @path /userBalances
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** User balance creation info: user, type, starting amount, currency. */
    body: IUserBalance.ICreate;
  };
  export type Body = IUserBalance.ICreate;
  export type Response = IUserBalance;

  export const METADATA = {
    method: "POST",
    path: "/userBalances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userBalances";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserBalance =>
    typia.random<IUserBalance>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Returns a paginated, filtered list of user balance records from
 * 'user_balances'.
 *
 * Enables privileged clients or users themselves to retrieve paginated,
 * optionally filtered lists of user balances by type (deposit, mileage, etc.),
 * by user, or by audit trail. Access is governed by RBAC: users see only their
 * own balances unless granted admin/audit rights. The API response returns meta
 * for pagination, along with per-entity user balance info including type,
 * amount, currency, and creation/modification timestamps. Filtering is enforced
 * on all sensitive fields, and GDPR/CCPA retention policies are honored.
 * Related endpoints include single-user GET, update, and audit trail listing.
 * Request and response are optimized for high-throughput analytic dashboard
 * contexts.
 *
 * @param props.body Balance filtering, search, and pagination options.
 * @path /userBalances
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Balance filtering, search, and pagination options. */
    body: IUserBalance.IRequest;
  };
  export type Body = IUserBalance.IRequest;
  export type Response = IPageIUserBalance;

  export const METADATA = {
    method: "PATCH",
    path: "/userBalances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userBalances";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIUserBalance => typia.random<IPageIUserBalance>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a single user balance record by ID from 'user_balances'.
 *
 * Fetches a specific user balance record by its unique identifier, showing all
 * entity fields (type, amount, currency, timestamps, user link). Critical for
 * user-facing apps, finance dashboards, and support cases needing atomic
 * account inspection. Ensures sensitive financial data is only returned to the
 * owner or auditors. Audit logs are maintained for all access (traceability,
 * fraud prevention). All CCPA/GDPR regulations for retention and masking are
 * upheld. Related endpoints handle updating, deletion, and audit exposures.
 * Typical errors: not found, forbidden.
 *
 * @param props.id User balance record unique identifier.
 * @path /userBalances/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** User balance record unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserBalance;

  export const METADATA = {
    method: "GET",
    path: "/userBalances/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userBalances/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserBalance =>
    typia.random<IUserBalance>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a user balance record by ID in 'user_balances'.
 *
 * Fully replace or correct a user balance entity by ID. Legal/financial and
 * RBAC requirements are applied to prevent unauthorized or non-compliant
 * changes. All mods are tracked for audit, supporting full rollback and reason
 * logging per compliance regulation. The update flow may involve
 * reconciliation, error correction, or manual top-up. Related endpoints include
 * audit exposure (PATCH), detail GET, and deletion. Fields that are immutable
 * or reserved for system-only changes are validated. Access denial and not
 * found errors are handled with detailed response codes/logs.
 *
 * @param props.id User balance record unique identifier.
 * @param props.body New values for user balance; entire entity update according
 *   to schema.
 * @path /userBalances/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** User balance record unique identifier. */
    id: string & tags.Format<"uuid">;

    /**
     * New values for user balance; entire entity update according to
     * schema.
     */
    body: IUserBalance.IUpdate;
  };
  export type Body = IUserBalance.IUpdate;
  export type Response = IUserBalance;

  export const METADATA = {
    method: "PUT",
    path: "/userBalances/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/userBalances/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserBalance =>
    typia.random<IUserBalance>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a user balance record by ID in 'user_balances'.
 *
 * Marks a user balance as soft-deleted by unique ID, preserving all entity data
 * under legal, compliance, and audit requirements. Endpoint returns
 * soft-deleted resource data after RBAC/permission checks. Triggers are in
 * place to notify other compliance or audit flows, and all attempts are fully
 * tracked in audit logs. Common for admin/audit cleanup, or system-driven
 * reversals. Endpoints for recovery/restore are paired in some compliance
 * scenarios. GDPR/CCPA mandates are respected. Not-found and permission errors
 * are properly surfaced.
 *
 * @param props.id User balance record unique identifier.
 * @path /userBalances/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** User balance record unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserBalance;

  export const METADATA = {
    method: "DELETE",
    path: "/userBalances/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userBalances/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserBalance =>
    typia.random<IUserBalance>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

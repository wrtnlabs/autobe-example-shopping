import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserConsent } from "../../structures/IUserConsent";
import { IPageIUserConsent } from "../../structures/IPageIUserConsent";

/**
 * Create a new user consent record (user_consents table).
 *
 * Creates a new user consent record.
 *
 * Direct implementation of GDPR/CCPA consent opt-in/out. Ensures no existing
 * active consent for user+scope. Logs the event for audit.
 *
 * Permission: user for self, admin for compliance. Audit-logged.
 *
 * Duplicate submission (active consent already exists for this user/scope)
 * results in conflict/error.
 *
 * Respects audit, data export/erasure requirements.
 *
 * @param props.body New user consent action details (user, scope, status,
 *   time).
 * @path /userConsents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** New user consent action details (user, scope, status, time). */
    body: IUserConsent.ICreate;
  };
  export type Body = IUserConsent.ICreate;
  export type Response = IUserConsent;

  export const METADATA = {
    method: "POST",
    path: "/userConsents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userConsents";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserConsent =>
    typia.random<IUserConsent>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search user consents with filtering and pagination (user_consents table).
 *
 * Lists user consent audit records, enables advanced search (user, scope,
 * opt-in/out, date, with pagination/sorting).
 *
 * Returned data includes consent scope, user, granted status, and audit trail
 * per the user_consents schema and requirements (GDPR/CCPA compliance, user
 * data export/erasure).
 *
 * Accessible to the user (own records) or admin roles with proper RBAC.
 *
 * Supports legal, compliance, and consent management reviews.
 *
 * @param props.body Search, filter, and pagination criteria (by user, scope,
 *   status, dates, etc.).
 * @path /userConsents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Search, filter, and pagination criteria (by user, scope, status,
     * dates, etc.).
     */
    body: IUserConsent.IRequest;
  };
  export type Body = IUserConsent.IRequest;
  export type Response = IPageIUserConsent;

  export const METADATA = {
    method: "PATCH",
    path: "/userConsents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userConsents";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIUserConsent => typia.random<IPageIUserConsent>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a single user consent by ID (table: user_consents).
 *
 * Gets details of a single user consent record in user_consents by ID.
 *
 * Full compliance and data export use case: returns scope, status, audit
 * fields. Access controlled by user/admin per RBAC.
 *
 * Immutable record of consent, supports GDPR/CCPA data subject access requests
 * and audits.
 *
 * Error: not-found, forbidden (per RBAC), erased.
 *
 * @param props.id Target user consent record's unique identifier.
 * @path /userConsents/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target user consent record's unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserConsent;

  export const METADATA = {
    method: "GET",
    path: "/userConsents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userConsents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserConsent =>
    typia.random<IUserConsent>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update (withdraw/edit/revoke) an existing user consent by ID (user_consents
 * table).
 *
 * Updates an existing user consent audit record by ID in user_consents table.
 *
 * Allows status/opt-in/withdrawal changes, typically marks as revoked rather
 * than hard-delete. RBAC enforced, audit-logged.
 *
 * Mutation is audited for compliance and legal review (see: GDPR, CCPA
 * requirements).
 *
 * @param props.id Target user consent record's unique identifier.
 * @param props.body User consent update/withdraw/edit request details (opt-in
 *   flag, revoked_at, etc).
 * @path /userConsents/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target user consent record's unique identifier. */
    id: string & tags.Format<"uuid">;

    /**
     * User consent update/withdraw/edit request details (opt-in flag,
     * revoked_at, etc).
     */
    body: IUserConsent.IUpdate;
  };
  export type Body = IUserConsent.IUpdate;
  export type Response = IUserConsent;

  export const METADATA = {
    method: "PUT",
    path: "/userConsents/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/userConsents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserConsent =>
    typia.random<IUserConsent>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete (erase) a user consent record by ID (user_consents table).
 *
 * Erases (soft deletes/revokes) the specified user consent by ID in the
 * user_consents table.
 *
 * Operation does not destroy but marks as revoked/erased for audit/legal
 * compliance. Only owner or admin per RBAC may perform.
 *
 * Supports GDPR/CCPA erasure requests, export, and opt-out review.
 *
 * Record remains for audit, not shown as active.
 *
 * @param props.id Target user consent record's unique identifier.
 * @path /userConsents/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target user consent record's unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserConsent;

  export const METADATA = {
    method: "DELETE",
    path: "/userConsents/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userConsents/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserConsent =>
    typia.random<IUserConsent>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserIdentityVerification } from "../../structures/IUserIdentityVerification";
import { IPageIUserIdentityVerification } from "../../structures/IPageIUserIdentityVerification";

/**
 * Create new user identity verification record (user_identity_verifications
 * table).
 *
 * Creates a new user identity verification attempt in the
 * user_identity_verifications table.
 *
 * To be used for onboarding, KYC/KYB, compliance processes where user or admin
 * initiates a verification with a given provider/type.
 *
 * Validates type, provider, and prevents duplicate pending verifications.
 *
 * RBAC required for self or admin/compliance initiation. Audit-logged and
 * validated per regulatory rules.
 *
 * @param props.body Details to initiate new identity verification: user,
 *   provider, type, external reference, etc.
 * @path /userIdentityVerifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Details to initiate new identity verification: user, provider, type,
     * external reference, etc.
     */
    body: IUserIdentityVerification.ICreate;
  };
  export type Body = IUserIdentityVerification.ICreate;
  export type Response = IUserIdentityVerification;

  export const METADATA = {
    method: "POST",
    path: "/userIdentityVerifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userIdentityVerifications";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IUserIdentityVerification => typia.random<IUserIdentityVerification>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search user identity verifications with filter/pagination
 * (user_identity_verifications table).
 *
 * Search/list user identity verification audit records
 * (user_identity_verifications) with filtering for user, provider, type,
 * status, time range, and pagination.
 *
 * Returns paginated audit trail records per user and requirement
 * (onboard/escalation/compliance audit).
 *
 * Accessible by the owner(user) or admin/compliance analyst (RBAC enforced).
 *
 * @param props.body Filtering/search/pagination info: user ID, provider,
 *   status, time, type, etc.
 * @path /userIdentityVerifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering/search/pagination info: user ID, provider, status, time,
     * type, etc.
     */
    body: IUserIdentityVerification.IRequest;
  };
  export type Body = IUserIdentityVerification.IRequest;
  export type Response = IPageIUserIdentityVerification;

  export const METADATA = {
    method: "PATCH",
    path: "/userIdentityVerifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userIdentityVerifications";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIUserIdentityVerification =>
    typia.random<IPageIUserIdentityVerification>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a single user identity verification by ID (user_identity_verifications
 * table).
 *
 * Gets the details of a specific user identity verification record from the
 * user_identity_verifications table.
 *
 * Returns status, timestamps, provider response/audit data as required for
 * compliance with onboarding, escalation, and identity workflows.
 *
 * Access control (user owner/admin per RBAC) enforced for detailed evidence
 * retrieval.
 *
 * Supports compliance audit (export/legal/history).
 *
 * @param props.id Target user identity verification's unique identifier.
 * @path /userIdentityVerifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target user identity verification's unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserIdentityVerification;

  export const METADATA = {
    method: "GET",
    path: "/userIdentityVerifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userIdentityVerifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IUserIdentityVerification => typia.random<IUserIdentityVerification>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update (finalize) a user identity verification by ID
 * (user_identity_verifications table).
 *
 * Updates a user identity verification record by ID in
 * user_identity_verifications table.
 *
 * Mainly for finalizing outcome, provider response, or status transition
 * (pendingâ†’approved/rejected). RBAC enforced (user/compliance/admin).
 *
 * Validation: state must permit update/resolution/complete. Audit-logged for
 * compliance evidence. If already resolved/closed, returns error.
 *
 * @param props.id Target verification audit's unique identifier.
 * @param props.body Fields to update verification: status, outcome, provider
 *   response, completed_at.
 * @path /userIdentityVerifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target verification audit's unique identifier. */
    id: string & tags.Format<"uuid">;

    /**
     * Fields to update verification: status, outcome, provider response,
     * completed_at.
     */
    body: IUserIdentityVerification.IUpdate;
  };
  export type Body = IUserIdentityVerification.IUpdate;
  export type Response = IUserIdentityVerification;

  export const METADATA = {
    method: "PUT",
    path: "/userIdentityVerifications/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/userIdentityVerifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IUserIdentityVerification => typia.random<IUserIdentityVerification>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete (erase) a user identity verification by ID
 * (user_identity_verifications table).
 *
 * Soft deletes (marks erased) the user identity verification record by ID.
 *
 * Intended for withdrawal, regulation, or admin cleanup. Sets
 * deleted_at/outcome=erased, never physically destroys for audit. RBAC required
 * (owner/admin).
 *
 * Not shown in normal queries after erasure, but preserved for audit
 * trail/compliance export.
 *
 * If already erased, returns current status.
 *
 * @param props.id Target verification audit's unique identifier.
 * @path /userIdentityVerifications/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target verification audit's unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserIdentityVerification;

  export const METADATA = {
    method: "DELETE",
    path: "/userIdentityVerifications/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userIdentityVerifications/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IUserIdentityVerification => typia.random<IUserIdentityVerification>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

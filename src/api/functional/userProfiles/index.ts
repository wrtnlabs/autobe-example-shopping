import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserProfile } from "../../structures/IUserProfile";
import { IPageUserProfile } from "../../structures/IPageUserProfile";
import { IGenericDeleteResult } from "../../structures/IGenericDeleteResult";

/**
 * Create a new user profile record (user_profiles table).
 *
 * This API operation creates a new user profile record as defined in the
 * user_profiles Prisma table. The user_profiles schema includes attributes such
 * as user_id (referencing users), display_name, legal_name, birth_date, gender,
 * locale, timezone, and marketing_opt_in. Field-level encryption is applied to
 * PII fields per compliance policy. The request body must provide all required
 * fields. Any violation of the unique user_id constraint (a user can have only
 * one profile) results in a 409 error. All write attempts are audit-logged and
 * subject to relevant RBAC permissions. The endpoint must validate all required
 * and format-constrained fields, and deny requests for unauthorized actors.
 *
 * @param props.body Creation attributes for the new user profile (user_id,
 *   display_name, legal_name, birth_date, gender, locale, timezone,
 *   marketing_opt_in).
 * @path /userProfiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Creation attributes for the new user profile (user_id, display_name,
     * legal_name, birth_date, gender, locale, timezone, marketing_opt_in).
     */
    body: IUserProfile.ICreate;
  };
  export type Body = IUserProfile.ICreate;
  export type Response = IUserProfile;

  export const METADATA = {
    method: "POST",
    path: "/userProfiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userProfiles";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserProfile =>
    typia.random<IUserProfile>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search user profile records (user_profiles, 1:1 with user account).
 *
 * This endpoint returns a paginated list of user_profiles—personal records
 * mapped 1:1 to user accounts—supporting search, audit/export, and regulatory
 * requests. Usage is restricted to administrators/compliance.
 * Filtering/searching can include profile name, legal name, locale, DOB, or
 * other PII/metadata. RBAC policies must enforce redaction or limits according
 * to access scope. The returned records may have PII masked/redacted if RBAC
 * context demands. Errors: unauthorized access, invalid filters, or
 * non-existent search mandates. Related APIs: PATCH /users (account base), GET
 * /userProfiles/{id} (single profile), PUT /userProfiles/{id} (update).
 *
 * @param props.body Filtering/search criteria and pagination for user_profiles
 *   list operation.
 * @path /userProfiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Filtering/search criteria and pagination for user_profiles list
     * operation.
     */
    body: IUserProfile.IRequest;
  };
  export type Body = IUserProfile.IRequest;
  export type Response = IPageUserProfile;

  export const METADATA = {
    method: "PATCH",
    path: "/userProfiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userProfiles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageUserProfile => typia.random<IPageUserProfile>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a user profile by ID (user_profiles table).
 *
 * This API retrieves an individual user profile record as defined in the
 * user_profiles schema table. The user_profiles table contains extended
 * personal profile data linked 1:1 with users, including fields such as
 * display_name, legal_name (field-encrypted), birth_date (field-encrypted),
 * gender, locale, timezone, and marketing_opt_in for explicit consent tracking
 * as per GDPR/CCPA. Each profile change is audit-logged and tied to compliance
 * workflows. Access to PII is controlled by contextual RBAC and all sensitive
 * data is returned only to authorized actors; field-level encryption/decryption
 * is performed on profile read. If the requested profile does not exist or the
 * caller lacks appropriate permission, the API returns a 404 or 403 with proper
 * audit logging.
 *
 * Security considerations include strict RBAC enforcement and protection
 * against PII leaks. This operation is often paired with creation and update
 * endpoints to complete the CRUD lifecycle on user profile records. The
 * endpoint is used in both self-service profile access by end users and
 * administrative review cases. Errors relating to missing or restricted
 * profiles are returned with appropriate error codes and descriptions.
 *
 * @param props.id Target user profile's ID
 * @path /userProfiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target user profile's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserProfile;

  export const METADATA = {
    method: "GET",
    path: "/userProfiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserProfile =>
    typia.random<IUserProfile>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a user profile by ID (user_profiles table).
 *
 * This API operation updates an existing user profile record based on the ID in
 * the path, matching the user_profiles schema table. Fields such as
 * display_name, legal_name, birth_date, gender, locale, timezone, and
 * marketing_opt_in may be updated if allowed; user_id is immutable
 * post-creation. All changes to PII fields (legal_name, birth_date) are
 * field-encrypted and tracked via audit logs, supporting GDPR and CCPA
 * requirements. Contextual RBAC is enforced: users may only update their own
 * profile unless explicitly permitted by role. Update attempts on nonexistent
 * profiles or with insufficient permission result in 404/403 errors. Each
 * update is subject to validation and business rules to prevent invalid state.
 *
 * @param props.id Target user profile's ID
 * @param props.body Updated profile data for the specified user (excluding
 *   immutable fields).
 * @path /userProfiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target user profile's ID */
    id: string & tags.Format<"uuid">;

    /**
     * Updated profile data for the specified user (excluding immutable
     * fields).
     */
    body: IUserProfile.IUpdate;
  };
  export type Body = IUserProfile.IUpdate;
  export type Response = IUserProfile;

  export const METADATA = {
    method: "PUT",
    path: "/userProfiles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/userProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserProfile =>
    typia.random<IUserProfile>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a user profile by ID (user_profiles table).
 *
 * This API soft-deletes a user profile record identified by the path ID, in
 * accordance with the user_profiles schema and compliance rules. The operation
 * sets the deleted_at timestamp without physically removing the data, thereby
 * supporting audit and recovery workflows per GDPR or business policy.
 * Attempting to delete an already deleted or nonexistent profile returns a
 * suitable error. Only users with appropriate permissions (typically the
 * profile's owner or roles with data erasure rights) may invoke this endpoint.
 * All operations are audit-logged, and access to PII on a deleted profile is
 * restricted post-operation. Responses indicate success or report error states
 * (not found, forbidden).
 *
 * @param props.id Target user profile's ID
 * @path /userProfiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target user profile's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IGenericDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/userProfiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userProfiles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IGenericDeleteResult => typia.random<IGenericDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IUserSession } from "../../structures/IUserSession";
import { IPageIUserSession } from "../../structures/IPageIUserSession";

/**
 * Create a new user session (user_sessions table).
 *
 * This API operation creates a new user session record as defined in the
 * user_sessions Prisma table. Required in login, device registration, and SSO
 * onboarding scenarios. The request body must provide user identity, token info
 * (pre-hashed), device details, and optional expiry. RBAC ensures that only
 * authorized actors may create sessions for a user (typically restricted to
 * self-service or system actors). All creations are audit-logged, and duplicate
 * active session tokens are rejected with error. Business logic may enforce
 * single-active-session rules as needed. Response returns the created session
 * record.
 *
 * @param props.body Session creation attributes including user_id, device info,
 *   token_hash, and expiry.
 * @path /userSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Session creation attributes including user_id, device info,
     * token_hash, and expiry.
     */
    body: IUserSession.ICreate;
  };
  export type Body = IUserSession.ICreate;
  export type Response = IUserSession;

  export const METADATA = {
    method: "POST",
    path: "/userSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userSessions";
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserSession =>
    typia.random<IUserSession>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Search user sessions with pagination/filter (user_sessions table).
 *
 * This API lists/searches user session records per the user_sessions Prisma
 * schema table. Query criteria in the request body permit searching by user_id,
 * session status (active/revoked/expired), device info, IP address, and expiry.
 * Result set is paginated and ordered to support UI display or audit review.
 * The endpoint is mainly used for device/session management by end users,
 * security teams, or admins during account reviews. Sensitive fields (token
 * hashes, IPs) are masked for non-owner/admin queries per RBAC. Only authorized
 * actors may see other users' sessions. Related endpoints create/delete
 * individual sessions. Invalid query parameters or unauthorized queries return
 * 400/403 errors.
 *
 * @param props.body Search and pagination criteria for user session listing.
 * @path /userSessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search and pagination criteria for user session listing. */
    body: IUserSession.IRequest;
  };
  export type Body = IUserSession.IRequest;
  export type Response = IPageIUserSession;

  export const METADATA = {
    method: "PATCH",
    path: "/userSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/userSessions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIUserSession => typia.random<IPageIUserSession>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a user session by ID (user_sessions table).
 *
 * This API fetches a user session record by ID as stored in the user_sessions
 * table. The operation retrieves session details including user_id, session
 * token (masked as required), IP, device info, expiration, and revocation
 * timestamps. RBAC is enforced: only session owners or authorized admins may
 * view sessions for another user. Access to revoked, expired, or deleted
 * sessions requires special permission/audit. Handles missing/forbidden
 * sessions with clear error responses. All reads are logged to support
 * auditability and forensics.
 *
 * @param props.id Target user session record's ID
 * @path /userSessions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target user session record's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserSession;

  export const METADATA = {
    method: "GET",
    path: "/userSessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userSessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserSession =>
    typia.random<IUserSession>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an existing user session by ID (table: user_sessions).
 *
 * Updates an existing user session given its unique ID. This updates values
 * such as expiration, revocation status, or session metadata as specified in
 * the user_sessions schema (see: requirements on persistent, cross-device login
 * and session auditing).
 *
 * The operation verifies session ownership or RBAC admin privileges. Attempts
 * to update a revoked or non-existent session result in error. All changes are
 * logged in audit trail for compliance.
 *
 * Session policies, such as maximum session expiry, device registration, and
 * anomaly detection, are enforced as per user/session/business rules. Updating
 * device information or revocation is also supported.
 *
 * Related: DELETE /userSessions/{id} for removal, PATCH for list/search, POST
 * for session creation.
 *
 * @param props.id Target user session's unique identifier.
 * @param props.body Updated information for the user session. Provides new data
 *   for expiration, revocation, or session details (see user_sessions model).
 * @path /userSessions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target user session's unique identifier. */
    id: string & tags.Format<"uuid">;

    /**
     * Updated information for the user session. Provides new data for
     * expiration, revocation, or session details (see user_sessions
     * model).
     */
    body: IUserSession.IUpdate;
  };
  export type Body = IUserSession.IUpdate;
  export type Response = IUserSession;

  export const METADATA = {
    method: "PUT",
    path: "/userSessions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/userSessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserSession =>
    typia.random<IUserSession>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft delete (revoke) a user session by ID (user_sessions table).
 *
 * Soft-deletes (revokes) a user session specified by its unique ID according to
 * the user_sessions schema.
 *
 * Sets revoked_at or deleted_at timestamp, aligns with compliance/audit
 * requirements (see requirements for persistent session and session
 * revocation).
 *
 * This supports single-session sign-out or admin-forced token invalidation.
 * Only the session owner or authorized admin (per RBAC) can perform this
 * operation. No destroy: preserves session record for auditing.
 *
 * If already deleted/revoked, responds gracefully. All actions are
 * immutable/auditable.
 *
 * @param props.id Target user session's unique identifier.
 * @path /userSessions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target user session's unique identifier. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IUserSession;

  export const METADATA = {
    method: "DELETE",
    path: "/userSessions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/userSessions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IUserSession =>
    typia.random<IUserSession>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

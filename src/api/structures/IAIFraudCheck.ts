import { tags } from "typia";

/**
 * Represents a single AI fraud check audit event as recorded in
 * ai_fraud_checks. All records include context, scoring, decision and
 * explainable model output.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAIFraudCheck = {
  /** AI fraud check event unique ID (primary key). */
  id: string & tags.Format<"uuid">;

  /** UUID of the order this fraud check pertains to. */
  order_id: string & tags.Format<"uuid">;

  /** UUID of the user being checked (customer placing order). */
  user_id: string & tags.Format<"uuid">;

  /** AI service/model name that evaluated the fraud risk. */
  ai_model_name: string;

  /** Numeric risk score assigned by AI engine to this order/event. */
  score: number &
    tags.JsonSchemaPlugin<{
      format: "double";
    }>;

  /** AI decision outcome – e.g., 'Pass', 'Fail', 'Review' etc. */
  decision: string;

  /**
   * Human-readable explainability output from the AI model. May be null or
   * omitted.
   */
  explanation?: string;

  /** Timestamp when AI fraud check event was conducted. */
  checked_at: string & tags.Format<"date-time">;
};
export namespace IAIFraudCheck {
  /**
   * Request type for paginated/filterable AI fraud check search
   * (ai_fraud_checks). All filters are optional and can be combined for
   * flexible, compliance-oriented analytics and audit dashboards.
   */
  export type IRequest = {
    /** Optional: filter by associated order's UUID. */
    order_id?: string & tags.Format<"uuid">;

    /** Optional: filter by user UUID for targeted fraud checks. */
    user_id?: string & tags.Format<"uuid">;

    /** Optional: filter by AI model/service used for the fraud check. */
    ai_model_name?: string;

    /**
     * Optional: filter by fraud decision outcome ('Pass', 'Fail',
     * 'Review').
     */
    decision?: string;

    /** Optional: minimum fraud risk score (inclusive) for filtering. */
    score_min?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /** Optional: maximum fraud risk score (inclusive) for filtering. */
    score_max?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /** Optional: include only checks performed at/after this timestamp. */
    checked_after?: string & tags.Format<"date-time">;

    /** Optional: include only checks performed before this timestamp. */
    checked_before?: string & tags.Format<"date-time">;

    /** Pagination: page number (default 1). */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Records per page (default 100, max 1000). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.Maximum<1000> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Request body for creating (recording) a new AI fraud check audit event.
   * Explanation (if provided) captures model reasoning for compliance.
   */
  export type ICreate = {
    /** Order UUID (must exist) to which this fraud check applies. */
    order_id: string & tags.Format<"uuid">;

    /** User UUID for whom the fraud check is performed. */
    user_id: string & tags.Format<"uuid">;

    /** Registered model/service used for evaluation. */
    ai_model_name: string;

    /** Resulting AI-generated score for order/user. */
    score: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /**
     * AI engine's fraud/review outcome decision (e.g., 'Pass', 'Fail',
     * 'Review').
     */
    decision: string;

    /** Explainability text or serialized explainable output from AI. */
    explanation?: string;
  };

  /**
   * Update body for AI fraud check events. Permitted only for privileged
   * compliance/admin roles, with all updates strictly audit-logged.
   */
  export type IUpdate = {
    /**
     * Corrected or updated risk score (if post-hoc correction is allowed by
     * compliance policy).
     */
    score?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /**
     * Updated outcome (if administrative review overrides original AI
     * result, permitted by policy).
     */
    decision?: string;

    /**
     * Updated explanation/annotation – used for appending more context or
     * corrective audit data after event is finalized.
     */
    explanation?: string;
  };
}

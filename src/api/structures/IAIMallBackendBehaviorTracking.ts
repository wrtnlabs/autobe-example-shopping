import { tags } from "typia";

/**
 * Represents a single user behavior event. All fields atomic/normalized, per
 * aimall_backend_behavior_trackings.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAIMallBackendBehaviorTracking = {
  /**
   * Primary key. Unique event identifier. Maps to
   * aimall_backend_behavior_trackings.id.
   */
  id: string & tags.Format<"uuid">;

  /** The customer that generated this event. FK to customers.id. UUID format. */
  customer_id: string & tags.Format<"uuid">;

  /**
   * Type of event ("login", "add_cart", "view_product", etc). As in schema
   * column event_type.
   */
  event_type: string;

  /**
   * Serialized data for the event, usually as JSON. Corresponds to event_data
   * column.
   */
  event_data: string;

  /** When event occurred. ISO8601 string. Sourced from occurred_at column. */
  occurred_at: string & tags.Format<"date-time">;
};
export namespace IAIMallBackendBehaviorTracking {
  /**
   * Request/query model for paginating/filtering behavior trackings. Supports
   * event type and date/time range.
   */
  export type IRequest = {
    /**
     * Event type filter (e.g., "add_cart", "checkout"). See schema column
     * event_type.
     */
    event_type?: string;

    /** Filter: events on or after this timestamp. */
    date_from?: string & tags.Format<"date-time">;

    /** Filter: events on/before this timestamp. */
    date_to?: string & tags.Format<"date-time">;

    /** Results page number (for pagination). */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Max records/page (for pagination). */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * DTO for creating behavior event records. Used on log submit; all atomic,
   * PK assigned by system.
   */
  export type ICreate = {
    /** Type of event to record (must use allowed strings). */
    event_type: string;

    /**
     * Serialized event details in flexible format, but always a string
     * (e.g., JSON).
     */
    event_data: string;

    /** Timestamp for event, ISO 8601. */
    occurred_at: string & tags.Format<"date-time">;
  };

  /**
   * DTO for patching/updating an existing behavioral tracking record. All
   * fields optional unless partial update required.
   */
  export type IUpdate = {
    /** Event type to update to if permitted by policy. */
    event_type?: string;

    /** Event data string (full replace allowed on update). */
    event_data?: string;
  };
}

import { tags } from "typia";

/**
 * Represents an OAuth/external authentication account linked to a customer.
 * Normalized per 3NF. Based on aimall_backend_external_accounts schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAIMallBackendExternalAccount = {
  /**
   * Unique identifier for this external account link. Sourced from the 'id'
   * column in Prisma. Must be a UUID.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Link to the main customer account. References
   * aimall_backend_customers.id. @format uuid.
   */
  customer_id: string & tags.Format<"uuid">;

  /**
   * Identity provider code (e.g., "google", "kakao", "apple"). Atomic string,
   * exactly as in DB.
   */
  provider: string;

  /**
   * External provider's user ID string. Maps directly to 'external_user_id'
   * in DB. Always atomic.
   */
  external_user_id: string;

  /** Timestamp this external account was linked. ISO8601/RFC3339 format. */
  linked_at: string & tags.Format<"date-time">;
};
export namespace IAIMallBackendExternalAccount {
  /**
   * DTO for searching/filtering federated/external accounts linked to a given
   * customer. Use to restrict admin or customer self audit queries to
   * specific providers, time windows, or partial identity matches.
   */
  export type IRequest = {
    /**
     * Identity provider (e.g., 'google', 'kakao', 'apple'); filter only.
     * Null disables filter.
     */
    provider?: string | null;

    /** Filter on external provider user ID (exact/partial). */
    external_user_id?: string | null;

    /** Match: linked after this date. */
    linked_from?: (string & tags.Format<"date-time">) | null;

    /** Match: linked before this date. */
    linked_to?: (string & tags.Format<"date-time">) | null;

    /** Max result page size. Default: see API doc or 100. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Page number to fetch. */
    page?: (number & tags.Type<"int32">) | null;
  };

  /**
   * DTO for creating a new external account linkage. Only includes fields
   * accepted at creation (no PK, no FK, no audit).
   */
  export type ICreate = {
    /**
     * Identity provider code. Must be atomic and match internal registry
     * (e.g., 'google', 'kakao').
     */
    provider: string;

    /** External provider user ID to link. */
    external_user_id: string;
  };

  /**
   * DTO for updating allowed fields of an external account linkage. Only
   * atomic provider/user_id fields updatable.
   */
  export type IUpdate = {
    /**
     * Identity provider code, if re-linking is supported. Otherwise use
     * existing.
     */
    provider: string;

    /** New external provider user ID to update to. */
    external_user_id: string;
  };
}

import { tags } from "typia";

/**
 * A normalized record of an abuse/fraud/high-risk event (self-referral, coupon
 * stacking, velocity anomaly, etc.) for audit/compliance/analytics. Supports
 * compliance workflows and system monitoring.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendAbuseIncident = {
  /** Unique identifier for the abuse incident record. */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the customer involved in the incident, or null if not
   * user-specific.
   */
  customer_id?: (string & tags.Format<"uuid">) | null;

  /** UUID of a related order, or null. */
  order_id?: (string & tags.Format<"uuid">) | null;

  /** UUID of a related coupon, or null. */
  coupon_id?: (string & tags.Format<"uuid">) | null;

  /** UUID of a related discount campaign, if any. */
  discount_campaign_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Nature of fraud/abuse: e.g., 'self_referral', 'velocity_anomaly',
   * 'system_policy', etc.
   */
  type: string;

  /** Administrative or system supplied context/details as string or null. */
  details?: string | null;

  /** Timestamp (ISO 8601) when the incident was detected. */
  detected_at: string & tags.Format<"date-time">;

  /** If true, the incident was reviewed and closed; false = open/pending. */
  resolved: boolean;
};
export namespace IAimallBackendAbuseIncident {
  /**
   * Advanced search and filter parameters for abuse/fraud incident logs. Used
   * by admin dashboards and compliance staff for triage, reporting, and
   * audit.
   */
  export type IRequest = {
    /**
     * Filter for incidents related to a particular customer by unique ID or
     * null to disable this filter.
     */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional: restrict search to abuse/fraud relating to a specific order
     * context by order UUID.
     */
    order_id?: (string & tags.Format<"uuid">) | null;

    /** Optional: restrict to incidents tied to a particular coupon. */
    coupon_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional: restrict to incidents in the context of a known discount
     * campaign.
     */
    discount_campaign_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Type of abuse to filter (e.g. 'velocity_anomaly', 'self_referral',
     * etc.), or null to ignore.
     */
    type?: string | null;

    /** Only show resolved/unresolved incidents, or null for all. */
    resolved?: boolean | null;

    /** Start of time window for detection (ISO 8601), or null. */
    detected_at_from?: (string & tags.Format<"date-time">) | null;

    /** End of time window for detection (ISO 8601), or null. */
    detected_at_to?: (string & tags.Format<"date-time">) | null;

    /** Page number for paging. */
    page?: (number & tags.Type<"int32">) | null;

    /** Max records per page. */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * DTO for creating a new abuse incident log (for admin, system, AI detector
   * use). All required normalization and fields for compliance.
   */
  export type ICreate = {
    /**
     * UUID for customer responsible or affected, or null if not direct user
     * incident.
     */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /** Order UUID for order-related incident type, or null. */
    order_id?: (string & tags.Format<"uuid">) | null;

    /** Related coupon UUID, or null. */
    coupon_id?: (string & tags.Format<"uuid">) | null;

    /** Optional linked campaign UUID or null. */
    discount_campaign_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Incident code for type: must match incident type library (e.g.,
     * 'coupon_stacking').
     */
    type: string;

    /**
     * String admin/operator/system supplied context for manual audits, null
     * allowed.
     */
    details?: string | null;

    /**
     * Timestamp (ISO 8601) when the incident was discovered by AI/detection
     * logic/admin.
     */
    detected_at: string & tags.Format<"date-time">;
  };

  /**
   * DTO for updating type, details, or resolved status on an incident. Used
   * for audit trail maintenance by admin or automation.
   */
  export type IUpdate = {
    /**
     * If needed, corrected type of incident for forensic edit (should match
     * code library).
     */
    type?: string;

    /** Update admin/system/context notes for an incident. */
    details?: string | null;

    /** Update the resolved status (true if reviewed/closed, false = open). */
    resolved?: boolean;
  };
}

import { tags } from "typia";

/**
 * Represents a user delivery address according to aimall_backend_addresses. All
 * atomic fields; line2 optional.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendAddress = {
  /** Primary key for address record (aimall_backend_addresses.id). */
  id: string & tags.Format<"uuid">;

  /** Belonged customer ID, owner (FK to customers, always UUID). */
  customer_id: string & tags.Format<"uuid">;

  /** Label set by user for this address, like 'Home' or 'Office'. */
  alias: string;

  /** Address recipient (may differ from customer profile). */
  recipient_name: string;

  /** Contact phone for sending to courier/recipient. */
  phone: string;

  /** Primary street address information. */
  address_line1: string;

  /** Additional address information, e.g., unit or suite. Optional. */
  address_line2?: string;

  /** City portion of delivery address. */
  city: string;

  /** Postal or ZIP code for the address. */
  postal_code: string;

  /** Country as string. */
  country: string;

  /** True if this address is the primary/default for the customer. */
  is_default: boolean;

  /** Last update timestamp, always ISO format. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendAddress {
  /**
   * Request model for filtering/paginating addresses. Follows
   * aimall_backend_addresses schema.
   */
  export type IRequest = {
    /**
     * Searchable filter: alias for the address as set by user (e.g.,
     * 'Home'). Exact or partial match.
     */
    alias?: string;

    /** Filter: recipient_name allows search by name. See schema for details. */
    recipient_name?: string;

    /** Filter: city for delivery filtering/selector use cases. */
    city?: string;

    /**
     * Filter: only show default address? True/false. Maps to is_default
     * schema column.
     */
    is_default?: boolean;

    /** Pagination: results page number. Optional. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Pagination: size of page in results. Optional. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * DTO for creating a delivery address. Follows schema except PK/customer
   * FK, which are assigned by server and not part of create.
   */
  export type ICreate = {
    /** User's label for the address. */
    alias: string;

    /** Full recipient name for deliveries. */
    recipient_name: string;

    /** Contact phone number. */
    phone: string;

    /** Primary delivery address. */
    address_line1: string;

    /** Second address line, if provided. Optional. */
    address_line2?: string;

    /** City for address. */
    city: string;

    /** Post/ZIP code. */
    postal_code: string;

    /** Country name or ISO code. */
    country: string;

    /** Set as default address for user. */
    is_default: boolean;
  };

  /**
   * DTO for updating delivery address model. Only address fields, not
   * customer_id.
   */
  export type IUpdate = {
    /** User-defined label for quick selection. Used in address picker UX. */
    alias: string;

    /** Address recipient name for shipping labels. */
    recipient_name: string;

    /** Phone number for this address/recipient. */
    phone: string;

    /**
     * Main line of street address/location. Used in shipping and
     * verification.
     */
    address_line1: string;

    /** Second line (optional). Apartment/suite. Null or string. */
    address_line2?: string | null;

    /** City of address. Used for logistics. */
    city: string;

    /** Postal/ZIP code. Index for geo lookup. */
    postal_code: string;

    /** Country code or name. For compliance/shipping. */
    country: string;

    /** True if this is the primary default address for the customer. */
    is_default: boolean;

    /** When this address was last modified (ISO 8601). */
    updated_at: string & tags.Format<"date-time">;
  };
}

import { tags } from "typia";

/**
 * Attachment/media file entity as registered in aimall_backend_attachments.
 * Points to uploaded image/video/document.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendAttachment = {
  /** Primary key. Unique identifier for an attachment record. */
  id: string & tags.Format<"uuid">;

  /** Belonged post's uuid. Nullable. FK to aimall_backend_posts.id. */
  post_id?: (string & tags.Format<"uuid">) | null;

  /** Belonged comment's uuid. Nullable. FK to aimall_backend_comments.id. */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /** Belonged review's uuid. Nullable. FK to aimall_backend_reviews.id. */
  review_id?: (string & tags.Format<"uuid">) | null;

  /** File URI — location of uploaded file (e.g., s3://path/uuid.jpg). */
  file_uri: string;

  /** File type — example 'image/jpeg'. For compliance/moderation. */
  file_type: string;

  /** File size in bytes (population/validation on upload). */
  file_size: number & tags.Type<"int32">;

  /** Upload creation timestamp (ISO8601). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendAttachment {
  /**
   * Advanced query parameters for searching/filtering attachments in
   * paginated form.
   */
  export type IRequest = {
    /** Parent post UUID for filtering attachments. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Parent comment UUID for filtering attachments. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Parent review UUID for filtering attachments. */
    review_id?: (string & tags.Format<"uuid">) | null;

    /** Optional MIME type filter—example: image/jpeg */
    file_type?: string | null;

    /** Minimum file size in bytes for filter. */
    file_size_min?: (number & tags.Type<"int32">) | null;

    /** Maximum file size in bytes for filter. */
    file_size_max?: (number & tags.Type<"int32">) | null;

    /** ISO start time for filtering creation of attachments. */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** ISO end time for filtering creation of attachments. */
    created_to?: (string & tags.Format<"date-time">) | null;

    /** Maximum page size to return. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Page number. */
    page?: (number & tags.Type<"int32">) | null;
  };

  /**
   * DTO for creating a new attachment. Record is associated to a post,
   * comment, or review, via one foreign key; others may be null.
   */
  export type ICreate = {
    /** Post to attach the file to (nullable for comment/review attachments). */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Comment whose attachment this is (nullable if not for a comment). */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Review whose attachment this is (nullable if not for a review). */
    review_id?: (string & tags.Format<"uuid">) | null;

    /** URI to uploaded file (external object storage, application-managed). */
    file_uri: string;

    /** MIME type, for example 'image/png', 'application/pdf', etc. */
    file_type: string;

    /** File size in bytes, from upload metadata. */
    file_size: number & tags.Type<"int32">;
  };

  /**
   * DTO for updating metadata of an existing attachment (file_uri, type,
   * size). Assumes non-relational edits only.
   */
  export type IUpdate = {
    /** File URI. Editable for migration/internal corrections only. */
    file_uri?: string;

    /** File type—can update if reprocessed. */
    file_type?: string;

    /** File size in bytes, update if new file added. */
    file_size?: number & tags.Type<"int32">;
  };

  /** 첨부파일 요약 오브젝트. id/uri/타입/크기만 제공. */
  export type ISummary = {
    /** 첨부파일 UUID */
    id?: string & tags.Format<"uuid">;

    /** 파일 URI(외부저장소 경로/URL) */
    file_uri?: string;

    /** 파일타입(MIME 등, 예:image/jpeg 등) */
    file_type?: string;

    /** 파일 크기(byte 단위) */
    file_size?: number & tags.Type<"int32">;
  };
}

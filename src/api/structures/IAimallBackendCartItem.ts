import { tags } from "typia";

/**
 * Cart Item entity. One row for each product/option/SKU attached to a cart
 * according to aimall_backend_cart_items schema. All atomic/norm fields are
 * included; relationships to products/SKUs are by UUID only.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendCartItem = {
  /** Primary Key. Unique identifier for this cart item row. */
  id: string & tags.Format<"uuid">;

  /** The UUID of the shopping cart this item belongs to. */
  aimall_backend_cart_id: string & tags.Format<"uuid">;

  /** UUID for the product being carted. */
  aimall_backend_product_id: string & tags.Format<"uuid">;

  /** UUID for the product option (variant) on this cart item, if any. */
  aimall_backend_product_option_id?: (string & tags.Format<"uuid">) | null;

  /**
   * UUID for the SKU for this cart item, if referenced (for variant inventory
   * management).
   */
  aimall_backend_sku_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Quantity of this product in the cart. Must be a positive integer. No
   * business maximum is enforced here, application logic may impose
   * additional rules.
   */
  quantity: number & tags.Type<"int32">;

  /**
   * Snapshot of the unit price for this item at the time it is added to the
   * cart. Used for price lock, auditing, and order generation.
   */
  unit_price_snapshot: number;

  /**
   * Discount value per item at the moment the item is put in the cart. Null
   * if no discount is applied.
   */
  discount_snapshot?: number | null;

  /** Optional display label for the cart UI combining product/option. */
  selected_name_display?: string | null;

  /** Time this item was created in the cart. */
  created_at: string & tags.Format<"date-time">;

  /** Time the cart item was last updated. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendCartItem {
  /**
   * Request DTO for searching/filtering cart items in a cart. Allows queries
   * by product, option, SKU, creation/update window, and standard pagination
   * options. Follows strict property mapping from aimall_backend_cart_items
   * schema; no denormalized/summary fields.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the shopping cart for which items are
     * requested. When provided, limits search to given cart.
     */
    cart_id?: (string & tags.Format<"uuid">) | null;

    /** UUID of the product for which the cart items are being queried. */
    aimall_backend_product_id?: (string & tags.Format<"uuid">) | null;

    /**
     * UUID of the product option (variant) for filtering cart items in a
     * search.
     */
    aimall_backend_product_option_id?: (string & tags.Format<"uuid">) | null;

    /** UUID of the SKU for filtering cart items. */
    aimall_backend_sku_id?: (string & tags.Format<"uuid">) | null;

    /** Filter cart items created at or after this timestamp. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Filter cart items created at or before this timestamp. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** Filter for cart items updated at or after this timestamp. */
    updated_at_from?: (string & tags.Format<"date-time">) | null;

    /** Filter for cart items updated at or before this timestamp. */
    updated_at_to?: (string & tags.Format<"date-time">) | null;

    /**
     * Maximum number of records to return in one page. Default as per
     * system standard.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /** Page number to retrieve (starting from 1). */
    page?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Creation DTO for adding new cart item to cart. Only atomic data per
   * aimall_backend_cart_items schema. Business rules like duplicate
   * product/option/SKU constraint to be handled at application layer.
   */
  export type ICreate = {
    /** UUID for the referenced product to be added to the cart. Required. */
    aimall_backend_product_id: string & tags.Format<"uuid">;

    /**
     * UUID of the selected product option (variant), if any. Nullable for
     * products without options.
     */
    aimall_backend_product_option_id?: (string & tags.Format<"uuid">) | null;

    /** UUID for the selected SKU, or null if not applicable. */
    aimall_backend_sku_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Quantity of this item to add to the cart. Must be positive integer,
     * e.g., 1 or greater.
     */
    quantity: number & tags.Type<"int32">;

    /** Unit price for each item at the time added (price lock/audit). */
    unit_price_snapshot: number;

    /**
     * Per-item discount at the time of addition; null if no discount
     * applied.
     */
    discount_snapshot?: number | null;

    /** Optional short label for UI, e.g., 'T-shirt / Red / L'. */
    selected_name_display?: string | null;
  };

  /**
   * Update DTO for atomic fields on an existing cart item. Only modifiable
   * properties in aimall_backend_cart_items schema.
   */
  export type IUpdate = {
    /** Update the product option variant on the cart item. Nullable. */
    aimall_backend_product_option_id?: (string & tags.Format<"uuid">) | null;

    /** Update the SKU for this cart item, if changed. Nullable. */
    aimall_backend_sku_id?: (string & tags.Format<"uuid">) | null;

    /** Update the quantity for this item. If set, must be >0. */
    quantity?: (number & tags.Type<"int32">) | null;

    /** Update the price snapshot if price is changed. */
    unit_price_snapshot?: number | null;

    /** Update discount, if any. */
    discount_snapshot?: number | null;

    /** Update the display label for this cart item, if changed. */
    selected_name_display?: string | null;

    /**
     * Update time for the cart item; must be set to current time when
     * changing.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}

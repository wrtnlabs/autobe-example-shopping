import { tags } from "typia";

/**
 * Represents a product taxonomy category entity as stored in
 * aimall_backend_categories, supporting multi-level hierarchy via parent
 * linkage. Used for product classification and faceted navigation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendCategory = {
  /** Primary Key (UUID) for category entity. */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the hierarchical parent (can be null if root/top-level). Enables
   * multi-level taxonomy nesting.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /** Atomic, unique name for this category among siblings sharing parent_id. */
  name: string;

  /**
   * The hierarchical depth of this category (root=1, sub=2, section=3, etc.).
   * Must be >0 and is enforced by business logic.
   */
  depth: number & tags.Type<"int32">;
};
export namespace IAimallBackendCategory {
  /**
   * Advanced search/filter DTO for category records, supporting multi-level
   * child traversal, name search, depth filter, and pagination as per product
   * taxonomy schema.
   */
  export type IRequest = {
    /**
     * Optional filter to restrict results to categories whose parent_id
     * matches this UUID. Used for child category queries.
     */
    parent_id?: string & tags.Format<"uuid">;

    /**
     * Optional partial or exact name filter for searching/categories
     * (case-insensitive substring or exact match).
     */
    name?: string;

    /** Optional filter for hierarchy level (e.g., 1=top/root, 2=sub, etc.). */
    depth?: number & tags.Type<"int32">;

    /** Pagination page number, defaults to 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Pagination size, defaults to system config or 100 max. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;
  };

  /**
   * Schema for creating a new product category. Category hierarchy
   * (parent_id), atomic name, and hierarchical depth are included. Used in
   * taxonomy management and UI selection.
   */
  export type ICreate = {
    /**
     * Optional parent category's UUID. Used to establish hierarchy. Null
     * for root categories. Enforced by business logic to support a
     * three-level category taxonomy.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Category name. Atomic value. Required for all categories. Must be
     * unique among siblings with the same parent_id.
     */
    name: string;

    /** Hierarchical depth. Root = 1, subcategories increment by 1. */
    depth: number & tags.Type<"int32">;
  };

  /**
   * Schema for updating an existing product category. Permits modification of
   * name, parent_id, and depth fields supporting hierarchy changes and
   * renaming.
   */
  export type IUpdate = {
    /**
     * Optional new parent category's UUID. Used for category reassignment.
     * Null for making category root. Must not violate hierarchy
     * constraints.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * New category name. Must be unique among siblings. Optional for
     * selective update.
     */
    name?: string;

    /**
     * New category depth value. Used if changing position in hierarchy.
     * Optional.
     */
    depth?: number & tags.Type<"int32">;
  };
}

import { tags } from "typia";

/**
 * A channel entity schema representing a sales or distribution channel in the
 * platform. Conforms to strict 3NF normalization and aligns with requirements
 * in the Systematic domain of the Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendChannel = {
  /** Primary Key: Unique channel identifier (UUID). */
  id: string & tags.Format<"uuid">;

  /**
   * Channel code: unique short identifier (e.g., 'WEB', 'MOBILE'). Used for
   * programmatic lookups and config.
   */
  code: string;

  /** Human-readable channel name for display and admin use. */
  name: string;

  /** If true, channel is active and serviced; if false, it's disabled. */
  enabled: boolean;

  /** Creation timestamp (ISO 8601 UTC) for the channel row. */
  created_at: string & tags.Format<"date-time">;

  /** Last modification timestamp (ISO 8601 UTC) for channel data. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendChannel {
  /**
   * Request object for advanced searching/pagination/filtering on
   * aimall_backend_channels. Aligns with DTO search patterns described in the
   * business specifications.
   */
  export type IRequest = {
    /** The requested page number (1-based). Null for first page/default. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /**
     * Maximum number of records per page. Defaults to 100 if not specified.
     * Null permitted for frontend flexibility.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /** Search filter for exact or partial channel code. Null for all codes. */
    code?: string | null;

    /**
     * Search filter for partial or full match on channel name. Null for
     * unfiltered.
     */
    name?: string | null;

    /** Search filter for enabled/disabled channels. Null for both. */
    enabled?: boolean | null;

    /**
     * ISO 8601 start timestamp for created_at filtering. Null for
     * open-ended.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** ISO 8601 end timestamp for created_at filtering. Null for open-ended. */
    created_to?: (string & tags.Format<"date-time">) | null;

    /**
     * ISO 8601 start timestamp for updated_at filtering. Null for
     * open-ended.
     */
    updated_from?: (string & tags.Format<"date-time">) | null;

    /** ISO 8601 end timestamp for updated_at filtering. Null for open-ended. */
    updated_to?: (string & tags.Format<"date-time">) | null;

    /**
     * Sort field for records. Allowed: 'name', 'code', 'created_at',
     * 'updated_at'. Null for default sorting.
     */
    sort_by?: "name" | "code" | "created_at" | "updated_at" | null;

    /** Sort order. Allowed: 'asc', 'desc'. Null for default. */
    sort_order?: "asc" | "desc" | null;
  };

  /**
   * DTO for creating a new channel (aimall_backend_channels). Only contains
   * fields permitted on creation. Timestamps are assigned by
   * server/database.
   */
  export type ICreate = {
    /**
     * Channel code (unique, required). Short name for programmatic use,
     * e.g., 'WEB', 'MOBILE'. Enforced to be unique in the database.
     */
    code: string;

    /** Human-readable channel name for management and UX. */
    name: string;

    /**
     * Whether this channel is enabled out of the box. Set true for
     * immediate routing/support, false for staging.
     */
    enabled: boolean;
  };

  /**
   * DTO for updating a channel. All fields optional; only non-null ones are
   * updated. No direct mutation of creation/update timestampsâ€”these are
   * server-managed.
   */
  export type IUpdate = {
    /** Channel code. If updated, must remain unique. Null for no change. */
    code?: string | null;

    /** New channel name for admin/display. Null for no change. */
    name?: string | null;

    /** Change channel availability. Null for no change. */
    enabled?: boolean | null;
  };
}

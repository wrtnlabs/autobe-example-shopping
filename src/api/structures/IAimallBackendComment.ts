import { tags } from "typia";

/**
 * Community Comment Entity. Represents a comment or reply attached to a post or
 * review. Fields map to aimall_backend_comments. Follows strict normalization
 * and audit/compliance guidelines.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendComment = {
  /**
   * Primary key. Unique identifier for the comment record (UUID). Sourced
   * from aimall_backend_comments.id column in schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Target post's id. Nullable. FK to aimall_backend_posts.id. Null for
   * review/thread-only comments.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Target review's id. Nullable. FK to aimall_backend_reviews.id. Used for
   * review-comment threads.
   */
  review_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Parent comment id. Nullable for root comments. If not null, references
   * parent thread.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Customer (author) id. Nullable (polymorphism in future). FK to
   * aimall_backend_customers.id.
   */
  customer_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Comment content. Main discussion text. Sourced from body column. Example:
   * 'Great post, thank you!'
   */
  body: string;

  /**
   * Is the comment private? Boolean flag for privacy controls per business
   * rule.
   */
  is_private: boolean;

  /**
   * Creation timestamp as ISO 8601 string. From created_at column (audit
   * log).
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last modification/update. For audit/compliance. ISO8601. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. If not null, comment is logically deleted. For
   * audit, GDPR, or content moderation.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IAimallBackendComment {
  /**
   * Filtering and search structure for comment querying. Used by
   * admin/community UX for moderation, thread construction, analytics.
   */
  export type IRequest = {
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;
    post_id?: (string & tags.Format<"uuid">) | null;
    review_id?: (string & tags.Format<"uuid">) | null;
    parent_id?: (string & tags.Format<"uuid">) | null;
    customer_id?: (string & tags.Format<"uuid">) | null;
    is_private?: boolean | null;
    created_at_from?: (string & tags.Format<"date-time">) | null;
    created_at_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * DTO for creating a new comment (aimall_backend_comments). No primary
   * key/id — this is generated on save. Ownership set by authenticated user
   * context, not in payload.
   */
  export type ICreate = {
    /** FK to post being commented (if this is a post-comment). */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** FK to review being commented (for review threads). May be null. */
    review_id?: (string & tags.Format<"uuid">) | null;

    /** Parent comment (if this is a reply to another comment). */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Main comment text. Cannot be empty. */
    body: string;

    /** Whether the comment is private. Enforces business privacy flag. */
    is_private: boolean;
  };

  /**
   * DTO for updating an existing comment. Only certain fields can be changed
   * in-place (body, privacy, deleted_at for soft delete). Update ops require
   * ownership or admin rights.
   */
  export type IUpdate = {
    /** Updated comment text. All changes are audit-logged. */
    body?: string;

    /** Flag to set/unset privacy status. */
    is_private?: boolean;

    /** Soft deletion timestamp. Set this to current time to mark as deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /** 댓글의 요약형 오브젝트. 본문 일부/생성정보/작성자/비공개 여부 등만 제공. */
  export type ISummary = {
    /** 댓글 UUID(기본키) */
    id?: string & tags.Format<"uuid">;

    /** 댓글 텍스트 요약 */
    body?: string;

    /** 작성자 UUID */
    customer_id?: string & tags.Format<"uuid">;

    /** 생성일시(ISO 8601) */
    created_at?: string & tags.Format<"date-time">;

    /** 비공개 여부 */
    is_private?: boolean;
  };
}

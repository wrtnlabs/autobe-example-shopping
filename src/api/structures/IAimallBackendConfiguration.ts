import { tags } from "typia";

/**
 * Represents a full configuration record from aimall_backend_configurations.
 *
 * Links to channel/section as appropriate, contains key/value pairs for
 * platform settings.
 *
 * Includes audit timestamps and optional internal description.
 *
 * Every returned field aligns with the table columns described in the Prisma
 * schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendConfiguration = {
  /**
   * Unique identifier of the configuration record. Relates to the primary key
   * of aimall_backend_configurations in the database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Optional foreign key to the channel the configuration is scoped to.
   *
   * Null for global configurations. If present, matches an existing channel
   * id.
   */
  channel_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Optional foreign key to the section the configuration is scoped to
   * (within the channel).
   *
   * Null if configuration is global or channel scoped only. If present,
   * matches an existing section id.
   */
  section_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Configuration key/name (unique within the combination of
   * channel_id+section_id).
   *
   * Examples: 'site_maintenance', 'enable_ai_feature', 'banner_image_url'.
   *
   * Corresponds directly to the key column.
   */
  key: string;

  /**
   * Actual configuration value as a string (flexible format: may be
   * interpreted by type in frontend or via code).
   */
  value: string;

  /**
   * Optional admin/internal comment or documentation string for this
   * configuration.
   */
  description?: string | null;

  /**
   * Timestamp indicating when this configuration record was created.
   *
   * ISO 8601 format, e.g., 2025-07-29T16:33:39Z.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp indicating last change to this record.
   *
   * Always updated on mutation for proper audit tracking.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendConfiguration {
  /**
   * Summary representation of configuration entities for listing/search
   * outcomes.
   *
   * Abbreviated versus full entity, includes only core business fields for UI
   * display.
   */
  export type ISummary = {
    /** Unique identifier of the configuration (summary view). */
    id: string & tags.Format<"uuid">;

    /**
     * Channel assignment - UUID or null for global. Mirrors database
     * channel_id.
     */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /** Section assignment (UUID) or null for no section scope. */
    section_id?: (string & tags.Format<"uuid">) | null;

    /** Short key/ID for this configuration. */
    key: string;

    /** Actual configuration value, summarized to string. */
    value: string;
  };

  /**
   * Request body object for searching and paginating configuration records
   * (aimall_backend_configurations).
   */
  export type IRequest = {
    /**
     * Requested page for paginated results. Null/omitted is first
     * page/auto.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /** Records per page limit for paginated results. Null for default (100). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /** Filter by configuration key (exact or partial match strings). */
    key?: string | null;

    /**
     * Filter for a specific (optional) channel config. Null for global/all
     * channels.
     */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter for a section-specific config. Null for
     * global/channel-level/all.
     */
    section_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter configuration records where the value contains this substring.
     * Null for no value filter.
     */
    value_contains?: string | null;

    /**
     * Sort field for configurations. Allowed: 'key', 'created_at',
     * 'updated_at'. Null for default ordering.
     */
    sort_by?: "key" | "created_at" | "updated_at" | null;

    /** Sort order. Allowed: 'asc', 'desc'. Null for default. */
    sort_order?: "asc" | "desc" | null;
  };

  /**
   * Create DTO for a new backend configuration entry. Only key and value are
   * strictly required; channel_id and section_id allowed for scoping,
   * description is optional.
   */
  export type ICreate = {
    /**
     * Optional: Channel scope for this configuration. Null for global
     * config, otherwise must match an actual channel.
     */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional: Section scope (within channel). Null for non-section scope;
     * must be actual section if present.
     */
    section_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Configuration key (unique with channel_id and section_id). Must
     * conform to naming conventions (lowercase, underscores/dots if
     * needed).
     */
    key: string;

    /**
     * String value for this config (may represent boolean, int, JSON etc.
     * depending on platform code).
     */
    value: string;

    /** Optional documentation for admins on purpose of this setting. */
    description?: string | null;
  };

  /**
   * Update DTO for configuration records. All fields are optional. Null for
   * channel_id/section_id clears scoping; otherwise, values must be valid
   * references. Used for partial or full updates of config records.
   */
  export type IUpdate = {
    /**
     * Optionally update the channel scope of this config. Null to clear,
     * otherwise must match an actual channel.
     */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optionally update the section scope (within channel) for this config.
     * Null to clear.
     */
    section_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Update to this key, enforcing uniqueness per (channel_id,
     * section_id).
     */
    key?: string;

    /** Updated string value. */
    value?: string;

    /** Administrative descriptive/meta update. */
    description?: string | null;
  };
}

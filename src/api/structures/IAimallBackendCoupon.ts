import { tags } from "typia";

/**
 * Schema type for actual coupon voucher as stored; tracks status, code,
 * assignment, and lifecycle. Used in rewards, discounts, and promotion
 * analytics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendCoupon = {
  /** Primary key (UUID) coupon voucher row. */
  id: string & tags.Format<"uuid">;

  /** Campaign (UUID) this coupon is associated with. FK to campaigns table. */
  discount_campaign_id: string & tags.Format<"uuid">;

  /**
   * Assigned customer for this coupon (if present), or null for universal
   * coupons.
   */
  customer_id?: (string & tags.Format<"uuid">) | null;

  /** Unique code for the coupon voucher. */
  code: string;

  /**
   * Current lifecycle status of the coupon; e.g., 'issued', 'redeemed',
   * 'expired', 'invalidated'.
   */
  status: string;

  /** Mark when coupon was issued. */
  issued_at: string & tags.Format<"date-time">;

  /** Coupon expiration timestamp, after which no further redemption allowed. */
  expires_at: string & tags.Format<"date-time">;

  /** Timestamp when coupon was redeemed; null if not used. */
  redeemed_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IAimallBackendCoupon {
  /**
   * Advanced search/filter parameters for retrieving/coupon query, as per
   * aimall_backend_coupons fields. Used by administrator or customer-facing
   * UIs.
   */
  export type IRequest = {
    /** Restriction to coupons under a specific campaign (UUID). */
    discount_campaign_id?: string & tags.Format<"uuid">;

    /** Optional. Restricts to coupons assigned to a particular customer. */
    customer_id?: string & tags.Format<"uuid">;

    /**
     * Coupon code filter (supports partial or exact search for code
     * matching).
     */
    code?: string;

    /**
     * Filter for issued/redeemed/expired/invalidated. Only single status
     * allowed.
     */
    status?: string;

    /** Filter lower bound for issuance date. */
    issued_at_from?: string & tags.Format<"date-time">;

    /** Filter upper bound for issuance date. */
    issued_at_to?: string & tags.Format<"date-time">;

    /** Lower bound for coupon expiry window. */
    expires_at_from?: string & tags.Format<"date-time">;

    /** Upper bound for expiry window. */
    expires_at_to?: string & tags.Format<"date-time">;

    /** Maximum number of results to return per page. */
    limit?: number & tags.Type<"int32">;

    /** 1-based page number to return. */
    page?: number & tags.Type<"int32">;
  };

  /** Input object for creating a new coupon voucher under a campaign. */
  export type ICreate = {
    /**
     * UUID of the associated discount campaign to which the coupon belongs.
     * Foreign key must reference an existing campaign entry.
     */
    discount_campaign_id: string & tags.Format<"uuid">;

    /**
     * Optional. UUID of the customer who is being assigned this coupon (for
     * personal coupon issuance), or null for universal coupons.
     */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The unique code string associated with this coupon (e.g.,
     * 'NEWYEAR25', 'VIPONLY2025'). Constraints apply for uniqueness and
     * format, enforced application-side.
     */
    code: string;

    /**
     * Initial status for new coupon, typically 'issued'. Enum values
     * allowed: 'issued', 'redeemed', 'expired', 'invalidated'.
     */
    status: string;

    /**
     * Timestamp when the coupon is issued. Must be current/future ISO 8601
     * UTC datetime.
     */
    issued_at: string & tags.Format<"date-time">;

    /**
     * When the coupon will expire. Must be in the future relative to
     * issued_at. ISO 8601 UTC datetime.
     */
    expires_at: string & tags.Format<"date-time">;
  };

  /**
   * DTO for updating coupon voucher records. All fields are optional and
   * business rules govern when fields may be changed.
   */
  export type IUpdate = {
    /**
     * Optional. Assign (update) a customer recipient for the coupon, or
     * null for universal coupons.
     */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Update coupon code. Should remain unique to the campaign; may not be
     * mutable for redeemed/expired coupons per business rule.
     */
    code?: string;

    /**
     * Set new coupon status, e.g., 'redeemed', 'expired', 'invalidated'.
     * Only permitted updates according to business logic.
     */
    status?: string;

    /**
     * Update for the issuance timestamp (e.g., as part of administrative
     * correction).
     */
    issued_at?: string & tags.Format<"date-time">;

    /**
     * Update the coupon expiration field. Only allowed if still in 'issued'
     * state.
     */
    expires_at?: string & tags.Format<"date-time">;

    /**
     * Set this field to record redemption time (for admin triggering
     * redemptions, compliance, or data repair flows). Optional.
     */
    redeemed_at?: string & tags.Format<"date-time">;
  };
}

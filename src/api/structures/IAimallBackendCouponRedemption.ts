import { tags } from "typia";

/**
 * Represents a single coupon redemption event/activity record, per audit
 * requirements in the discount and loyalty system. Each record contains all
 * necessary context for fraud analysis, reporting, and compliance/audit trail.
 *
 * All fields strictly conform to the underlying Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendCouponRedemption = {
  /** Primary event ID (UUID) for the redemption audit record. */
  id: string & tags.Format<"uuid">;

  /** References the coupon being redeemed (coupon primary key). */
  coupon_id: string & tags.Format<"uuid">;

  /**
   * Customer/user performing the redemption. Key for audit and fraud
   * analytics.
   */
  customer_id: string & tags.Format<"uuid">;

  /**
   * Optional campaign association (when redemption event is campaign-scoped).
   * Nullable if not directly tied to a campaign.
   */
  discount_campaign_id?: (string & tags.Format<"uuid">) | null;

  /** Timestamp when the redemption event occurred (ISO 8601 UTC compliance). */
  redeemed_at: string & tags.Format<"date-time">;

  /**
   * Status value for the event ('success', 'failed', etc.); used for
   * audit/campaign analytics.
   */
  redemption_status: string;

  /**
   * Optional order context for redemption event; null if not attached to a
   * particular transaction.
   */
  order_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Optional product context for redemption; null if not item-level or
   * inapplicable.
   */
  product_id?: (string & tags.Format<"uuid">) | null;
};
export namespace IAimallBackendCouponRedemption {
  /**
   * Request DTO for searching, filtering, and paging coupon redemption
   * records for analytics or fraud/compliance review. All fields are optional
   * and support multi-criteria filtering as described in business
   * documentation.
   */
  export type IRequest = {
    /** Page number to fetch. */
    page?: (number & tags.Type<"int32">) | null;

    /** Items per page. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Filter: event's coupon UUID. */
    coupon_id?: string | null;

    /** Filter: event's customer UUID. */
    customer_id?: string | null;

    /** Filter: event's discount campaign. */
    discount_campaign_id?: string | null;

    /** Filter: redemption status (e.g., success/failed). */
    redemption_status?: string | null;

    /** Filter: event's order id. */
    order_id?: string | null;

    /** Filter: event's product id. */
    product_id?: string | null;

    /** Lower timestamp boundary for event time window. */
    redeemed_from?: (string & tags.Format<"date-time">) | null;

    /** Upper timestamp boundary for event time window. */
    redeemed_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Creation DTO for inserting a new coupon redemption event. All required
   * audit and business context fields defined per compliance requirements.
   * Results/status must follow business enumeration.
   */
  export type ICreate = {
    /** Coupon UUID being redeemed (references coupon entity; required). */
    coupon_id: string & tags.Format<"uuid">;

    /**
     * Customer performing the redemption (actor UUID; required for
     * analytics and audit trail).
     */
    customer_id: string & tags.Format<"uuid">;

    /** Optional - campaign context for the redemption event. */
    discount_campaign_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Timestamp for when the event is created. Use current system time in
     * most cases (ISO 8601 UTC compliance), but may be set by admin tools
     * for bulk import/correction flows.
     */
    redeemed_at: string & tags.Format<"date-time">;

    /** Result/status of redemption event (e.g., 'success', 'failed', etc.). */
    redemption_status: string;

    /** Optional - order context for the redemption. */
    order_id?: (string & tags.Format<"uuid">) | null;

    /** Optional - product-specific context for the redemption. */
    product_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Update-request DTO for editing existing coupon redemption records. Only
   * fields that may change after event are included, as described in
   * audit/compliance documentation.
   */
  export type IUpdate = {
    /** Nullable; update association to a campaign. */
    discount_campaign_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Update event status - e.g., to reflect review, success/fail
     * correction.
     */
    redemption_status?: string | null;

    /** Edit reference to the related order if needed. */
    order_id?: (string & tags.Format<"uuid">) | null;

    /** Edit reference to product context. */
    product_id?: (string & tags.Format<"uuid">) | null;
  };
}

import { tags } from "typia";

/**
 * A discount campaign entity for platform-wide or scoped discount rules, as
 * modeled in the AIMall Prisma schema. Captures major campaign attributes,
 * eligibility rules, stacking, assignment, audit, and business tracking.
 *
 * Strictly normalized and used wherever a discount campaign is referenced in
 * coupons, redemptions, and analytic workflows. All property documentation
 * references schema comments and operational system requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendDiscountCampaign = {
  /**
   * Primary key UUID for the discount campaign. Referenced throughout coupon
   * and analytics records for campaign scoping and audit trail.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Display name for the discount campaign visible to admin and reporting
   * tools. Must be unique within UI and analytics context. This is a
   * normalized, atomic field only. See campaign documentation in the discount
   * and loyalty system requirements.
   */
  name: string;

  /**
   * System-unique code for the campaign (e.g., 'BLACKFRIDAY2025'). Used for
   * programmatic lookups, input validation, and campaign stacking logic.
   * Uniqueness enforced by schema and required for advanced cross-referencing
   * in coupon and fraud detection.
   */
  code: string;

  /**
   * Type of discount logic (e.g., 'order', 'product'). Defines whether rules
   * apply at the order or product line level for eligibility and campaign
   * tracking. Must conform to business rules described in campaign entity
   * docs.
   */
  type: string;

  /**
   * Current status of the campaign ('active', 'inactive', 'ended', etc.).
   * Used for operational control and campaign lifecycle transitions. See
   * campaign state machine as defined in functional requirements.
   */
  status: string;

  /**
   * True if this campaign can be combined (stacked) with others, subject to
   * platform stacking rules. This is a core business logic field as described
   * in campaign stacking requirements.
   */
  stackable: boolean;

  /**
   * Timestamp at which the campaign becomes eligible for discounts or coupon
   * issuance/application. Must be in ISO 8601 format. Business logic must
   * enforce campaign eligibility windows.
   */
  start_at: string & tags.Format<"date-time">;

  /**
   * Timestamp after which the campaign is no longer valid for discount/coupon
   * application. ISO 8601 format; used for reporting and fraud analytics.
   */
  end_at: string & tags.Format<"date-time">;

  /**
   * Maximum number of times an individual user can redeem benefits under this
   * campaign. A null or 0 means unlimited per requirements. Must comply with
   * campaign-level and coupon issuance rules.
   */
  max_uses_per_user?: (number & tags.Type<"int32">) | null;

  /**
   * Campaign priority for stacking/precedence resolution. Higher INTEGERS
   * override lower ones. Used in conflict detection and order of application
   * analytics.
   */
  priority: number & tags.Type<"int32">;

  /**
   * Long-form business/admin description of what this campaign is used for.
   * Intended for compliance, audit tracing, and staff review. Nullable.
   */
  description?: string | null;
};
export namespace IAimallBackendDiscountCampaign {
  /**
   * Request DTO for advanced search, filtering, and pagination of discount
   * campaigns.
   *
   * All fields optional; supports partial matches and administrative
   * dashboard bulk-management per campaign search/filtering scenario.
   */
  export type IRequest = {
    /**
     * Requested page number (for pagination). Optional; if null, defaults
     * to first page as per pagination schema.
     */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Records per page. Optional; null or omitted uses system default
     * (typically 100 for admin UIs).
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Optional search filter for campaign name. Supports partial/keyword
     * match for admin search UIs.
     */
    name?: string | null;

    /**
     * Filter by campaign code. Enables advanced campaign lookups or
     * autocomplete admin panel queries.
     */
    code?: string | null;

    /**
     * If provided, filters campaigns by their current operational status.
     * Business logic enforces status enums.
     */
    status?: string | null;

    /** Advanced filter for campaign type (e.g., order, product, etc.). */
    type?: string | null;

    /**
     * Lower bound for campaign active window. If provided, only returns
     * campaigns with start_at >= this value.
     */
    start_at_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Upper bound for campaign active window. If supplied, only returns
     * campaigns with start_at <= this value.
     */
    start_at_to?: (string & tags.Format<"date-time">) | null;

    /** Lower bound for campaign end window. */
    end_at_from?: (string & tags.Format<"date-time">) | null;

    /** Upper bound for campaign end window. */
    end_at_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Create-request DTO for launching a new discount campaign. All required
   * business, eligibility, and control fields defined per schema. References
   * and matches the campaign business rules, stacking logic, and audit
   * documentation.
   */
  export type ICreate = {
    /**
     * Required display/business name for the campaign. Must be
     * human-readable, normalized, and unique system-wide within the admin
     * UIs for clarity.
     */
    name: string;

    /**
     * Required programmatic (unique) code for the campaign. This is used
     * for logic, API, and stacking management—see campaign code best
     * practices in governance docs.
     */
    code: string;

    /**
     * Campaign type (e.g., 'order', 'product'). Required for campaign
     * creation, scoping, and definition. Validation applies as documented
     * in campaign functional requirements.
     */
    type: string;

    /**
     * Initial status for the new campaign (must match allowed business
     * values—typically 'active', 'inactive', etc.).
     */
    status: string;

    /**
     * True if campaign is combinable/stackable with others. Must match
     * stacking governance described in system requirements.
     */
    stackable: boolean;

    /**
     * ISO 8601 start timestamp for when campaign launches. Must not overlap
     * ineligible business periods as per compliance docs.
     */
    start_at: string & tags.Format<"date-time">;

    /** ISO 8601 end timestamp for when campaign ends. */
    end_at: string & tags.Format<"date-time">;

    /** Limits user redemptions in the campaign (0 or null for unlimited). */
    max_uses_per_user?: (number & tags.Type<"int32">) | null;

    /**
     * Campaign priority for conflict/stack logic. Integer—see campaign
     * precedence model.
     */
    priority: number & tags.Type<"int32">;

    /**
     * Admin/business notes for the campaign. Supports system documentation
     * and audit. Nullable field.
     */
    description?: string | null;
  };

  /**
   * Update-request DTO for editing a discount campaign. All updatable atomic
   * fields as described in campaign documentation.
   */
  export type IUpdate = {
    /** Updated display name (if renaming); optional, must be unique. */
    name?: string | null;

    /**
     * Updated campaign code (to correct or rename); optional, must maintain
     * uniqueness and validity.
     */
    code?: string | null;

    /** Updated campaign type. Must still reflect proper business logic. */
    type?: string | null;

    /** Updated status. Validated against campaign state machine rules. */
    status?: string | null;

    /** Set campaign stackability; optional update. */
    stackable?: boolean | null;

    /** Updated campaign start timestamp. */
    start_at?: (string & tags.Format<"date-time">) | null;

    /** Updated campaign end timestamp. */
    end_at?: (string & tags.Format<"date-time">) | null;

    /** Changes the per-user redemption cap (or nulls for unlimited). */
    max_uses_per_user?: (number & tags.Type<"int32">) | null;

    /** Update campaign priority. Higher numbers win in conflicts. */
    priority?: (number & tags.Type<"int32">) | null;

    /** Update campaign admin/business documentation. Nullable. */
    description?: string | null;
  };
}

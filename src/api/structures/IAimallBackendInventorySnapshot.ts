import { tags } from "typia";

/**
 * Normalized schema design for inventory history event. Used for stock audit,
 * reporting, and compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendInventorySnapshot = {
  /** Primary key for unique inventory change event. */
  id: string & tags.Format<"uuid">;

  /** ID of SKU whose inventory was changed. */
  sku_id: string & tags.Format<"uuid">;

  /** ID of product (denormalized for reporting/audit). */
  product_id: string & tags.Format<"uuid">;

  /** Type of inventory change. E.g., 'sale', 'restock', 'manual_adjust'. */
  change_type: string;

  /**
   * Atomic quantity of inventory change event, positive (restock) or negative
   * (sale).
   */
  change_quantity: number & tags.Type<"int32">;

  /** User ID (seller or admin) who performed the change. */
  changed_by: string & tags.Format<"uuid">;

  /** Timestamp when the inventory event was logged. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendInventorySnapshot {
  /**
   * Request schema for searching/filtering inventory snapshots related to a
   * SKU or product. Used for inventory log history queries.
   */
  export type IRequest = {
    /**
     * ID of the SKU for which the inventory snapshots are requested.
     * Required for SKU-scoped searches.
     */
    sku_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter for inventory snapshots related to specific product (optional
     * for SKU-level queries).
     */
    product_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional filter for inventory change type (e.g., 'sale', 'restock',
     * 'manual_adjust').
     */
    change_type?: string | null;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null;

    /** Number of records per page for pagination. */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Payload for creating a new inventory change log. For use in order,
   * restock, or manual inventory update flows.
   */
  export type ICreate = {
    /** ID of the SKU experiencing changing inventory. */
    sku_id: string & tags.Format<"uuid">;

    /** ID of the associated product. */
    product_id: string & tags.Format<"uuid">;

    /**
     * Nature of the inventory change. Must align with business rules for
     * interpretation.
     */
    change_type: string;

    /**
     * Signed integer quantifying the change. Positive for restocks,
     * negative for sales.
     */
    change_quantity: number & tags.Type<"int32">;

    /** ID of the actor (user) performing the change. */
    changed_by: string & tags.Format<"uuid">;
  };

  /**
   * Schema for correcting fields of a recorded change event. Used only in
   * audit/timestamp correction scenarios.
   */
  export type IUpdate = {
    /** Optional. New change type. */
    change_type?: string;

    /** Optional. New quantity adjustment. */
    change_quantity?: number & tags.Type<"int32">;

    /** Optional. Actor reference if correcting. */
    changed_by?: string & tags.Format<"uuid">;
  };
}

import { tags } from "typia";

/**
 * A normalized record of a customer loyalty (point/mileage) event: accrual,
 * redemption, expiration, or refund-related reversal. Supports full compliance
 * with data audit and point lifecycle requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendLoyaltyTransaction = {
  /**
   * Unique identifier for the loyalty transaction record, assigned as a UUID
   * at creation. Used for database lookups, auditing, and reference from
   * other records or systems.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the customer who owns or receives this loyalty transaction
   * (foreign key to customer table). Critical for compliance, audit, fraud
   * detection, and analytics. Must always be present and valid.
   */
  customer_id: string & tags.Format<"uuid">;

  /**
   * Reference to the order event related to this loyalty transaction, or null
   * if not order-triggered (e.g., sign-up bonus, manual adjustment). Patterns
   * in business logic typically connect accrual/redemption to an order
   * completion event. Nullable field.
   */
  order_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Reference to the coupon responsible for this transaction (if applicable,
   * e.g., coupon benefit), or null if not triggered by coupon. Helps analyze
   * coupon vs. general activity patterns.
   */
  coupon_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Delta change in the user's point or mileage balance due to this event.
   * Positive for accrual or awarding of points; negative for redemption,
   * expiration, or withdrawal. Business logic constrains valid ranges and
   * checks for underflow/overflow.
   */
  amount: number &
    tags.JsonSchemaPlugin<{
      format: "double";
    }>;

  /**
   * Type of loyalty transaction event: 'accrual', 'redemption', 'expiration',
   * or 'refund_reversal', as defined in the business logic. String type for
   * forward compatibility.
   */
  type: string;

  /**
   * Free-form or structured note explaining the event (e.g., 'Order 0001
   * redemption', 'Sign-up award', 'Refund reversal'). Used in audit trails,
   * customer transparency, or platform communications.
   */
  description?: string | null;

  /**
   * Timestamp (in ISO 8601 UTC format) when this loyalty transaction event
   * was recorded in the system.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * If this transaction resulted in point or mileage expiration, this field
   * is the effective timestamp for that expiration. Null if not an expiration
   * event.
   */
  expired_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IAimallBackendLoyaltyTransaction {
  /**
   * DTO for advanced search, filter, and paginated listing requests for
   * loyalty transaction events. Allows detailed scoping for reporting, audit,
   * fraud review, or compliance customer queries.
   */
  export type IRequest = {
    /** Requested page of results (pagination). */
    page?: (number & tags.Type<"int32">) | null;

    /** Page size (default system value used if null). */
    limit?: (number & tags.Type<"int32">) | null;

    /** Optional filter for a given customer. */
    customer_id?: string | null;

    /** Filter for transactions linked to specific order. */
    order_id?: string | null;

    /** Filter for transactions referencing coupon/application event. */
    coupon_id?: string | null;

    /**
     * Transaction type filter (e.g., accrual, redemption, expiration,
     * etc.).
     */
    type?: string | null;

    /** Lower window on transaction timestamp. */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** Upper window on transaction timestamp. */
    created_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Represents a request to create a new loyalty transaction event. Consumer
   * must provide all atomic fields necessary for legal and compliance trace;
   * required fields as per schema.
   */
  export type ICreate = {
    /**
     * UUID of the customer who is receiving the point/mileage transaction.
     * Required for all creation events as foreign key constraint.
     */
    customer_id: string & tags.Format<"uuid">;

    /**
     * Optional UUID for related order, if transaction is order-triggered
     * (accrual/redemption via purchase/refund). Null for non-order-related
     * events (e.g., sign-up bonus or manual entry).
     */
    order_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional UUID for related coupon, for events like coupon-based point
     * accrual, or null for non-coupon activity.
     */
    coupon_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The signed value of points to accrue, redeem, or expire. Positive
     * means award; negative means redemption/expiration. Backend must
     * enforce underflow/overflow limits.
     */
    amount: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /**
     * Type of transaction: one of 'accrual', 'redemption', 'expiration',
     * 'refund_reversal'. Application/endpoint logic may validate.
     */
    type: string;

    /**
     * Human- or machine-readable note for the transaction: e.g., 'Bonus
     * campaign', 'Order redemption', can be string or null.
     */
    description?: string | null;

    /**
     * Optional: explicit expiration date/time for this transaction or null
     * for non-expiring events.
     */
    expired_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * DTO for updating mutable (non-relational/audit) fields in a loyalty
   * transaction. Supports compliance/audit workflows; only certain attributes
   * may be changed.
   */
  export type IUpdate = {
    /**
     * (Admin/audit update only) Updated value for transaction delta. Used
     * for error correction or dispute resolution; should be strictly
     * validated.
     */
    amount?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /**
     * (Admin/audit update only) New type for the event (if permitted by
     * business rules), e.g., changing from 'accrual' to 'correction', per
     * platform policy.
     */
    type?: string;

    /** Updated descriptive info for the event/correction. */
    description?: string | null;

    /**
     * Updated expiration timestamp if this record is being corrected to
     * expire points at a different time or null to clear expiration.
     */
    expired_at?: (string & tags.Format<"date-time">) | null;
  };
}

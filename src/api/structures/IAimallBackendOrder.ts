import { tags } from "typia";

/**
 * Order entity model. Represents a placed order by customer for seller with
 * complete state as per aimall_backend_orders schema. All relationship
 * references are UUIDs; status and number are strings. Asserts all business
 * fields required for order fulfillment, audit, and compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendOrder = {
  /** Primary Key. UUID for the order record. */
  id: string & tags.Format<"uuid">;

  /** UUID for the customer who placed the order. */
  customer_id: string & tags.Format<"uuid">;

  /** UUID for the seller fulfilling the order. */
  seller_id: string & tags.Format<"uuid">;

  /** UUID for the shipping address associated with the order. */
  address_id: string & tags.Format<"uuid">;

  /**
   * Business-friendly, human assigned order number (not the primary key).
   * Unique across orders, e.g., 'ORD-20250729-0001'.
   */
  order_number: string;

  /**
   * Order processing status string (e.g., 'pending', 'paid', 'processing',
   * 'shipped', etc.).
   */
  order_status: string;

  /**
   * Total order amount as priced at order submission. Not recalculated.
   * Application logic ensures >= 0.
   */
  total_amount: number;

  /** Order currency, e.g., 'KRW', 'USD'. */
  currency: string;

  /** Order creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Order last modification timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp if order is archived; null if still active (not archived). */
  archived_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IAimallBackendOrder {
  /**
   * Request DTO for searching/paginating/filtering orders. Used in admin,
   * seller, and customer search list UIs. Allows multifaceted queries without
   * denormalized/aggregate properties. All relationship fields are strictly
   * UUID and mapped to aimall_backend_orders schema columns.
   */
  export type IRequest = {
    /**
     * Filter orders by the customer (UUID); for admin/seller, may search by
     * customer.
     */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by seller (UUID) for their order book. */
    seller_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by ship address (UUID). */
    address_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter orders by specific status string (e.g. 'pending', 'paid',
     * 'shipped').
     */
    order_status?: string | null;

    /**
     * Partial or full lookup for business-facing order number (external
     * ref, not primary key).
     */
    order_number?: string | null;

    /** Return orders created on or after this timestamp. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Return orders created on or before this timestamp. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** Return orders updated on or after this timestamp. */
    updated_at_from?: (string & tags.Format<"date-time">) | null;

    /** Return orders updated on or before this timestamp. */
    updated_at_to?: (string & tags.Format<"date-time">) | null;

    /**
     * If true, return only archived orders (archived_at not null); false
     * for only active.
     */
    archived?: boolean | null;

    /** Max records per page. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Page number to retrieve, starting at 1. */
    page?: (number & tags.Type<"int32">) | null;
  };

  /**
   * DTO for order creation request as per aimall_backend_orders. All
   * references by UUID; does not include system-generated/non-input fields
   * (created_at, updated_at set by system).
   */
  export type ICreate = {
    /**
     * UUID for the customer placing the order. Set via authentication
     * context.
     */
    customer_id: string & tags.Format<"uuid">;

    /** UUID for the seller fulfilling the order. */
    seller_id: string & tags.Format<"uuid">;

    /** UUID for the delivery address to which this order will ship. */
    address_id: string & tags.Format<"uuid">;

    /**
     * Human-readable, unique order number assigned at creation. If omitted,
     * the system must generate one.
     */
    order_number?: string;

    /** Initial order status string (e.g., 'pending', 'paid'). */
    order_status: string;

    /** Total amount for this order at placement. */
    total_amount: number;

    /** Order currency, e.g., 'KRW', 'USD'. */
    currency: string;
  };

  /**
   * DTO for updating order record as allowed by business policy and
   * fulfillment state. Only mutable fields from aimall_backend_orders schema
   * are included. Application logic must enforce business constraints on
   * legal transitions; API schema does not perform this check.
   */
  export type IUpdate = {
    /**
     * Update shipping address UUID, if the address is permitted to be
     * changed (before shipped/delivered).
     */
    address_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Update status code for the order (allowed transitions only, as per
     * application logic).
     */
    order_status?: string | null;

    /** Update order price if permitted (before payment confirmed/lock). */
    total_amount?: number | null;

    /**
     * Update order currency, if this flexibility is allowed. Usually rarely
     * changed.
     */
    currency?: string | null;

    /**
     * Timestamp when order updated. Must be set to operation time on
     * update.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}

import { tags } from "typia";

/**
 * Represents a single product (with optional variant) line within an order.
 * Used for detailed reporting, fulfillment, and audit traceability. Fields are
 * denormalized for legal compliance (price snapshots, display name, etc).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendOrderItem = {
  /** Primary key for order item record. System-assigned UUID. */
  id: string & tags.Format<"uuid">;

  /** The parent order's unique identifier (UUID). */
  order_id: string & tags.Format<"uuid">;

  /** Product UUID. References the master product catalog. */
  product_id: string & tags.Format<"uuid">;

  /**
   * The product option (SKU/variant) UUID, nullable if the product has no
   * options.
   */
  product_option_id?: (string & tags.Format<"uuid">) | null;

  /**
   * The display name of the order item, as shown on receipts or in order
   * history. This is a denormalized, point-in-time snapshot taken at order
   * creation to support legal compliance and audits.
   */
  item_name: string;

  /** The number of units ordered for this item line. Must be positive. */
  quantity: number & tags.Type<"int32">;

  /** Snapshot of the per-unit price for this order item at purchase time. */
  unit_price: number &
    tags.JsonSchemaPlugin<{
      format: "double";
    }>;

  /**
   * The total price for this order item line. Typically, quantity multiplied
   * by unit_price at time of order.
   */
  total_price: number &
    tags.JsonSchemaPlugin<{
      format: "double";
    }>;
};
export namespace IAimallBackendOrderItem {
  /**
   * Request/search DTO for advanced filtering, pagination, and search over
   * order items. Supports item-level queries by order, product, variant,
   * display name, creation window, and sorting.
   */
  export type IRequest = {
    /**
     * The unique identifier for the order to which these order items
     * belong. Used for filtering and scoping item-level queries.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * The product's UUID, as a filter or query parameter. Matches the
     * product referenced in the order item.
     */
    product_id?: string & tags.Format<"uuid">;

    /**
     * The product option (SKU/variant) UUID, nullable if the product has no
     * options. Filters for item records referencing a specific product
     * variant.
     */
    product_option_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Search or filter parameter for the display name of the order item as
     * captured in the order items table. Optional, typically used for
     * keyword searches or audit filtering.
     */
    item_name?: string;

    /**
     * Lower bound filter (inclusive) on order item creation timestamp.
     * Returns items created on/after this time. In ISO 8601 format.
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /**
     * Upper bound filter (inclusive) on order item creation timestamp.
     * Returns items created on/before this time. In ISO 8601 format.
     */
    created_to?: (string & tags.Format<"date-time">) | null;

    /**
     * The page number to request for pagination (1-based). If null or
     * omitted, default is the first page.
     */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * The maximum number of items per page of results to return.
     * Defaults/platform-configured value if omitted.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Specifies the field on which to sort the result set. One of:
     * 'created_at', 'updated_at', 'item_name'. If null or omitted, uses
     * default table/index order.
     */
    sort_by?: "created_at" | "updated_at" | "item_name" | null;

    /**
     * Defines the ordering of the sorted field. Either 'asc' (ascending) or
     * 'desc' (descending). Defaults to 'desc' if omitted.
     */
    sort_order?: "asc" | "desc" | null;
  };

  /**
   * DTO for creating a new order item line. Note: The order_id is implicitly
   * set through context (parent order creation) and should not be supplied by
   * clients. Optionally includes product_option_id for variants.
   */
  export type ICreate = {
    /**
     * The product UUID to be ordered. Must be a valid product in the
     * system.
     */
    product_id: string & tags.Format<"uuid">;

    /**
     * The product option (SKU/variant) UUID for the item, if applicable.
     * Null if not applicable.
     */
    product_option_id?: (string & tags.Format<"uuid">) | null;

    /**
     * The display name to record for this item line (point-in-time;
     * typically matched to the catalog or custom for special orders).
     */
    item_name: string;

    /** How many units of this item are ordered. Must be a positive integer. */
    quantity: number & tags.Type<"int32">;

    /**
     * The per-unit price to be snapshotted for this line item at creation
     * time.
     */
    unit_price: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /**
     * The calculated total for this item (usually quantity * unit_price) at
     * order creation/line item addition.
     */
    total_price: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;
  };

  /**
   * DTO for updating mutable fields of a single order item. Only supply
   * fields that are to be changed. product_id and order_id are NOT updatable
   * due to data integrity constraints.
   */
  export type IUpdate = {
    /**
     * If changing the itemâ€™s display name is permitted, supply the new
     * value. Otherwise, omit or set to null.
     */
    item_name?: string | null;

    /**
     * Update the number of units ordered for this line. Must remain a
     * positive integer if provided.
     */
    quantity?: (number & tags.Type<"int32">) | null;

    /**
     * If manually updating the per-unit price snapshot, provide the new
     * value. Otherwise, omit or set to null.
     */
    unit_price?:
      | (number &
          tags.JsonSchemaPlugin<{
            format: "double";
          }>)
      | null;

    /**
     * Update the total value for this line (often recalculated from
     * quantity * unit_price).
     */
    total_price?:
      | (number &
          tags.JsonSchemaPlugin<{
            format: "double";
          }>)
      | null;

    /**
     * If modifying the variant/SKU selection is allowed, update with the
     * new UUID. Otherwise, omit or set to null.
     */
    product_option_id?: (string & tags.Format<"uuid">) | null;
  };
}

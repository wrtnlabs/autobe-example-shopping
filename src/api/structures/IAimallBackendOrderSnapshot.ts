import { tags } from "typia";

/**
 * Schema type for a historical snapshot of order business state, used for
 * audit, rollback, and compliance. This object captures the entire state at a
 * notable business event moment.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendOrderSnapshot = {
  /** Primary key (UUID) of the snapshot. */
  id: string & tags.Format<"uuid">;

  /** Referenced order (UUID) being snapshotted. */
  order_id: string & tags.Format<"uuid">;

  /**
   * Type/category of the snapshot event (e.g. 'created', 'modified',
   * 'fulfilled').
   */
  snapshot_type: string;

  /**
   * Serialized JSON describing full order state at this point in time,
   * including order, items, payments, and shipments. Used for compliance,
   * rollback, and audit.
   */
  snapshot_data: string;

  /**
   * Timestamp record (ISO 8601 UTC with timezone, e.g.
   * '2025-07-29T15:57:29.936Z').
   */
  snapshot_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendOrderSnapshot {
  /**
   * Request DTO for searching/filtering order snapshot records to support
   * audit/compliance flows. Used for admin, customer, or seller purpose.
   */
  export type IRequest = {
    /**
     * UUID of the order to which this snapshot relates. Used for filtering
     * snapshots of a particular order.
     */
    order_id?: string & tags.Format<"uuid">;

    /**
     * Type/category of the snapshot event (e.g., 'created', 'cancelled',
     * 'fulfilled', 'modified'). Used to filter snapshots by business
     * event.
     */
    snapshot_type?: string;

    /**
     * Lower bound (inclusive) for the snapshot timestamp filter. Used to
     * query for snapshots since a particular point in time.
     */
    snapshot_at_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound (inclusive) for the snapshot timestamp filter. Used to
     * query for snapshots up to a certain date/time.
     */
    snapshot_at_to?: string & tags.Format<"date-time">;

    /**
     * Maximum number of records to return in this page. Used for
     * pagination. Default is typically 100.
     */
    limit?: number & tags.Type<"int32">;

    /** Page number to return for paginated results. 1-based index. */
    page?: number & tags.Type<"int32">;
  };

  /**
   * DTO for creating a new audit/compliance snapshot of an order entity. All
   * fields required.
   */
  export type ICreate = {
    /**
     * UUID of the order that is being snapshotted (audited). Must reference
     * a valid, existing order.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * Type of history event: e.g. 'created', 'modified', 'cancelled',
     * 'fulfilled', etc. Used for audit and compliance traceability.
     */
    snapshot_type: string;

    /**
     * A full, serialized JSON string snapshot of the order at this time.
     * Typically captured at the point the event is triggered. Should be a
     * stringified representation of the order and associated entities.
     * Structured validation is handled application-side.
     */
    snapshot_data: string;

    /**
     * Timestamp indicating when this snapshot was created. An ISO 8601 UTC
     * date string (e.g., '2025-07-29T15:57:29.936Z').
     */
    snapshot_at: string & tags.Format<"date-time">;
  };

  /**
   * DTO for updating certain non-immutable fields in an order snapshot.
   * Typically used for correction or compliance adjustments. All fields are
   * optional; only those provided are updated.
   */
  export type IUpdate = {
    /**
     * If updating event type for this historical snapshot. Example:
     * 'cancelled', 'fulfilled', 'error_correction'.
     */
    snapshot_type?: string;

    /**
     * New full serialized snapshot (JSON string) of the order state, to
     * replace previous value. Used for audit correction, not standard
     * operation.
     */
    snapshot_data?: string;

    /**
     * Timestamp for the snapshot; replacement only in compliance or
     * correction flows.
     */
    snapshot_at?: string & tags.Format<"date-time">;
  };
}

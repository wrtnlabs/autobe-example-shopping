import { tags } from "typia";

/**
 * Full permission/role entity model for the AIMall backend RBAC system.
 * Strictly mirrors all atomic, normalized schema fields. Used for admin detail
 * screens, assignment dialogs, and as a $ref target.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendPermission = {
  /**
   * Primary key UUID for the permission/role. Required for referencing and
   * updating.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique code/key for the permission/role (e.g., 'super_admin',
   * 'inventory_editor'). Must be unique in the system.
   */
  name: string;

  /** Human-readable display name for permission. May be localized. */
  display_name: string;

  /**
   * Detailed description documenting exactly what the permission grants or
   * restricts. Used in UI and for compliance.
   */
  description: string;

  /**
   * Timestamp when permission/role was created for historical and compliance
   * tracing.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendPermission {
  /**
   * Summary view of a permission/role definition in the AIMall RBAC system.
   * This DTO includes all atomic schema-defined fields for display in
   * management screens or permission assignment dialogs. Reference:
   * aimall_backend_permissions table, Prisma, and requirements documents.
   */
  export type ISummary = {
    /**
     * Primary key UUID of the permission/role. Essential for referencing
     * permission assignment in other tables, including administrators and
     * sellers.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique code or name for this permission/role (e.g., 'super_admin',
     * 'seller_product_manager'). Used for RBAC mapping and as internal
     * unique key.
     */
    name: string;

    /**
     * User/header-facing display name for permission/role. Used in admin
     * panels, dashboards, audit screens, and analytics. Not required to be
     * unique.
     */
    display_name: string;

    /**
     * A detailed, human readable explanation of what this permission/role
     * grants. Used for documentation and operational clarity. Reference
     * from the permission/role management schema.
     */
    description: string;

    /**
     * Timestamp when the permission/role was created. Maintains audit trail
     * and compliance; atomic field.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Advanced search and filter DTO for querying permissions/roles in the RBAC
   * system. Used by PATCH endpoints for paginated, filtered, and sorted
   * retrieval.
   */
  export type IRequest = {
    /**
     * Optional filter for RBAC permission code/name (exact or partial
     * match). For search interfaces and filtering in the admin panel.
     */
    name?: string;

    /**
     * Optional filter for permission display name. Allows searching for
     * permissions by visible name across different locales or panels.
     */
    display_name?: string;

    /**
     * Lower bound (inclusive) for creation date. ISO8601 date-time for
     * time-range filtering.
     */
    created_at_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound (inclusive) for creation date. ISO8601 date-time for
     * time-range filtering.
     */
    created_at_to?: string & tags.Format<"date-time">;

    /**
     * Results page number (1-based). Used in pagination with standard IPage
     * style types.
     */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Maximum records per page. Max usually 100 for admin UIs. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;
  };

  /**
   * Payload required when creating a new permission/role in the AIMall RBAC
   * system. Reference: aimall_backend_permissions table.
   */
  export type ICreate = {
    /**
     * Unique code for the new permission/role to create. Must be unique
     * (not already used). Reference requirement: RBAC schema, Prisma
     * permissions table.
     */
    name: string;

    /**
     * Display name for the permission/role (used in admin UIs, not required
     * to be unique).
     */
    display_name: string;

    /**
     * Long-form explanation of what this permission/role covers. For
     * documentation and audit.
     */
    description: string;
  };

  /**
   * Fields allowed to be updated for a permission/role in the RBAC system.
   * Only display_name and description are typically changed; name is rarely
   * updated post-creation.
   */
  export type IUpdate = {
    /**
     * (Optional) New unique code for the permission/role (rarely changed in
     * practice, but allowed in schema).
     */
    name?: string;

    /** (Optional) New display name for permission. */
    display_name?: string;

    /**
     * (Optional) New or updated long-form explanation of permission/role
     * purpose.
     */
    description?: string;
  };
}

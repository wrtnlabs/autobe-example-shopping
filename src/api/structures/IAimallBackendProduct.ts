import { tags } from "typia";

/**
 * Main product entity in AIMall backend catalog. All relationships are by
 * reference keys (UUIDs). Used in product detail, listing, and downstream
 * variant/assignment search.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendProduct = {
  /**
   * Product unique UUID. PK in schema; referenced by options, bundles, and
   * SKUs.
   */
  id: string & tags.Format<"uuid">;

  /** FK to parent product category (aimall_backend_categories.id). */
  category_id: string & tags.Format<"uuid">;

  /** FK (UUID) to owner in seller table. */
  seller_id: string & tags.Format<"uuid">;

  /** Main commercial product title for listing/search. */
  title: string;

  /**
   * Optional long-form product description/HTML. Extended details, features,
   * etc.
   */
  description?: string;

  /** URI to product's main display image. Not required; may be blank or null. */
  main_thumbnail_uri?: string;

  /** Product status ('active', 'inactive', 'out_of_stock', or 'deleted'). */
  status: string;

  /** Creation timestamp, audit trail per product. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update, for audit/personalization logic. */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendProduct {
  /**
   * Advanced search/filter/pagination DTO for product catalog. Used in
   * platform and seller admin advanced queries.
   */
  export type IRequest = {
    /**
     * Filter: Partial/full product title match, case-insensitive. Used in
     * UI product searches and catalog filters.
     */
    title?: string;

    /** Filter by specific category (UUID FK to categories). */
    category_id?: string & tags.Format<"uuid">;

    /** Filter for products listed by a particular seller. */
    seller_id?: string & tags.Format<"uuid">;

    /** Filter by product status field ('active', 'inactive', etc.). */
    status?: string;

    /** Lower (inclusive) created_at filter for time-based searching. */
    created_at_from?: string & tags.Format<"date-time">;

    /** Upper (inclusive) created_at filter for time-based searching. */
    created_at_to?: string & tags.Format<"date-time">;

    /** 1-based page for results. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Results/page, max 100. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;
  };

  /**
   * Creation DTO for main product entity in product master table. Only fields
   * allowed by the schema are defined here.
   */
  export type ICreate = {
    /**
     * FK to product category (must exist); required by product schema
     * normalization.
     */
    category_id: string & tags.Format<"uuid">;

    /**
     * FK to seller (must exist); links product ownership to a
     * business/seller.
     */
    seller_id: string & tags.Format<"uuid">;

    /** New product's main selling title. */
    title: string;

    /** Optional HTML/long string describing product features. */
    description?: string;

    /** URI of initial main thumbnail image (optional). */
    main_thumbnail_uri?: string;

    /**
     * Initial status: one of ('active', 'inactive', etc.), see business
     * rules.
     */
    status: string;
  };

  /**
   * DTO for updating fields in a product. Only mutable atomic fields that are
   * allowed for update. seller_id and id are never updated via this DTO.
   */
  export type IUpdate = {
    /**
     * (Optional) Update product category assignment (FK); must reference
     * valid category.
     */
    category_id?: string & tags.Format<"uuid">;

    /** (Optional) Update product name/title. */
    title?: string;

    /** (Optional) Update description/HTML for product details. */
    description?: string;

    /** (Optional) Update URI for the main product thumbnail. */
    main_thumbnail_uri?: string;

    /** (Optional) Update product status, see status field definition. */
    status?: string;
  };
}

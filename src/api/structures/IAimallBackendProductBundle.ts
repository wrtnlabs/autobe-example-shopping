import { tags } from "typia";

/**
 * A single bundle product-to-component relationship row as defined in
 * aimall_backend_product_bundles. Expresses which components are in a bundle
 * group, how many, and if required.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendProductBundle = {
  /**
   * Primary Key UUID for the bundle relationship row. Uniquely identifies
   * each master-component pairing.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign Key to master (bundle) product (aimall_backend_products.id).
   * Indicates which product is the bundle group.
   */
  bundle_product_id: string & tags.Format<"uuid">;

  /**
   * Foreign Key to bundled component product (aimall_backend_products.id).
   * Indicates which product is included as a component in the bundle.
   */
  component_product_id: string & tags.Format<"uuid">;

  /**
   * Whether this component product is required for the bundle. True for
   * mandatory components, false for optional (e.g., gift add-ons).
   */
  is_required: boolean;

  /**
   * How many units of the component product are included per bundle order.
   * Must be a positive integer; e.g., 2 means two of this item per bundle.
   */
  quantity: number & tags.Type<"int32">;
};
export namespace IAimallBackendProductBundle {
  /**
   * Search/filter criteria for advanced queries over product bundle
   * relationships. Filters by bundle master, component, required status, and
   * quantity, and supports pagination. Used in listing/search API patterns
   * for aimall_backend_product_bundles.
   */
  export type IRequest = {
    /**
     * ID of the bundle product (master/group) this relationship is linked
     * to. Foreign Key reference to aimall_backend_products.id.
     */
    bundle_product_id: string & tags.Format<"uuid">;

    /**
     * ID of the bundled component product. Foreign Key reference to
     * aimall_backend_products.id.
     */
    component_product_id?: string & tags.Format<"uuid">;

    /**
     * Filter to only include required/optional relationships. True = only
     * required components; False = only optional ones. Omit for both.
     */
    is_required?: boolean;

    /**
     * Quantity of the component product included in the bundle. Useful for
     * minimum/maximum filtering.
     */
    quantity?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Pagination page number, if paginated listing is desired. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Pagination page size, with a reasonable upper limit. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;
  };

  /**
   * Creation DTO for adding a new bundle-to-component relationship for a
   * product. All fields required to be atomic and pass unique/constraint
   * checks as per product bundling rules.
   */
  export type ICreate = {
    /**
     * The master (bundle) product's UUID. FK to aimall_backend_products.id.
     * Required to scope the new bundle relationship.
     */
    bundle_product_id: string & tags.Format<"uuid">;

    /**
     * The component product's UUID to add. FK to
     * aimall_backend_products.id.
     */
    component_product_id: string & tags.Format<"uuid">;

    /** Whether the included component is required in every bundle order. */
    is_required: boolean;

    /**
     * Number of units of the component included per bundle. Must be at
     * least 1.
     */
    quantity: number & tags.Type<"int32"> & tags.Minimum<1>;
  };

  /**
   * Update DTO for product bundle relationships. Permits mutating
   * required-ness or quantity for an existing bundle-component pair.
   */
  export type IUpdate = {
    /**
     * Change whether this component is required in the bundle. May only be
     * updated if business rules permit.
     */
    is_required?: boolean;

    /** Change the amount of this component included per bundle. */
    quantity?: number & tags.Type<"int32"> & tags.Minimum<1>;
  };
}

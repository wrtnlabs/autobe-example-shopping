import { tags } from "typia";

/**
 * Represents a single product option variant as defined in
 * aimall_backend_product_options (e.g., 'Color: Red'). Each record is unique
 * per (product_id, name, value). Used for variant selection and catalog
 * management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendProductOption = {
  /** Primary Key. Unique per product option. Typed as UUID string. */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign Key reference to aimall_backend_products.id. Indicates which
   * product this option belongs to.
   */
  product_id: string & tags.Format<"uuid">;

  /**
   * Atomic name of the product option (e.g., 'Color', 'Size'). Must be unique
   * per product+name+value tuple.
   */
  name: string;

  /** The atomic value for this product option (e.g., 'Red', 'Medium'). */
  value: string;
};
export namespace IAimallBackendProductOption {
  /**
   * Advanced filtering and search interface for product options, typically
   * used in PATCH operations or GET with query parameters for
   * aimall_backend_product_options. Supports filtering by product, name,
   * value, and paginated return. Aligns with normalized, atomic approach of
   * the schema.
   */
  export type IRequest = {
    /**
     * The unique identifier (UUID) of the product whose options are being
     * queried. Used as a filter or foreign key reference to
     * aimall_backend_products.id.
     */
    product_id: string & tags.Format<"uuid">;

    /**
     * An optional filter by option name (e.g., 'color', 'size'). Partial or
     * case-insensitive search may be supported in the backend.
     */
    name?: string;

    /**
     * An optional filter by option value (e.g., 'Black', 'Large'). Partial
     * or exact value match according to business logic.
     */
    value?: string;

    /**
     * Page number for paginated result sets. Defaults to 1 if not
     * specified.
     */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Page size for paginated results, capped at 100 for system
     * performance.
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;
  };

  /**
   * Creation DTO for adding a new product option to a product. All fields are
   * required in the aimall_backend_product_options schema; unique per
   * (product_id, name, value).
   */
  export type ICreate = {
    /**
     * The UUID of the product to which the new option will be attached.
     * Required for ensuring proper foreign key linkage.
     */
    product_id: string & tags.Format<"uuid">;

    /**
     * Name of the variant dimension (e.g., 'Color'). Must be atomic and
     * unique in the context of product_id+name+value.
     */
    name: string;

    /**
     * Value for the variant dimension (e.g., 'Black', 'XL'). Should be
     * atomic, normalized, and not duplicated with an existing record under
     * the same product_id+name.
     */
    value: string;
  };

  /**
   * Update DTO for patching an existing product option. Allows name or value
   * changes, but must not violate unique constraint on product+name+value or
   * foreign key linkage.
   */
  export type IUpdate = {
    /**
     * Optional update for the name of the product option (e.g., changing
     * 'Colour' to 'Color'). Must still be unique per product+name+value if
     * changed.
     */
    name?: string;

    /**
     * Optional update for the value of the product option (e.g., correcting
     * spelling from 'Blaack' to 'Black'). Must not create a collision on
     * product+name+value.
     */
    value?: string;
  };
}

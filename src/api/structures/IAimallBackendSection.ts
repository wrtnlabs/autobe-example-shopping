import { tags } from "typia";

/**
 * A section entity present within a channel (aimall_backend_sections). Used for
 * organizing display blocks/banners within sales/distribution channels.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendSection = {
  /** Primary Key: Unique section identifier (UUID). */
  id: string & tags.Format<"uuid">;

  /** Parent channel's unique identifier (UUID). */
  channel_id: string & tags.Format<"uuid">;

  /** Section code, unique per channel. */
  code: string;

  /** Human-readable section name. */
  name: string;

  /** Numeric order for display/UI rendering. 3NF, atomic. */
  display_order: number & tags.Type<"int32">;

  /** If true, section is active/visible; otherwise it's suppressed. */
  enabled: boolean;

  /** Timestamp the section was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last section update (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** If non-null, section is soft-deleted as of this time. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IAimallBackendSection {
  /**
   * Request DTO for searching and paginating sections. Follows section
   * list/search conventions as described in aimall_backend_sections API and
   * ERD.
   */
  export type IRequest = {
    /** Page number to request. Null or 1 for first page. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /** Number of records per page. Null for default (100). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null;

    /**
     * Optional filter for sections in a specific channel (UUID). Null for
     * any channel.
     */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by section code. Null for any. */
    code?: string | null;

    /** Filter by section name (human display). Null for any. */
    name?: string | null;

    /** Filter for enabled/disabled. Null for both. */
    enabled?: boolean | null;

    /**
     * Filter for soft-deleted (true=include only deleted, false=exclude
     * deleted, null=include all).
     */
    deleted?: boolean | null;
  };

  /**
   * DTO for creating a new channel section (aimall_backend_sections).
   * Timestamps handled by server/database.
   */
  export type ICreate = {
    /**
     * Identifier of the parent channel to which the section will be linked
     * (UUID, required).
     */
    channel_id: string & tags.Format<"uuid">;

    /** Section code, unique among all sections for the channel. */
    code: string;

    /** Human display name for section. */
    name: string;

    /** Order for UI display/block placement. */
    display_order: number & tags.Type<"int32">;

    /** Whether section is enabled for immediate use upon creation. */
    enabled: boolean;
  };

  /**
   * DTO for updating a section entity. All fields optional except identifier;
   * only non-null properties are updated. Timestamps are adjusted by the
   * database backend.
   */
  export type IUpdate = {
    /**
     * Section code. Changing code is rare and must remain unique for
     * channel. Null for no change.
     */
    code?: string | null;

    /** Desired new human display name. Null for no change. */
    name?: string | null;

    /** Display order value for section. Null for no change. */
    display_order?: (number & tags.Type<"int32">) | null;

    /** Enable/disable that section. Null for no change. */
    enabled?: boolean | null;
  };
}

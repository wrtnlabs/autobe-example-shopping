import { tags } from "typia";

/**
 * Represents an atomic delivery/fulfillment event for an order. All fields are
 * strictly normalized, and one record exists for each physical shipment event.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAimallBackendShipment = {
  /** Primary key for the shipment record (UUID). */
  id: string & tags.Format<"uuid">;

  /** The unique order identifier for the parent order of this shipment. */
  order_id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the delivery address associated with this
   * shipment.
   */
  shipment_address_id: string & tags.Format<"uuid">;

  /** Delivery carrier (e.g., CJ Logistics, UPS, FedEx). */
  carrier: string;

  /** Third-party carrier tracking ID, nullable for non-trackable deliveries. */
  tracking_number?: string | null;

  /**
   * Current shipment state. Typical values: 'pending', 'shipped',
   * 'delivered', etc.
   */
  shipment_status: string;

  /** Timestamp for warehouse departure (nullable). */
  shipped_at?: (string & tags.Format<"date-time">) | null;

  /** Timestamp for final delivery confirmation (nullable). */
  delivered_at?: (string & tags.Format<"date-time">) | null;

  /** Record creation time. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAimallBackendShipment {
  /**
   * Advanced search/filter and pagination request for querying order
   * shipments by various status or date ranges.
   */
  export type IRequest = {
    /** Parent order UUID for filtering shipment events. */
    order_id: string & tags.Format<"uuid">;

    /**
     * Filter shipment events by carrier name (e.g., CJ Logistics, UPS,
     * etc.).
     */
    carrier?: string;

    /**
     * Filter by status of shipment (e.g., 'pending', 'shipped',
     * 'delivered').
     */
    shipment_status?: string;

    /** Filter by the carrier's tracking number for shipments. */
    tracking_number?: string;

    /** Lower bound for shipped_at date/time. */
    shipped_from?: string & tags.Format<"date-time">;

    /** Upper bound for shipped_at date/time. */
    shipped_to?: string & tags.Format<"date-time">;

    /** Lower bound for delivered_at date/time. */
    delivered_from?: string & tags.Format<"date-time">;

    /** Upper bound for delivered_at date/time. */
    delivered_to?: string & tags.Format<"date-time">;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null;

    /** Page size for pagination. */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * DTO for creating a new shipment event in the order fulfillment flow. Used
   * by sellers or admin users to schedule, dispatch, and record a shipment
   * linked to an order. All fields are atomic and directly reflect the
   * shipment audit schema. Business rules may require validation for carrier,
   * status values, and address existence.
   */
  export type ICreate = {
    /**
     * The unique identifier (UUID) of the order to which this shipment is
     * related. It must reference an existing order record. This field
     * enables shipment-to-order assignment and ensures proper
     * normalization. Required for all shipment operations. Example:
     * 'a3818756-3e5f-4b8e-bf47-eed18605d1c1'.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier (UUID) for the delivery address associated with
     * this shipment. Points to a valid address in the system and is
     * mandatory for all outgoing shipments. Used for label printing and
     * logistics API integration.
     */
    shipment_address_id: string & tags.Format<"uuid">;

    /**
     * Name of the shipping carrier handling this shipment event. E.g., 'CJ
     * Logistics', 'FedEx', 'UPS'. The value should be the carrier's
     * business or fulfillment name as assigned by logistics arrangements.
     * Used in customer notifications and compliance records.
     */
    carrier: string;

    /**
     * Optional. Alphanumeric tracking code supplied by the carrier when
     * available. If unknown at shipment creation, supply null and update
     * later. Provides shipment traceability in fulfillment flows. Example:
     * '1Z9999Y70200370006'.
     */
    tracking_number?: string | null;

    /**
     * Current status/state code for shipment fulfillment. Examples include
     * 'pending', 'shipped', 'delivered'. Must match business-state model as
     * per logistics provider/manual operation. Required.
     */
    shipment_status: string;

    /**
     * Timestamp the shipment was dispatched. ISO 8601 UTC datetime string,
     * or null if not dispatched yet. Used in fulfillment metrics and SLA
     * calculations.
     */
    shipped_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Timestamp the delivery was completed. ISO 8601 UTC datetime string,
     * nullable for 'in transit' or not-yet-delivered. Used in analytics and
     * delivery compliance.
     */
    delivered_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * DTO for updating an existing shipment record. All properties are optional
   * and represent atomic fields within the shipment record. Setting a value
   * will replace the previous database value, while omitted properties remain
   * unchanged.
   */
  export type IUpdate = {
    /**
     * Optional updated shipping carrier name. This is a string value and
     * updates the delivery/fulfillment provider for the shipment.
     */
    carrier?: string | null;

    /**
     * Optional. New or corrected carrier tracking number. Can be null if
     * tracking is still unavailable. Used to maintain shipment
     * traceability.
     */
    tracking_number?: string | null;

    /**
     * Optional. Updated status of this shipment. Must match acceptable
     * status values for the business process, e.g., 'pending', 'shipped',
     * 'delivered'. Null means status unchanged. Changing status can trigger
     * event notifications.
     */
    shipment_status?: string | null;

    /**
     * Optional. The new or corrected timestamp for when the shipment was
     * shipped. Null means not set or unmodified.
     */
    shipped_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Optional. Record or update the completion timestamp for delivery
     * confirmation. Null if the delivery is incomplete or to be reset.
     */
    delivered_at?: (string & tags.Format<"date-time">) | null;
  };
}

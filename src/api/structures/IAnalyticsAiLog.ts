import { tags } from "typia";

/**
 * AI log event record describing audit trail for calls, errors, inferences, or
 * output to any system AI/ML provider. Maps all atomic fields of ai_log table;
 * includes normalized references, operation/event meta, payloads, and
 * audit/compliance state. Required in all core compliance, explainability, and
 * dashboard traces of AI Layer activity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAnalyticsAiLog = {
  /** Primary key. AI log event unique identifier. (ai_log.id) */
  id: string & tags.Format<"uuid">;

  /**
   * Provider this log relates to (ai_provider.id). Required for tracing
   * system explainability. Normalized atomic reference. (Prisma:
   * ai_log.ai_provider_id)
   */
  ai_provider_id: string & tags.Format<"uuid">;

  /**
   * Actor/responsible user if present (may be null for system-initiated
   * events). Referenced as foreign key ai_log.user_id. Field-encrypted/masked
   * for compliance.
   */
  user_id?: string & tags.Format<"uuid">;

  /**
   * Event type code (e.g., 'input', 'output', 'error', 'callback').
   * Distinguishes system event stream for compliance/audit/analytics.
   * (ai_log.event_type)
   */
  event_type: string;

  /**
   * Timestamp of when the operation occurred. (ai_log.event_time) Required
   * for audit trace and compliance.
   */
  event_time: string & tags.Format<"date-time">;

  /**
   * Optional logged/serialized input payload (may be masked/redacted for
   * privacy/compliance). All payloads are strictly atomic; sensitive fields
   * handled externally. (ai_log.request_payload)
   */
  request_payload?: string;

  /**
   * Optional logged/serialized output or event payload (may be masked).
   * Required for explainability in AI/ML workflows.
   * (ai_log.response_payload)
   */
  response_payload?: string;

  /**
   * Outcome/status for the event (e.g., 'success', 'failure', 'audit' etc.).
   * Required for trace/audit reporting. (ai_log.status)
   */
  status: string;
};
export namespace IAnalyticsAiLog {
  /**
   * Filtering/search/pagination request for AI log events (ai_log table).
   * Used by dashboards and compliance officers for investigating/monitoring
   * AI/ML operations with a high level of context granularity and time window
   * filtering. All analytics_ai_log fields can be filtered or left open for
   * audit/analytics as required.
   */
  export type IRequest = {
    /**
     * Limit to a target AI provider (ai_provider.id reference). Optional—if
     * not provided, all providers are queried.
     */
    provider_id?: string & tags.Format<"uuid">;

    /** Limit by actor/user (analytics_ai_log user reference). Optional. */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Filter logs by event type: 'input', 'output', 'error', 'callback',
     * etc. Optional.
     */
    event_type?: string;

    /** Filter by status field (success, failure, audit, etc). Optional. */
    status?: string;

    /** Restrict results to logs occurring after this time. Optional. */
    time_from?: string & tags.Format<"date-time">;

    /** Restrict results to logs up to (before) this time. Optional. */
    time_to?: string & tags.Format<"date-time">;

    /** Page number (pagination). Optional. Default: 1. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Records per page. Optional. Default: 100. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Payload for appending a new AI log event as required for dashboard,
   * compliance, root cause, and pipeline auditing. All atomic fields in
   * ai_log are mappable (no denormalized structures). Must pass system event
   * set validation.
   */
  export type ICreate = {
    /**
     * Foreign key to provider associated with log event. Required for
     * insert.
     */
    ai_provider_id: string & tags.Format<"uuid">;

    /**
     * Actor/user if present. Optional—may be omitted/null for system-log
     * events.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Required event type code; must be in the recognized system set as
     * described in ai_log.event_type.
     */
    event_type: string;

    /**
     * Event timestamp (in UTC). Required for correct audit milestoning
     * (Prisma: ai_log.event_time).
     */
    event_time: string & tags.Format<"date-time">;

    /**
     * Serialized event request payload for input/audit/compliance. May be
     * omitted/masked.
     */
    request_payload?: string;

    /**
     * Serialized event output payload, explainability string, or diagnostic
     * content. Optional—may be masked per compliance.
     */
    response_payload?: string;

    /**
     * Required event outcome/status: e.g., 'success', 'failure', 'audit',
     * etc (open string for extensibility).
     */
    status: string;
  };

  /**
   * Payload for updating specific fields (non-identifier/foreign key) of an
   * AI log record, for compliance correction or administrative patch.
   * Permitted only for select fields. All system updates are logged for
   * compliance traceability.
   */
  export type IUpdate = {
    /**
     * Alternate or corrected request content (may be masked/redacted post
     * creation).
     */
    request_payload?: string;

    /**
     * Corrected/augmented event response payload (may be masked or
     * explainability field).
     */
    response_payload?: string;

    /** Permits overriding event type code; must be validated as allowed. */
    event_type?: string;

    /**
     * Allows snapshotting, correcting, or amending event outcome for
     * compliance/analytics.
     */
    status?: string;
  };
}

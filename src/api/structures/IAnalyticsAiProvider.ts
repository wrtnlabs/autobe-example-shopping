import { tags } from "typia";

/**
 * AI Provider configuration entity—maps the ai_provider table as required by
 * modular AI/ML plug-in management. Includes name, type, endpoint URL, optional
 * metadata, enabled status, and audit/compliance timestamps.
 *
 * All fields are atomic (3NF), strictly matching the Prisma schema design for
 * audit/export and plug-in extensibility. Core to AI layer lifecycle,
 * explainable ML audit, and compliance reporting.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAnalyticsAiProvider = {
  /**
   * Primary key. Unique identifier for this AI provider record. See Prisma:
   * ai_provider.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Human-readable unique name for the AI provider. For example, 'OpenAI',
   * 'FraudDetectX'. Derived from ai_provider.name. Refer to AI/ML, Analytics
   * & Future-readiness requirements for configuration transparency and
   * audit.
   */
  name: string;

  /**
   * Provider category code (e.g., 'recommendation', 'fraud_detection',
   * 'analytics'). Used for modular dispatching and reporting across the AI
   * Layer. See ai_provider.provider_type.
   */
  provider_type: string;

  /**
   * Primary API/callback endpoint for this provider (URL). Records connection
   * information for AI hooks, allows pipeline integration without redundancy.
   * (Prisma: ai_provider.api_endpoint).
   */
  api_endpoint: string;

  /**
   * JSON-serialized optional metadata or configuration settings for this AI
   * provider. Supports extensibility, model config, internal keys/tokens per
   * provider. Strictly atomic (not stored outside this field). (Prisma:
   * ai_provider.metadata)
   */
  metadata?: string;

  /**
   * Whether the provider is enabled for dispatch/use in system. Used for
   * lifecycle and plug-in management (ai_provider.active).
   */
  active: boolean;

  /**
   * When the provider record was created (audit/trace field for compliance
   * and operational tracking). (Prisma: ai_provider.created_at)
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * When the provider record was last updated, for audit/export and
   * versioning control. (Prisma: ai_provider.updated_at)
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAnalyticsAiProvider {
  /**
   * AI Provider(모듈/AI 마이크로서비스 라이프사이클)의 조회 및 필터 요청 타입.
   *
   * Provider_type, name, active 여부 등으로 대시보드 내에서 AI 플러그인 현황/진단/검색 파이프라인에
   * 활용합니다. 페이지/리밋 기반 대규모 결과처리에도 대응.
   */
  export type IRequest = {
    /**
     * AI Provider 유형 필터. fraud_detection, recommendation, analytics 등
     * (Prisma: ai_provider.provider_type) 타입별 대시보드/헬스 체크/모델 감별 사용.
     */
    provider_type?: string;

    /**
     * AI Provider 이름 필터(부분검색/완전일치 지정 허용) (Prisma: ai_provider.name)
     * 운영/플러그인/통합 상태 점검 등에서 이름 기준 검색에 활용.
     */
    name?: string;

    /**
     * 활성화 플래그, true면 운영중, false면 비활성화(Prisma: ai_provider.active) 실 운영/비활성
     * 제공자로 헬스 필터할 때 사용.
     */
    active?: boolean;

    /** 페이지 번호(1-base). */
    page?: number & tags.Type<"int32">;

    /** 페이지 당 데이터 수. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Payload for registering a new AI provider—a modular ML microservice or
   * model as required in AI extensibility. Fields must comply with table
   * uniqueness, system config, and auditability constraints. Mapped directly
   * to ai_provider create semantics.
   */
  export type ICreate = {
    /**
     * Unique provider name. Required for creation. Must be unique per
     * ai_provider.name.
     */
    name: string;

    /**
     * Categorization code for AI provider (e.g., 'recommendation',
     * 'fraud_detection'). Required.
     */
    provider_type: string;

    /** Operation endpoint/callback URL for provider API. Required. */
    api_endpoint: string;

    /**
     * Optional JSON-serialized configuration block. See
     * ai_provider.metadata.
     */
    metadata?: string;

    /**
     * Whether provider is enabled for plug-in integration. Required
     * (default: true).
     */
    active: boolean;
  };

  /**
   * Update payload for existing AI provider configuration (ai_provider
   * table). Any field may be updated, subject to uniqueness and config audit
   * policy. Used for admin/system lifecycle management of connected AI
   * plug-ins. All changes are audit-logged in compliance context.
   */
  export type IUpdate = {
    /**
     * Editable provider name. Uniqueness required. Update only via
     * admin/system context.
     */
    name?: string;

    /** Provider type/category code (see create). */
    provider_type?: string;

    /**
     * Mutable callback/API endpoint URL for provider. Changes must be fully
     * audited.
     */
    api_endpoint?: string;

    /** Optional new settings/config for provider (see create). */
    metadata?: string;

    /** Enables/disables this provider from use in AI logic/routing. */
    active?: boolean;
  };
}

import { tags } from "typia";

/**
 * A board/forum entity representing a configurable engagement space in the
 * shopping mall backend. Implements requirements for community, Q&A, notice, or
 * custom spaces per channel and section. Matches fields in the 'boards' Prisma
 * table and ERD. Strict 3NF: all relationships normalized, atomic metadata
 * only. Used for presentation, configuration, moderation, and compliance audit.
 * Linked to configuration templates and segments by channel or section.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IBoard = {
  /**
   * Unique identifier for the board/forum resource, as in the 'boards' table.
   * Used as a reference in posts, threads, configurations, and audit logs.
   * Primary key and point of audit traceability.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The channel/storefront this board belongs to. References the parent
   * 'channels' entity, supporting hierarchical and multi-tenant segmentation
   * as per Core System Concepts.
   */
  channel_id: string & tags.Format<"uuid">;

  /**
   * (Optional/null) Points to a merchandising/storefront section this board
   * is contained in. Nullable for channel-global boards. Supports
   * sophisticated site structuring and merchandising logic.
   */
  section_id?: string & tags.Format<"uuid">;

  /**
   * Reference to the associated board configuration entity. Links this board
   * to a policy/template for permissions, moderation, and other settings (see
   * board_configs table). Fully normalized; configs are versionable
   * entities.
   */
  board_config_id: string & tags.Format<"uuid">;

  /**
   * Display label for the board. Supports multilingual and descriptive names
   * for diverse engagement spaces and community focus.
   */
  name: string;

  /**
   * (Optional) Short, human-readable description of this board. Used in
   * UI/UX, management UIs, and onboarding tools. Aligned with full
   * normalization.
   */
  description?: string;

  /**
   * Timestamp for when the board was created (for compliance, audit, and sort
   * ordering purposes).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * When the board was soft deleted (if applicable); null unless archived for
   * compliance/audit. Key for immutable history and audit trail in engagement
   * systems.
   */
  deleted_at?: string & tags.Format<"date-time">;
};
export namespace IBoard {
  /**
   * Allows filtering, sorting, and pagination of boards in the AI Shopping
   * Mall Backend. Used for search operations, management dashboards, and
   * compliance/audit flows. Based on the structure of the 'boards' table and
   * its segmentation by channel/section. All filters are optional and may be
   * combined as needed.
   */
  export type IRequest = {
    /**
     * (Optional) Restricts board listing to a given channel/storefront.
     * Channel-scoping for multi-site or multi-tenant architectures.
     */
    channel_id?: string & tags.Format<"uuid">;

    /**
     * (Optional) Filters boards by the associated section within a channel
     * for granular merchandising or community area segmentation.
     */
    section_id?: string & tags.Format<"uuid">;

    /**
     * (Optional) Case-insensitive partial string match for the
     * human-readable board name. Enables advanced search and filtering in
     * management UIs.
     */
    name?: string;

    /**
     * (Optional) Restricts results to boards created before this timestamp.
     * Used for data export, analytics period slicing, compliance audit.
     */
    created_before?: string & tags.Format<"date-time">;

    /**
     * (Optional) Filters boards created after this time. Enables flexible
     * trend reporting or rapid onboarding dashboard views.
     */
    created_after?: string & tags.Format<"date-time">;

    /**
     * (Optional) If set, shows only soft-deleted (archived) boards, for
     * audit or compliance review. Used for restoration, compliance
     * retention.
     */
    deleted_only?: boolean;

    /**
     * (Optional) Page number for paginated queries. Defaults to 1 if
     * omitted.
     */
    page?: number & tags.Type<"int32">;

    /**
     * (Optional) Number of boards per page for pagination. System limit or
     * passed value used for controlling response size.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * 보드(게시판) 생성 요청 구조.
   *
   * Boards Prisma 테이블 주석 및 요구사항의 '커뮤니티, Q&A, 공지, 사용자 후기 등 다양한 참여 공간 생성'에
   * 대응하며, 채널/섹션/보드 정책과 연결 지점 정의를 포함한다. 모든 속성에 대해 Prisma 주석 출처와 실제 도메인 업무상의
   * 역할을 상세히 기술함.
   *
   * 채널, 정책, 이름은 필수이고, 섹션/description은 선택 입력(nullable).
   */
  export type ICreate = {
    /**
     * 채널의 고유 ID입니다. 해당 보드는 이 채널에 소속됩니다. Prisma 모델에서 channels 테이블의 'id'와
     * 연관됩니다.
     *
     * 채널 단위의 보드 생성 정책에 따라 필수 입력이며, 상위 채널이 존재해야 합니다.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * 해당 보드가 소속된 섹션의 UUID입니다. null이면 전체 채널 레벨에 존재.
     *
     * Prisma sections 테이블의 'id'와 매핑되며, ERP 다이어그램 및 요구사항에서 특정 구역(섹션)에 종속적으로
     * 보드를 구성해야 할 때 사용됩니다.
     */
    section_id?: (string & tags.Format<"uuid">) | null;

    /**
     * 이 보드가 참조할 보드 정책(권한, 모더레이션 등) 설정의 고유 ID입니다. board_configs 테이블의 id와 매핑.
     *
     * 보드 정책/권한의 재사용 및 버전 관리 실현 목적으로 필수이며, 보드를 만들 때 반드시 연결할 정책의 존재가 보장됩니다.
     */
    board_config_id: string & tags.Format<"uuid">;

    /**
     * 보드 표시 이름입니다. 예시: 'Q&A', '공지사항', '후기게시판' 등.
     *
     * Prisma 테이블에서 보드명(boards.name) 설명에 대응하며, 사용자 및 관리자 UX에 의존하여 한글/다국어 지원이
     * 필요합니다.
     */
    name: string;

    /**
     * 보드의 간단한 목적 및 설명문입니다.
     *
     * Prisma boards.description과 직접 연결되며, 관리자 설정 화면 및 안내 메시지에 표시됩니다.
     *
     * 2개 이상의 단락(줄바꿈 포함 가능)이 허용됩니다.
     */
    description?: string | null;
  };

  /**
   * 보드 수정(전체 혹은 일부) 요청의 구조.
   *
   * Prisma boards 테이블 컬럼 명세 및 커뮤니티 정책 구조 변경/배포 요구에 따라, 주요 속성(이름, 설명, 정책,
   * section)을 선택적으로 수정함. 업무상 정책 템플릿 변경, section 이동, 설명 보강 등 실제 관리자/운영처리 시나리오에
   * 맞춤화.
   *
   * 필수 값은 없고, 제공된 속성만 변경됨.
   */
  export type IUpdate = {
    /**
     * 보드 표시명. boards.name 컬럼 참조.
     *
     * 보드명을 부분 편집하거나, 다국어 UX 요구상 변경이 있을 때 사용.
     */
    name?: string;

    /**
     * 보드의 목적 설명/부연 설명 텍스트.
     *
     * 보드 정책 변경이나 운영 목적, 안내 등에서 활용.
     */
    description?: string | null;

    /**
     * 보드가 포함될 섹션의 UUID. section 이동/변경이 필요할 때 지정, null이면 전체 채널 보드로 이동.
     *
     * Boards.section_id(Prisma) 컬럼에 매핑.
     */
    section_id?: (string & tags.Format<"uuid">) | null;

    /**
     * 적용할 정책(권한/모더레이션 템플릿) UUID. 정책 버전 교체, 옵션 변경 적용 시 사용.
     *
     * 보드를 새 정책으로 전환할 때 필수. Prisma boards.board_config_id와 매핑.
     */
    board_config_id?: string & tags.Format<"uuid">;
  };

  /**
   * 보드 논리 삭제 처리 결과.
   *
   * Boards.deleted_at 컬럼(Soft delete 처리), unique id, 성공여부를 명시적으로 반환한다. 관리 UX,
   * 감사대응 시 삭제 확인용으로 활용.
   */
  export type IDeleteResponse = {
    /** 삭제 성공 여부 플래그. 일반적으로 true 반환. */
    success: boolean;

    /** 삭제 타임스탬프(Soft delete 처리 시점, RFC3339/ISO8601). */
    deleted_at: string & tags.Format<"date-time">;

    /** 삭제된 보드(boards)의 UUID. */
    id: string & tags.Format<"uuid">;
  };
}

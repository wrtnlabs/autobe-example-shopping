import { tags } from "typia";

/**
 * Board system post entity.
 *
 * Represents any post (message, reply) in an engagement board/forum. Structure
 * and attributes per 'board_posts' table.
 *
 * Each post references a thread and optionally a parent post for nesting.
 * Provides full audit and compliance visibility via created_at, deleted_at, and
 * author attribution. Body may be markdown/plain. Smarts about
 * attachments/media handled by separate reference entities.
 *
 * Does not embed author details or thread contextâ€”only atomic references for
 * full normalization.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IBoardPost = {
  /**
   * Unique identifier for the board post (primary key, board_posts.id, see
   * Prisma ERD).
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the thread to which this post belongs.
   *
   * References board_threads.id.
   *
   * Implements thread/post hierarchy and is essential for reconstructing
   * discussion chains.
   */
  thread_id: string & tags.Format<"uuid">;

  /**
   * ID of the parent post (if this is a reply); null for top-level posts.
   *
   * Establishes reply-to structure allowing threaded/nested discussions.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * User ID of the post author.
   *
   * References users.id in the Users subsystem. Required for audit,
   * permissions, and detailed post attribution.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Content of the post (markdown or plain text as supported at runtime).
   *
   * Atomic, not denormalized; all formatting/attachments handled by separate
   * reference/join tables.
   */
  body: string;

  /**
   * Timestamp when the post was created.
   *
   * Enables chronological display, audit, and compliance workflows.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the post was soft-deleted (if applicable).
   *
   * Supports audit-compliant content management and legal/rollback workflows.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IBoardPost {
  /**
   * Request parameters for paginated/filtered board post list operation
   * (PATCH /boardPosts). Includes support for thread, author, and parent
   * filtering, as well as standard pagination and sorting controls. Used by
   * both UI and admin tools for browsing board content. Fulfills full audit
   * trail and scalable engagement compliance.
   */
  export type IRequest = {
    /**
     * Optional filter by thread. Only posts for this thread are included if
     * supplied.
     */
    thread_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter for top-level or reply posts. Null for root posts;
     * thread structure for filtering.
     */
    parent_id?: string & tags.Format<"uuid">;

    /** Optional filter for posts by a specific author (users.id). */
    author_id?: string & tags.Format<"uuid">;

    /** Optional filter to start date/time (inclusive) for created_at. */
    date_from?: string & tags.Format<"date-time">;

    /** Optional filter for end date/time (inclusive) for created_at. */
    date_to?: string & tags.Format<"date-time">;

    /** Page number for pagination (1-based). */
    page?: number &
      tags.Type<"int32"> &
      tags.Default<1> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Maximum number of results per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<20> &
      tags.Minimum<1> &
      tags.Maximum<200> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Optional sorting parameter. Allowed values: created_at, author_id. */
    sort_by?: "created_at" | "author_id";

    /** Sort direction: ascending or descending. */
    sort_order?: "asc" | "desc";
  };

  /**
   * Fields required to create a new board post.
   *
   * Atomic, mapped to create/post API for board_posts. Only core fields;
   * author and created_at determined by system/context. References parent for
   * reply structure.
   */
  export type ICreate = {
    /**
     * ID of the thread to which this post will be added. References
     * board_threads.id.
     */
    thread_id: string & tags.Format<"uuid">;

    /** ID of parent post for nested replies, or null for top-level posts. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Main content of the post, markdown/plaintext as allowed per config. */
    body: string;
  };

  /**
   * Editable/patch fields for updating an existing board post by ID.
   *
   * Intended for content correction by author or moderator. Does not allow
   * thread/author mutation. Parent_id can be set for moderation purposes
   * only.
   */
  export type IUpdate = {
    /** Updated content for the post. */
    body?: string;

    /** Move/change parent for re-threading reply, where allowed by workflow. */
    parent_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Soft delete result for a board post.
   *
   * Reports operation outcome and relevant timestamp for compliance and
   * front-end presentation.
   */
  export type ISoftDeleteResult = {
    /** Indicates whether the soft delete was successful. */
    success: boolean;

    /** Timestamp marking the delete point. Null if not deleted. */
    deleted_at?: string & tags.Format<"date-time">;
  };
}

import { tags } from "typia";

/**
 * Shopping cart entity object.
 *
 * Represents a persistent or guest shopping cart, aligned with CartOrder.carts
 * schema. Includes user/session ownership, cart meta, times, and references to
 * items. Used for both member and guest flows, with soft/delete status for
 * audit and compliance.
 *
 * Maps 1:1 to the carts table, and includes relationships as per system
 * requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICart = {
  /** Unique identifier for this cart (carts.id PK). */
  id: string & tags.Format<"uuid">;

  /**
   * Owner user's ID for this cart (nullable for guest/anonymous). Reference
   * to users.id.
   */
  user_id?: (string & tags.Format<"uuid">) | null;

  /** Session identifier for cart (from carts.session_token). */
  session_token: string;

  /** Expiration timestamp for cart (carts.expires_at). */
  expires_at: string & tags.Format<"date-time">;

  /** Creation datetime of cart (carts.created_at). */
  created_at: string & tags.Format<"date-time">;

  /** Datetime of last update (carts.updated_at). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete marker: when cart was logically deleted (nullable). */
  deleted_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Array of item summary objects or $ref if cart item component is defined.
   * Should $ref to ICartItem if defined globally.
   */
  items?: {
    id?: string & tags.Format<"uuid">;
    product_variant_id?: string & tags.Format<"uuid">;
    quantity?: number & tags.Type<"int32">;
    note?: string;
    created_at?: string & tags.Format<"date-time">;
    updated_at?: string & tags.Format<"date-time">;
    deleted_at?: (string & tags.Format<"date-time">) | null;
  }[];
};
export namespace ICart {
  /**
   * Cart search/filter request schema.
   *
   * Allows filtering, searching, and paginating the user's carts
   * (persistent/guest) by status, expiry, session token, etc. Matches the
   * CartOrder.carts table and supports cross-device, guest/member cart UX
   * flows.
   */
  export type IRequest = {
    /**
     * ID of the cart owner (if user is authenticated). From carts.user_id.
     * Used for admin UX or audit.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Session identifier for guest carts (from carts.session_token).
     * Enables guest flows, merges, and cross-device sessions.
     */
    session_token?: string;

    /**
     * Optional: status marker ('active', 'expired', etc.). Not a direct
     * table column, but synthesized for query filtering.
     */
    status?: string;

    /**
     * Only return carts expiring before this timestamp. For
     * analytics/abandon cart UX.
     */
    expires_before?: string & tags.Format<"date-time">;

    /** Only return carts expiring after this timestamp. */
    expires_after?: string & tags.Format<"date-time">;

    /** Pagination: current page number (1-based). */
    page?: number & tags.Type<"int32">;

    /** Pagination: number of results per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Create cart request payload.
   *
   * Used when creating a new (persistent or guest) shopping cart. Requires at
   * minimum a session_token and assignable user (if authenticated) and may
   * set expiry or initial items. Conforms to CartOrder.carts table and
   * registration flows.
   */
  export type ICreate = {
    /** User's ID (if member, null if guest session). */
    user_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Session token for cart ownership. Required for guest/member
     * distinction and migration.
     */
    session_token: string;

    /** Expiration time for the cart. May be set by policy on creation. */
    expires_at: string & tags.Format<"date-time">;

    /** Optional: array of cart items to pre-populate the newly created cart. */
    items?: {
      product_variant_id?: string & tags.Format<"uuid">;
      quantity?: number & tags.Type<"int32">;
      note?: string;
    }[];
  };

  /**
   * Cart update (PUT one) request body.
   *
   * Used to update attributes of an existing cart, such as session token,
   * user assignment (on migration), and expiry timestamp. Ignores item array
   * in this operation; cart items are updated by dedicated endpoints. Full
   * replacement of updatable fields is expected. Complies with
   * CartOrder.carts structure and audit policies.
   */
  export type IUpdate = {
    /**
     * Assign or change owner (user) of the cart. Used in migration from
     * guest to member. PK from users.id.
     */
    user_id?: (string & tags.Format<"uuid">) | null;

    /** Session token. May be rotated or migrated on login/merge. */
    session_token: string;

    /**
     * Update expiry for cart. Used to extend cart lifetime or migrate
     * sessions.
     */
    expires_at: string & tags.Format<"date-time">;
  };
}

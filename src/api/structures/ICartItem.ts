import { tags } from "typia";

/**
 * 장바구니 한 줄(라인아이템)에 해당하는 데이터 모델입니다.
 *
 * 각 카트 아이템은 특정 카트에 속하며(cart_id), 실제 주문 및 결제와 매핑되는 상품 옵션(product_variant_id), 수량
 * 및 사용자/시스템 메모를 포함합니다. soft-delete 정책(deleted_at) 지원으로, 아이템 삭제 시에도 감사 및 이력 추적이
 * 가능합니다. 필드별 상세 비즈니스/컴플라이언스 요구사항이 적용됩니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICartItem = {
  /**
   * 카트 아이템 고유 식별자입니다.
   *
   * 기본키 역할을 하며, 각 아이템 레코드를 유일하게 구분합니다. ex)
   * 'e2e59bfc-e8fc-4fab-b6c5-96e519a03b7c'
   */
  id: string & tags.Format<"uuid">;

  /**
   * 이 아이템이 속한 카트의 고유 식별자입니다.
   *
   * Foreign Key로 carts.id를 가리킵니다. 게스트/회원 구분 없이 카트별로 그룹핑에 사용됩니다.
   */
  cart_id: string & tags.Format<"uuid">;

  /**
   * 카트에 담긴 실제 판매 단위(상품 옵션)의 PK입니다.
   *
   * Products_variants.id와 연계되어, 어떤 제품(사이즈/색상 등 옵션)을 선택했는지 추적합니다.
   */
  product_variant_id: string & tags.Format<"uuid">;

  /**
   * 장바구니에 담긴 상품 개수입니다.
   *
   * 사용자가 선택한 수량이며, 양수 정수여야 합니다. 주문 가능 최소·최대 수량 등의 비즈니스 제약조건이 존재할 수 있습니다.
   */
  quantity: number & tags.Type<"int32">;

  /**
   * 사용자 또는 시스템이 부여한 메모/주문 요청사항입니다.
   *
   * 예시: '생일 선물로 포장해주세요', '친구 주문 대리구매' 등. 필요 시 빈 값 또는 null 허용.
   */
  note?: string | null;

  /**
   * 아이템 최초 생성 시각입니다.
   *
   * 장바구니에 아이템이 추가된 시간의 타임스탬프(자동 기록).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * 최종 변경(수정) 시각입니다.
   *
   * 수량, 옵션, 노트 등 아이템 정보가 변경될 때마다 변경 시간 자동 기록.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * 소프트 삭제 시각입니다.
   *
   * 해당 아이템이 삭제되면, 실제로 DB에서 제거되는 것이 아니라 deleted_at 필드에 삭제된 시간을 기록하여 복구/감사/통계
   * 목적으로 유지합니다.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICartItem {
  /**
   * Cart item search/filter request schema.
   *
   * Allows querying a paginated, filtered list of cart items, supporting
   * filtering by cart, product variant, note, or date ranges. Matches
   * CartOrder.cart_items, supports administrative search, analytics, and user
   * flows.
   */
  export type IRequest = {
    /**
     * ID of the parent cart (cart_items.cart_id); limits query to items
     * from one cart.
     */
    cart_id?: string & tags.Format<"uuid">;

    /**
     * Filter for a variant-skew item (e.g., for analytics, inventory
     * analysis).
     */
    product_variant_id?: string & tags.Format<"uuid">;

    /** Return only items created after this timestamp. */
    created_after?: string & tags.Format<"date-time">;

    /** Return only items created before this timestamp. */
    created_before?: string & tags.Format<"date-time">;

    /** Pagination: current page number. */
    page?: number & tags.Type<"int32">;

    /** Pagination: records per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * 새로운 장바구니 아이템(라인)을 생성할 때 사용하는 입력 타입입니다.
   *
   * 카트 식별자(cart_id), 실제 담을 SKU(옵션) 식별자(product_variant_id), 수량, 메모 등 생성 전용
   * 필드를 포함합니다. 유효성 체크 및 외부 참조(PK)의 존재성은 별도 검증/비즈니스 로직에서 수행합니다.
   */
  export type ICreate = {
    /** 카트 PK (carts.id). 반드시 생성 타겟 카트가 사전에 존재해야 함. */
    cart_id: string & tags.Format<"uuid">;

    /** 등록 후 바로 담길 상품 옵션(variant) PK (product_variants.id). */
    product_variant_id: string & tags.Format<"uuid">;

    /** 상품 수량. 1 이상의 정수(최대값 제한은 시스템 설정에 따름). */
    quantity: number & tags.Type<"int32">;

    /** 메모/요청사항. 옵션 필드. null 가능. */
    note?: string | null;
  };

  /**
   * 카트 아이템(한 줄) 수정 시 사용하는 입력 타입입니다.
   *
   * 상품 옵션(variant), 수량 변경, 메모 수정 등을 지원하며, 일부 필드는 옵션으로 전체/부분 수정을 모두 허용합니다.
   * (PUT/patch 등 동작 정책에 따라 실서비스에서 다르게 동작 가능).
   */
  export type IUpdate = {
    /** 옵션 변경 시 새로운 variant PK. 변경하지 않으면 기존 유지. */
    product_variant_id?: string & tags.Format<"uuid">;

    /** 변경된 수량. 옵션 필드로, 누락 시 기존 수량 유지. 1 이상의 값만 허용. */
    quantity?: number & tags.Type<"int32">;

    /** 수정된 메모/요청사항. null이면 삭제, 빈 값은 유지 또는 별도 정책 설정. */
    note?: string | null;
  };
}

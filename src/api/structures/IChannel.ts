import { tags } from "typia";

/**
 * Data Transfer Object representing a Channel (storefront/brand instance) in
 * the shopping mall system. Covers all core and meaningful audit/compliance
 * fields as required by ERD model 'channels' and its normalized schema. Used in
 * all CRUD operations and channel search endpoints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IChannel = {
  /** Primary key, unique identifier for the Channel. Prisma: channels.id */
  id: string & tags.Format<"uuid">;

  /**
   * Channel code. Required, unique per system. Used in business logic, APIs,
   * and configuration. Prisma: channels.code
   */
  code: string;

  /**
   * Human-readable channel (storefront/brand) name for display purposes.
   * Prisma: channels.name
   */
  name: string;

  /**
   * Optional description for the channel (admin/internal notes, onboarding
   * info). Prisma: channels.description
   */
  description?: string | null;

  /**
   * Creation timestamp. Immutable. Used for audit/compliance. Prisma:
   * channels.created_at
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last updated timestamp. Updated on modifications to core channel data or
   * configuration. Prisma: channels.updated_at
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. Set when channel is logically deleted from main
   * use but retained for audit history. Prisma: channels.deleted_at
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IChannel {
  /**
   * Request structure for searching and listing Channel entities in the
   * shopping mall backend. Implements support for pagination, filtering by
   * core attributes (code, name, creation date), inclusion of soft-deleted
   * records, and sorting for scalable multi-storefront/channel
   * administration. Field-level documentation aligns with normalized columns
   * of the 'channels' Prisma model. This DTO is referenced in PATCH
   * /channels, and underpins all multi-entity fetch operations for channels.
   */
  export type IRequest = {
    /**
     * Query page number for pagination. Optional. Zero-based for offset
     * pagination.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Maximum records to return per page. Optional. Limits large result
     * sets for scalable queries.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Filter by unique channel code. Matches exact string on code field. */
    code?: string;

    /**
     * Keyword or partial search for channel display name. Matches using
     * GIN/trgm search if available.
     */
    name?: string;

    /** Filters channels created on or after this timestamp. */
    createdFrom?: string & tags.Format<"date-time">;

    /** Filters channels created on or before this timestamp. */
    createdTo?: string & tags.Format<"date-time">;

    /**
     * If true, include soft-deleted channel records (deleted_at not null)
     * in results. Optional.
     */
    includeDeleted?: boolean;

    /**
     * Optional field to order results, defaults to created_at descending.
     * Accepted values: code, name, created_at, updated_at.
     */
    sortBy?: "code" | "name" | "created_at" | "updated_at";

    /**
     * Sort direction for sortBy field: 'asc' or 'desc'. Optional, default
     * is 'desc'.
     */
    sortDir?: "asc" | "desc";
  };

  /**
   * Payload for creating a new Channel (storefront/brand context) in the
   * system. Used in POST /channels. Contains only fields required for
   * unique/valid channel insert according to the channels table's 3NF
   * specification. All audit fields (created_at/updated_at) are managed by
   * the backend on creation.
   */
  export type ICreate = {
    /**
     * New unique channel code to assign for business/API reference.
     * Required. Must be unique among active and soft-deleted channels.
     * Prisma: channels.code
     */
    code: string;

    /**
     * Human-readable name for the new channel/storefront/brand entity.
     * Required. Prisma: channels.name
     */
    name: string;

    /**
     * Optional channel description (admin/internal annotation). Optional.
     * Prisma: channels.description
     */
    description?: string | null;
  };

  /**
   * Payload for updating a Channel's data in the backend via PUT
   * /channels/{id}. Only mutable fields are included (all primary keys,
   * created_at, code cannot be changed after creation).
   */
  export type IUpdate = {
    /**
     * New name for the Channel (storefront/brand). Update required for
     * rebranding/major config changes. Optional.
     */
    name?: string;

    /** Updated admin/internal channel description. Optional. */
    description?: string | null;
  };
}

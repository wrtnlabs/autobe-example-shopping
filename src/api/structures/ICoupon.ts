import { tags } from "typia";

/**
 * Represents a coupon entity in the system. Direct 1:1 mapping to coupons table
 * columns in Prisma schema.
 *
 * Contains all atomic coupon attributes as per 3NF: id, type, code, channel,
 * issued/expiry, stacking, and audit/deletion markers. Complies with audit,
 * campaign, and compliance requirements from the Promotions & Balances domain.
 *
 * Enables all CRUD, reporting, entitlement, and compliance export scenarios.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICoupon = {
  /** UUID PK for the coupon. Follows coupons.id in Prisma. Assigned on insert. */
  id: string & tags.Format<"uuid">;

  /** Owning channel ID (multi-tenancy scope), coupons.channel_id in DB. */
  channel_id: string & tags.Format<"uuid">;

  /**
   * Coupon code/identifier (not always present). Uniqueness enforced for
   * code-based coupons. Prisma: coupons.code.
   */
  code?: string;

  /**
   * Coupon type: public, private, code, as described in coupons.type
   * (Prisma).
   */
  type: string;

  /**
   * Admin-facing coupon title. Used for dashboards/reporting. Prisma:
   * coupons.title.
   */
  title: string;

  /**
   * Marketing or eligibility description. Optional. Prisma:
   * coupons.description.
   */
  description?: string;

  /** Timestamp when coupon was issued. Required, in coupons.issued_at. */
  issued_at: string & tags.Format<"date-time">;

  /**
   * When coupon expires. Nullable for non-expiring coupons.
   * coupons.expired_at.
   */
  expired_at?: string & tags.Format<"date-time">;

  /**
   * Upper limit for total uses. Optional, 0=unlimited per rules.
   * coupons.max_redemptions.
   */
  max_redemptions?: number & tags.Type<"int32">;

  /**
   * Stacking eligibility: true if coupon can be combined.
   * coupons.is_stackable.
   */
  is_stackable: boolean;

  /** Row creation timestamp for audit. Prisma: coupons.created_at. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. coupons.updated_at. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete marker for regulatory/audit compliance. coupons.deleted_at. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ICoupon {
  /**
   * Coupon search and filter request body. Refers to all major coupon
   * attributes from the coupons Prisma tableâ€”code, type, title,
   * issued/expired/deleted markers, status. Provides robust filtering for
   * admin UIs, campaign management, and compliance reporting.
   *
   * Fields and types directly reference the coupons table fields and standard
   * API filter conventions.
   *
   * Includes both direct DB-backed columns (code, channel_id, type) and
   * logical/computed fields (status, time windows).
   */
  export type IRequest = {
    /**
     * Coupon code to filter for exact match or partial search. Derived from
     * 'code' in Prisma coupons schema. Example: 'SUMMER50', optional.
     */
    code?: string;

    /**
     * Coupon type filter: public, private, or code-based. Reflects 'type'
     * in coupons DB. Optional.
     */
    type?: string;

    /**
     * Filter by admin-facing title. Enables search across campaigns.
     * Example: 'Summer Sale', optional.
     */
    title?: string;

    /**
     * UUID of the channel for scoping coupon lookup. From 'channel_id' in
     * coupons table. Optional.
     */
    channel_id?: string & tags.Format<"uuid">;

    /**
     * Filter by coupon lifecycle status: active, expired, deleted. Not a DB
     * column but logical status computed from issued/expired/deleted_at.
     */
    status?: string;

    /**
     * Lower bound for coupon 'issued_at' (inclusion, ISO8601). Facilitates
     * range filtering. Optional.
     */
    issued_from?: string & tags.Format<"date-time">;

    /** Upper bound for coupon issue time. ISO8601. Optional. */
    issued_to?: string & tags.Format<"date-time">;

    /** Lower bound for coupon 'expired_at'. Optional, ISO8601. */
    expired_from?: string & tags.Format<"date-time">;

    /** Upper bound for coupon 'expired_at'. Optional, ISO8601. */
    expired_to?: string & tags.Format<"date-time">;

    /**
     * Filter for coupons that are stackable (can be combined with others).
     * Prisma coupons.is_stackable. Optional.
     */
    is_stackable?: boolean;

    /** Pagination: page number (1-based). Standard throughout API. */
    page?: number & tags.Type<"int32">;

    /** Pagination: number of results per page. Standard API pagination. */
    pageSize?: number & tags.Type<"int32">;

    /**
     * Field to sort by. E.g., 'issued_at', 'title', or 'expired_at'.
     * Optional, defaults to issued_at.
     */
    sortBy?: string;

    /** Sort order, ascending or descending. API default: 'desc'. Optional. */
    sortDirection?: "asc" | "desc";
  };

  /**
   * Request body for creating a new coupon entity in the system.
   *
   * Fields must follow Prisma coupons table and compliance logic: type,
   * channel, title always required. Code is required for code-based coupons,
   * optional for others. Dates are ISO-8601. is_stackable is always mandated.
   * Audit fields (created_at, updated_at) are managed server-side
   * post-insert.
   */
  export type ICreate = {
    /**
     * Target channel UUID (coupons.channel_id). Required for all coupon
     * creation.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * Coupon type. Supports 'public', 'private', or 'code' modes (see
     * requirements/CouponType). Prisma: coupons.type.
     */
    type: "public" | "private" | "code";

    /** Admin-facing coupon title. Max 255 chars. coupons.title. */
    title: string;

    /**
     * Coupon code if applicable. Required for code-based coupons, optional
     * for public/private types.
     */
    code?: string;

    /**
     * Longform description: eligibility, what the coupon offers. Optional
     * (coupons.description).
     */
    description?: string;

    /** ISO8601 issuance timestamp. If omitted, defaults to current time. */
    issued_at?: string & tags.Format<"date-time">;

    /**
     * Expiry date/time (nullable for no-expiry). Prisma:
     * coupons.expired_at.
     */
    expired_at?: (string & tags.Format<"date-time">) | null;

    /** Upper bound on redemptions, optional. If omitted or null = unlimited. */
    max_redemptions?: number & tags.Type<"int32">;

    /**
     * Whether coupon can be stacked/combined. Prisma: coupons.is_stackable.
     * Required.
     */
    is_stackable: boolean;
  };

  /**
   * Request body for updating an existing coupon. Every field is optional for
   * PATCH/PUT semantics; missing fields are not changed. Only fields listed
   * may be edited after creation, in line with business and regulatory update
   * workflows.
   *
   * Full compliance with coupons table schema and audit/trace requirements.
   */
  export type IUpdate = {
    /** New coupon title. Prisma: coupons.title. */
    title?: string;

    /** New marketing/eligibility/notes text. coupons.description. */
    description?: string;

    /** Changed expiry date. coupons.expired_at. */
    expired_at?: (string & tags.Format<"date-time">) | null;

    /** New cap on redemptions. coupons.max_redemptions. */
    max_redemptions?: number & tags.Type<"int32">;

    /** Change stacking eligibility. Prisma: coupons.is_stackable. */
    is_stackable?: boolean;
  };
}

import { tags } from "typia";

/**
 * 교환 (exchanges) 엔터티의 데이터 스키마입니다.
 *
 * 쇼핑몰 주문건에 대한 교환 처리(제품 오배송, 옵션 변동, 이슈 응답) 요청을 수용ㆍ처리하며, 모두 불변 감사이력/법적 분쟁 대응 근거로
 * 저장.
 *
 * 각 필드:
 *
 * - Order_item_id/order_items.id: 교환 대상 SKU 명확화
 * - User_id: 신청자(본인확인/RBAC/분쟁대응용)
 * - Status: 워크플로우 자동/반자동
 * - Reason: 고객/오퍼레이터 입력
 * - 등록/완료일 및 삭제일(감사/통계수집)
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IExchange = {
  /**
   * 교환 레코드의 고유 ID.
   *
   * @see exchanges.id, PK.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 교환 대상 주문 아이템의 ID (order_items.id FK).
   *
   * AI 쇼핑몰에서 교환(returns와 별개 워크플로우) 요청의 핵심 참조정보. 주문 상세, 물류 트래킹 등과 연계됨.
   */
  order_item_id: string & tags.Format<"uuid">;

  /**
   * 교환 신청자(고객) 고유 ID. FK(users.id)
   *
   * CS이슈관리, 법적 대응, RBAC 정책 구현 시 필수 참조.
   */
  user_id: string & tags.Format<"uuid">;

  /** 교환 요청 사유(고객 입력 값, 사전 옵션 + 자유입력 혼합가능). */
  reason: string;

  /**
   * 교환 워크플로우 상태코드. 예: requested, approved, shipped, rejected, completed 등.
   *
   * 관리자/시스템/자동화 정책에서 절차단계 관리에 필수.
   */
  status: string;

  /** 교환 신청(등록) 시각 ISO. */
  requested_at: string & tags.Format<"date-time">;

  /**
   * 교환 최종 완료 시각.
   *
   * 미완료(진행중) 레코드라면 null.
   */
  completed_at?: (string & tags.Format<"date-time">) | null;

  /** 레코드 등록 시각. 감사/BI/정합성 근거 제공. */
  created_at: string & tags.Format<"date-time">;

  /** 마지막 수정 시각. 워크플로우 상태 변동, evidence 첨부, 담당자 입력 등 반영 시 즉시 변경됨. */
  updated_at: string & tags.Format<"date-time">;

  /** 소프트 삭제(삭제 요청/관리자 숨김 등) 시각. 실제 삭제는 DB에 남기지 않고, 데이터 정합성/법적 감사 감사 요구 준수. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IExchange {
  /**
   * 교환 엔터티 리스트/검색을 위한 요청 페이로드 스키마.
   *
   * AI 쇼핑몰 백엔드 애프터세일즈(교환관리) 기능 사용자가 교환 이력(본인/관리자 전체)을 조회하기 위한 검색조건 구조입니다. 주로
   * 마이페이지, 관리자 CS, 이슈관리 등에서 페이징/필터를 토대로 교환 프로세스 전체 현황을 분석할 때 쓰입니다.
   */
  export type IRequest = {
    /**
     * 조회 대상(고객) 사용자의 ID (선택사항, admin search 등 추가 filter 용).
     *
     * RBAC 규칙 상 관리자는 전체 조회, 고객은 본인만 검색 가능.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * 조회 필터용 주문 아이템 ID (교환 대상), 선택적 적용.
     *
     * 특정 아이템의 교환 이력만 확인 시 활용.
     */
    order_item_id?: string & tags.Format<"uuid">;

    /**
     * 교환 진행 상태 필터. requested/approved/shipped/completed/rejected 등 교환
     * 워크플로우의 진행 상태별 검색 (필터 옵션).
     */
    status?: string;

    /** 교환 요청 사유, 키워드 검색용. */
    reason?: string;

    /** 검색 시작일 필터 (교환 요청일 기준, ISO8601). */
    start_date?: string & tags.Format<"date-time">;

    /** 검색 종료일 필터 (교환 요청일 기준, ISO8601). */
    end_date?: string & tags.Format<"date-time">;

    /** 결과 페이지 번호, 1부터 시작. */
    page?: number &
      tags.Type<"int32"> &
      tags.Default<1> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** 한 페이지당 교환 내역 최대 개수. 기본/최대값 설정 필요. */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<50> &
      tags.Minimum<1> &
      tags.Maximum<1000> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * 교환 등록 Insert(신규 생성)를 위한 요청 페이로드 타입입니다.
   *
   * Order_item_id와 user_id(본인 인증), reason(사유)은 필수로 입력받고, 교환 이력 중복 여부, 상태체크,
   * RBAC 일치 등 서버비즈니스/로직 검증 필요.
   *
   * 완성된 교환 레코드는 IExchange에 저장.
   */
  export type ICreate = {
    /**
     * 교환 대상(주문 아이템) ID. 필수. FK: order_items.id.
     *
     * 중복(이미 교환/반품 요청된 아이템) 불가.
     */
    order_item_id: string & tags.Format<"uuid">;

    /** 교환 신청자(본인인증 사용자)의 ID. 일반적으로 현재 로그인 세션. */
    user_id: string & tags.Format<"uuid">;

    /** 고객 서비스/운영담당에 필요한 교환 사유. */
    reason: string;
  };

  /**
   * 교환 레코드 업데이트 요청 타입입니다.
   *
   * 사유나, 상태(workflow) 조정, 완료시각 기록에 활용하며, 필드는 RBAC/업무 정책상 변경 제한.
   */
  export type IUpdate = {
    /** 교환 사유 변경. 교환 신청 완료 전(status가 requested)까지만 수정 허용. */
    reason?: string;

    /** 교환 상태 워크플로우(approved, shipped, completed, rejected 등) 변경. 관리자/담당자 전용. */
    status?: string;

    /** 교환 완료 시각(수동입력/정책시점 기록). */
    completed_at?: (string & tags.Format<"date-time">) | null;
  };
}

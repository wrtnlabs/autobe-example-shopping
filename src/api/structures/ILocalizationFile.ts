import { tags } from "typia";

/**
 * Localization file metadata and linkage structure for i18n pipeline
 * integration, audit review, and admin file management.
 *
 * Fields as described in the Prisma DB schema, with detailed annotations for
 * compliance and i18n operations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ILocalizationFile = {
  /**
   * System identifier for the file row.
   *
   * Mapped from ILocalizationFile.id in Prisma.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Channel UUID where this locale file belongs. From
   * ILocalizationFile.channel_id.
   */
  channel_id: string & tags.Format<"uuid">;

  /** Original file name for display, admin QA, & export. See Prisma. */
  file_name: string;

  /** ISO 8601 datetime of upload. Used for audit/QC. */
  uploaded_at: string & tags.Format<"date-time">;

  /**
   * UUID of the user/admin/translator who uploaded this file. From
   * ILocalizationFile.uploaded_by. Tracks audit actor.
   */
  uploaded_by: string & tags.Format<"uuid">;

  /**
   * Secure CDN/object storage URL to download the uploaded file for
   * review/import. Based on DB schema.
   */
  file_url: string;

  /**
   * Semantic integer version for this file, supporting versioned language
   * pack management. From Prisma.
   */
  version: number & tags.Type<"int32">;
};
export namespace ILocalizationFile {
  /**
   * Request body for paging, filtering, and searching localization file
   * imports (used for i18n pipeline and admin-grade export/import tools).
   *
   * Based on ILocalizationFile fields, useful for admin QA and audit
   * pipelines.
   */
  export type IRequest = {
    /**
     * Channel UUID (scopes which storefront/site this localization file is
     * for).
     *
     * References ILocalizationFile.channel_id in Prisma.
     */
    channel_id?: string & tags.Format<"uuid">;

    /**
     * (Optional) Name or pattern search for the localization file(s).
     *
     * Used for filtering, QA, or admin export flows.
     */
    file_name?: string;

    /**
     * Optional filter for batch/pack version. Based on
     * ILocalizationFile.version from Prisma.
     */
    version?: number & tags.Type<"int32">;

    /**
     * (Optional) UUID of the user/admin/translator who uploaded the
     * localization file.
     */
    uploaded_by?: string & tags.Format<"uuid">;

    /** Pagination page for list view. Defaults to 1 unless set. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * How many records to return per page (default: as defined by API,
     * e.g., 100).
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Creation payload for uploading/registering a new localization file in the
   * backend system.
   *
   * All fields are required, conforming to DB schema and i18n pipeline import
   * logic.
   */
  export type ICreate = {
    /** Target channel UUID for associating this file. Referenced from DB. */
    channel_id: string & tags.Format<"uuid">;

    /** Name of the imported file, used for trace/audit. */
    file_name: string;

    /** Uploader's user/admin UUID for trace/audit. */
    uploaded_by: string & tags.Format<"uuid">;

    /** CDN/object storage reference to actual upload artefact. */
    file_url: string;

    /**
     * Sequential version, for staged pack control and migration. Required
     * by DB.
     */
    version: number & tags.Type<"int32">;
  };

  /**
   * Update payload for a localization file row.
   *
   * Only supports updating name/version; all other fields are immutable
   * post-upload except by delete/restore.
   */
  export type IUpdate = {
    /**
     * Update the file name (admin/QA only)â€”must not introduce conflict
     * under same channel/version.
     */
    file_name?: string;

    /**
     * Incremented file version for major/minor update. Updates handled in
     * migration/admin workflows.
     */
    version?: number & tags.Type<"int32">;
  };
}

import { tags } from "typia";

/**
 * Represents a single versioned translation unit as per the Prisma
 * localization_strings table.
 *
 * All fields are atomic and map directly to the DB schema. Description fields
 * include i18n QA, context, versioning, and compliance notes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ILocalizationString = {
  /**
   * Primary key for the localization string entry.
   *
   * References ILocalizationString.id in Prisma. Required for unique
   * identification.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique translation key (for UI, message, etc).
   *
   * Based on Prisma column 'key'. Required for linking source/target strings.
   * Example: 'cart_empty_message'.
   */
  key: string;

  /**
   * Locale code, e.g. 'en-US', 'ko-KR', for i18n.
   *
   * Matches the 'locale' field in Prisma (ISO/canonical locale string).
   * Determines which locale this translation applies to.
   */
  locale: string;

  /**
   * Translated/localized text value.
   *
   * Sourced from ILocalizationString.value in Prisma. Must not be null.
   * Example: '장바구니가 비었습니다.' for 'cart_empty_message', locale 'ko-KR'.
   */
  value: string;

  /**
   * Version number for versioned localization management.
   *
   * Corresponds to ILocalizationString.version in Prisma. Increased upon
   * edits, enables rollback/history/QA.
   */
  version: number & tags.Type<"int32">;

  /**
   * (Optional) Describes where/how this key is used (e.g., 'home page
   * banner').
   *
   * References 'context' column in Prisma. Used in translation QA, admin
   * search, etc.
   */
  context?: string;
};
export namespace ILocalizationString {
  /**
   * Request payload for paginated, filtered, and optionally sorted retrieval
   * of localization string records.
   *
   * Based on the i18n requirements and the Prisma model
   * 'localization_strings'. Filters by key/locale/version/context, as well as
   * pagination parameters.
   *
   * Typical use-cases include admin search/filter or translation workflows.
   */
  export type IRequest = {
    /**
     * Localization key for filtering.
     *
     * Corresponds to ILocalizationString.key in the Prisma schema, uniquely
     * identifying a translatable text segment. Optional for search/list
     * endpoints. Example: 'welcome_message'.
     */
    key?: string;

    /**
     * Locale code (such as 'ko-KR', 'en-US') for filtering.
     *
     * Based on Prisma ILocalizationString.locale, enables filtering strings
     * by user/region/language. Optional but highly recommended for i18n
     * retrieval logic.
     */
    locale?: string;

    /**
     * Context or usage for filtering.
     *
     * References the 'context' column in Prisma ILocalizationString, e.g.,
     * 'home_page_header'. Can be null, used for advanced filtering or
     * developer QA.
     */
    context?: string;

    /**
     * Specific version of the localization string to filter by. Defaults to
     * latest if not present.
     *
     * Reflects ILocalizationString.version from Prisma.
     */
    version?: number & tags.Type<"int32">;

    /**
     * Requested page for pagination.
     *
     * Optional. Standard pagination behavior.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Maximum number of records per page.
     *
     * Optional. Standard pagination rule.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Creation payload for a new localization string record.
   *
   * All required fields are enforced per DB schema. Used in admin/i18n
   * management workflows when adding new translation keys.
   */
  export type ICreate = {
    /**
     * Unique translation key for the new string.
     *
     * Required. See ILocalizationString.key (above).
     */
    key: string;

    /**
     * Locale code (e.g., 'ko-KR').
     *
     * Required. See ILocalizationString.locale (above).
     */
    locale: string;

    /**
     * Translated/localized value to set for this key/locale/version.
     *
     * Required. See ILocalizationString.value (above).
     */
    value: string;

    /**
     * Starting version for the translation record (typically 1).
     *
     * Required for versioning/rollback support.
     */
    version: number & tags.Type<"int32">;

    /**
     * Optional context/usage for the string.
     *
     * See ILocalizationString.context (above).
     */
    context?: string;
  };

  /**
   * Update payload for a localization string. Typically used for translation
   * corrections, i18n QA, or advanced workflow updates.
   *
   * Only allowed fields are 'value' and 'context' per compliance. Version
   * updates may be handled separately or via versioned inserts.
   */
  export type IUpdate = {
    /**
     * New text value for the translation. Optional; supply only if updating
     * translation text.
     */
    value?: string;

    /** Optional new context or usage descriptor. */
    context?: string;
  };
}

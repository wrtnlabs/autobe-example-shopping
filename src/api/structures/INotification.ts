import { tags } from "typia";

/**
 * 알림(notification, notifications 테이블) 엔터티 타입.
 *
 * - 단일 또는 대량 메시지 송수신에 대한 모든 속성 포함.
 * - 감사/대시보드 및 사용자 알림 이력 전체 관리, 법적 규제 이슈 발생시 근거 기록 역할.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotification = {
  /**
   * 알림 고유 ID (primary key, Prisma notifications.id).
   *
   * - 시스템 내 모든 알림는 이 UUID로 추적됨.
   */
  id: string & tags.Format<"uuid">;

  /** 수신/발신 사용자 ID (users 테이블 FK). */
  user_id: string & tags.Format<"uuid">;

  /**
   * 송수신 채널(마켓/스토어 단위, FK channels).
   *
   * - 분산시스템, multi-tenant에서 중요
   */
  channel_id: string & tags.Format<"uuid">;

  /** 메시지 템플릿(id) (notification_templates FK). */
  notification_template_id: string & tags.Format<"uuid">;

  /** 알림 송신 시각(ISO8601 UTC). */
  sent_at: string & tags.Format<"date-time">;

  /** 송신 상태(queued/delivered/failed 등). */
  status: string;

  /** 송수신 방식(email/push/inapp/sms 등). */
  delivery_type: string;

  /** 실제 발송된 알림 본문(HTML/text/json 등 완전 원본). */
  payload: string;

  /** 송신 실패시 사유(오류 응답 등). */
  failure_reason?: string | null;
};
export namespace INotification {
  /**
   * 알림 레코드 검색, 필터, 페이징 요청용 DTO.
   *
   * - 사용자별, 시간대별, 템플릿별 등 다양한 Auditing/분석 활용 목적.
   * - RBAC 기반 접근, 상세 페이징 조건 포함.
   */
  export type IRequest = {
    /** 수신/발신 사용자 ID. */
    user_id?: (string & tags.Format<"uuid">) | null;

    /** 알림 발송 채널 필터링. */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /** 템플릿 기준 필터. */
    notification_template_id?: (string & tags.Format<"uuid">) | null;

    /** 알림 방식(email/sms/push 등). */
    delivery_type?: string | null;

    /** 송수신 상태(queued/delivered/failed 등). */
    status?: string | null;

    /** 송신 일시 하한. */
    sent_at_from?: (string & tags.Format<"date-time">) | null;

    /** 송신 일시 상한. */
    sent_at_to?: (string & tags.Format<"date-time">) | null;

    /** 페이지 번호. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** 페이징 크기. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Request body for creating a notification event, mapped to the
   * `notifications` Prisma table. Implements the requirements for auditing,
   * multi-channel comprehension, and compliance traceability. All fields are
   * atomic, normalized, and described as per the Prisma schema and
   * requirements analysis.
   */
  export type ICreate = {
    /**
     * Unique identifier of the recipient user.
     *
     * References `users.id` from the Prisma schema. Required for
     * identifying who receives the notification.
     *
     * Field required for audit/logging and supports delivery tracking
     * across multiple notification channels.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the channel in which this notification is to be
     * delivered.
     *
     * References `channels.id` from the Prisma schema. Enforces
     * multi-tenancy and allows channel-specific logic such as localization,
     * branding, or policy enforcement. Required field.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * Identifier of the template this notification uses for rendering the
     * message.
     *
     * References `notification_templates.id` in the Prisma schema. This
     * field is essential for supporting i18n/localization, A/B testing, and
     * proper message formatting.
     */
    notification_template_id: string & tags.Format<"uuid">;

    /**
     * Timestamp indicating when the notification was delivered or attempted
     * (UTC, ISO 8601).
     *
     * Supports audit/compliance and time-series reporting. Enforced as
     * required for every notification.
     */
    sent_at: string & tags.Format<"date-time">;

    /**
     * Textual status for this delivery attempt. Expected values: delivered,
     * failed, pending, etc.
     *
     * Enables compliance and analytics for notification reliability and
     * delivery. Atomic field, never pre-aggregated.
     */
    status: string;

    /**
     * Delivery mechanism for the notification (e.g., email, push, SMS,
     * in-app).
     *
     * Atomic field, aligns with multi-channel support. Validated against
     * available delivery mechanisms per channel policies.
     */
    delivery_type: string;

    /**
     * Full rendered message content as delivered (body/text/HTML).
     *
     * Referenced from the Prisma schema. Maintains immutable record of what
     * the end-user received and supports legal traceability. May contain
     * placeholders replaced by template at sending time.
     */
    payload: string;

    /**
     * Nullable text. If delivery failed, captures the error or reason for
     * audit. Example: 'SMTP AUTH failed', 'Push expired'.
     *
     * Supports compliance and monitoring.
     */
    failure_reason?: string | null;
  };

  /**
   * Payload for updating (patching) a notification record, mapped to the
   * `notifications` Prisma schema. Permitted fields are strictly limited to
   * modifiable atomic values; immutable keys are excluded. Used for updating
   * delivery status, error reason, or annotated payload for compliance
   * workflows.
   */
  export type IUpdate = {
    /**
     * Updated status (delivered, failed, etc.).
     *
     * Modifies the notification's workflow progress. See notification
     * delivery and compliance requirements.
     */
    status?: string;

    /**
     * Updated date/time at which the delivery occurred (UTC, ISO 8601).
     *
     * Per audit requirements for notification traceability.
     */
    sent_at?: string & tags.Format<"date-time">;

    /**
     * Updated notification content.
     *
     * Use case: correction after delivery, rarely permitted except for
     * compliance. Usually only the audited rendered content can be
     * updated.
     */
    payload?: string;

    /**
     * Updated reason for delivery failure, if any.
     *
     * Enables auditability if issues are debugged or corrected.
     */
    failure_reason?: string | null;
  };
}

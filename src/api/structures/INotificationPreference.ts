import { tags } from "typia";

/**
 * Notification preference entity, mapping to `notification_preferences` DB
 * schema (NotificationLocalization). Atomic, never denormalized. Each record
 * encodes a single preference context (user, channel, type, delivery) with
 * opt-in/out state for audit, compliance, and UX control.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationPreference = {
  /**
   * Unique identifier for preference entry. Required for record management,
   * lookup, and auditing.
   *
   * References `notification_preferences.id` in Prisma schema.
   */
  id?: string & tags.Format<"uuid">;

  /**
   * User for whom this preference applies (references `users.id`). Enforced
   * by RBAC and privacy logic. Atomic FK, 3NF.
   */
  user_id?: string & tags.Format<"uuid">;

  /**
   * Target channel/storefront (referencing `channels.id`). Allows policy and
   * delivery partitioning. Part of unique tuple for per-user-channel
   * preference.
   */
  channel_id?: string & tags.Format<"uuid">;

  /**
   * Notification type code (e.g., 'order_update', 'promotion'). Matches
   * atomic code as per schema.
   */
  notification_type?: string;

  /**
   * Delivery type for the preference (e.g., 'email', 'sms', 'push').
   *
   * Atomic field as required for multi-modal notification logic.
   */
  delivery_type?: string;

  /**
   * Whether the user is opted in or out for this
   * notification/channel/type/delivery. Central to notification routing/user
   * experience. Atomic boolean.
   */
  enabled?: boolean;
};
export namespace INotificationPreference {
  /**
   * List/search/paginate request body type for notification preference list
   * operations. Implements filtering, advanced query, and batch pagination
   * per admin and analytics dashboard requirements. Atomic: no
   * denormalization or joined data.
   */
  export type IRequest = {
    /**
     * Restricts search to a specific user's notification preferences.
     *
     * References `users.id` for RBAC purposes; required for admin query,
     * not for self-service user search.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Limits search to a channel (brand/storefront). References
     * `channels.id` as per multi-tenancy and policy separation.
     */
    channel_id?: string & tags.Format<"uuid">;

    /**
     * Filters preferences by notification type (e.g., 'order_update',
     * 'promotion'), referencing the atomic code from the schema.
     */
    notification_type?: string;

    /**
     * Delivery mechanism/type for filter (e.g., 'email', 'push', 'sms').
     * Used for advanced/UX filtering, atomic field.
     */
    delivery_type?: string;

    /**
     * Whether this preference is enabled/active for the given channel/type
     * (true/false). Allows analytics and UX for visualizing opt-in/out.
     */
    enabled?: boolean;

    /**
     * Page number (for pagination support), enables scalable fetches.
     * Recommended default: 1.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Page size (results per page). System default (20/50/etc.). Allows
     * client to define batch result set size.
     */
    page_size?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Creation payload for a notification preference. Used in
   * notification_preferences management endpoints.
   *
   * Implements requirement for per-user, per-channel, per-type, and
   * per-delivery opt-in/out settings according to compliance and UX
   * standards.
   */
  export type ICreate = {
    /**
     * User for whom this preference applies (references `users.id`).
     * Enforced by RBAC and privacy logic. Atomic FK, 3NF.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Target channel/storefront (referencing `channels.id`). Allows policy
     * and delivery partitioning.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * Notification type code (e.g., 'order_update', 'promotion'). Must
     * match a code present in the system; validates against schema.
     */
    notification_type: string;

    /**
     * Delivery type (e.g., 'email', 'sms', 'push'). Must match one of the
     * available mechanisms as per channel's configurations.
     */
    delivery_type: string;

    /**
     * Whether the user is to receive notifications for this context
     * (true=opt-in; false=opt-out). Required field.
     */
    enabled: boolean;
  };

  /**
   * Update payload for notification preference entity, supports atomic
   * opt-in/out toggle, as required for UX/compliance flows. Other fields are
   * not updatable after creation. Used in PUT/PATCH endpoints for
   * notification_preferences.
   */
  export type IUpdate = {
    /**
     * Updated opt-in/out value for this notification preference entry
     * (true=receive, false=suppress).
     *
     * Atomic update for compliance or user-UX control.
     */
    enabled?: boolean;
  };
}

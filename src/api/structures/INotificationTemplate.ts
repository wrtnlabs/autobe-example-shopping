import { tags } from "typia";

/**
 * Notification template entity. Implements the `notification_templates` table
 * (NotificationLocalization schema) for i18n-ready, versioned, and
 * channel-customizable template management. Atomic, never denormalized;
 * supports advanced dashboard/UIs and compliance tracking. All fields strictly
 * map 1:1 to DB schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type INotificationTemplate = {
  /**
   * Unique identifier for notification template. Required by all
   * business/reporting/lookup use cases.
   *
   * References `notification_templates.id` in the Prisma schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Associated channel/storefront for this template. Implements multi-channel
   * support and i18n/interface logic.
   *
   * References `channels.id`.
   */
  channel_id: string & tags.Format<"uuid">;

  /**
   * Business event type this template serves (e.g., order_created, shipment,
   * etc.). Allows for precise message targeting and policy control.
   *
   * Referenced in the Prisma schema; enforced unique per
   * channel/locale/version.
   */
  type: string;

  /**
   * Language/locale code (e.g., en-US, ko-KR). Enables i18n/l10n. 3NF
   * compliant.
   *
   * Mapped to notification_templates.locale.
   */
  locale: string;

  /**
   * Human-friendly UI display name. For search/filter in admin and dashboard
   * UIs.
   *
   * 3NF atomic string, for display/search use.
   */
  title: string;

  /**
   * Raw, unrendered template content. May include template variables/markup
   * (e.g., {{user_name}}). Supports i18n, preview, and dynamic message
   * generation.
   *
   * Direct from Prisma schema.
   */
  content: string;

  /**
   * Version integer for template versioning/rollback. Required for compliance
   * and A/B testing.
   *
   * Matches notification_templates.version.
   */
  version: number & tags.Type<"int32">;

  /**
   * Boolean flag: is this template available for new notifications. Allows
   * for A/B testing, phased rollout, admin UIs/feature flags.
   *
   * Atomic boolean from schema.
   */
  is_active: boolean;
};
export namespace INotificationTemplate {
  /**
   * List/search/filter/pagination request type for fetching
   * notification_template records. Enables advanced dashboard/search UI
   * filtering, power-user or analytic scenarios for notification templates.
   * Implements atomic filtering directly from schema attributes.
   */
  export type IRequest = {
    /**
     * If set, filters templates by specific channel (storefront/brand).
     *
     * References `channels.id` from the Prisma schema. Required for
     * permissioned/admin listing, supports multi-tenancy.
     */
    channel_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter for notification template business type, such as:
     * order_created, shipment, password_reset, etc.
     *
     * Atomic field matching the Prisma schema's 'type' attribute.
     */
    type?: string;

    /**
     * Language/locale code (e.g., en-US, ko-KR) for filtering localized
     * templates.
     *
     * Supported for multi-i18n and notification experience consistency.
     */
    locale?: string;

    /**
     * Generic search or fuzzy-match filter by template title (for admin
     * UI/analytics/dashboard).
     *
     * Enables full-text or substring search by admin roles. String field,
     * mapped directly from schema.
     */
    title?: string;

    /**
     * If set, restricts to templates that are currently enabled for
     * delivery/assignment.
     *
     * Atomic boolean from schema.
     */
    is_active?: boolean;

    /**
     * Optional sort order fieldâ€”sorts by specified attribute (e.g.,
     * created_at, title, type, locale). String value, validated to one of
     * schema enum options for dashboard UI.
     */
    sort?: "created_at" | "title" | "type" | "locale";

    /**
     * Sort direction: ascending or descending, paired with 'sort' field.
     * Defaults to 'desc'.
     */
    order?: "asc" | "desc";

    /**
     * Page number for pagination (default 1).
     *
     * Enables scalable result sets for template UIs.
     */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Optional results per page (default system value, e.g., 20/50).
     *
     * Controls pagination for template/admin/search UI.
     */
    page_size?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Creation request for a notification template. Payload for POST
   * /notificationTemplates. Atomic, strict mapping to DB fields.
   */
  export type ICreate = {
    /**
     * Channel/storefront for this template (references `channels.id`).
     * Required for multi-channel multi-brand logic, and i18n partitioning.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * Business type for this template, e.g.: order_created, password_reset,
     * etc. Unique within [channel_id, locale, version]. Enforced via DB
     * unique constraint.
     */
    type: string;

    /**
     * Text code for language/locale supported by this template (e.g.,
     * 'en-US', 'ko-KR'). Used for i18n/l10n.
     */
    locale: string;

    /** Display name for admin UX, search, reporting, and selection. */
    title: string;

    /**
     * Text/markup/content for the notification, with placeholders for
     * variable data (e.g., {{user_name}}). Not evaluated at this layer,
     * only as string.
     */
    content: string;

    /**
     * Template version integer (increments on revision/rollback). Required
     * for auditability and template lifecycle control.
     */
    version: number & tags.Type<"int32">;

    /**
     * Activation flag for this template. True: available for
     * assignment/send; False: hidden, supports A/B test and phased rollout
     * workflows.
     */
    is_active: boolean;
  };

  /**
   * Update request for a notification template (PUT
   * /notificationTemplates/{id}). Allows partial update for title, content,
   * locale (unless breaking unique constraint), or status.
   */
  export type IUpdate = {
    /**
     * New display name for the template (admin, i18n, analytics, or
     * reporting use).
     *
     * Atomic string, supplied for UX/discoverability.
     */
    title?: string;

    /**
     * New template markup/content body (with variable placeholders
     * allowed).
     *
     * Atomic string, maintained in i18n string system. No business logic.
     */
    content?: string;

    /**
     * Language/locale field (e.g., update to 'en-US', 'ko-KR'). Only
     * allowed when not breaking unique constraint on [type, channel_id,
     * version].
     */
    locale?: string;

    /**
     * Boolean flag for template activation/deactivation. Modifies
     * rollout/visibility without removing/superseding template.
     */
    is_active?: boolean;
  };
}

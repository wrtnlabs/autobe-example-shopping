import { tags } from "typia";

import { IOrderItem } from "./IOrderItem";

/**
 * 쇼핑몰 주문 레코드(헤더+참조) 모델입니다.
 *
 * 주문번호, 주문상태, 채널, 회원, 카트, 일자, 삭제이력 등 원본성, 결제/배송 등 주요 비즈니스 감사 로깅에 적합하게 모든 필드와
 * 시나리오를 커버합니다. 주문 품목 리스트는 order_items 필드로 배열 또는 별도 엔드포인트에서 조회함을 권장합니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOrder = {
  /** 주문 고유 식별자 (PK). uuid */
  id: string & tags.Format<"uuid">;

  /** 주문한 회원(고객) id (users.id 참조) */
  user_id: string & tags.Format<"uuid">;

  /** 해당 주문이 발생한 채널(스토어프론트) id */
  channel_id: string & tags.Format<"uuid">;

  /** 해당 주문의 원본 카트 id (혹은 null), 회원/게스트 모두 적용 */
  cart_id?: (string & tags.Format<"uuid">) | null;

  /** 주문번호. 채널 내 유니크 */
  order_number: string;

  /** 주문 상태. ex) Placed, Paid, Delivered 등. */
  status: string;

  /** 주문 완료(체크아웃) 시각 */
  placed_at: string & tags.Format<"date-time">;

  /** 전체 주문 취소 시각(전표 취소용), null이면 미취소 */
  cancelled_at?: (string & tags.Format<"date-time">) | null;

  /** 전체 주문 완료/배송완료 시각(고객 인도/통계 목적) */
  completed_at?: (string & tags.Format<"date-time">) | null;

  /** 주문 레코드 생성 시각 */
  created_at: string & tags.Format<"date-time">;

  /** 주문 레코드 최종 갱신 시각 */
  updated_at: string & tags.Format<"date-time">;

  /** 소프트 삭제(감사/감사로그 목적) 시각 */
  deleted_at?: (string & tags.Format<"date-time">) | null;

  /** 주문별 주문상품 리스트. IOrderItem 등으로 개별 확장 필요(여기선 요약레벨 또는 $ref 처리) */
  order_items?: {}[];
};
export namespace IOrder {
  /**
   * 주문 데이터 목록을 검색/페이징할 때 사용하는 조건/정렬/필터 요청용 입력 스키마입니다.
   *
   * 페이지네이션(page/limit), 상태·채널·고객·주문번호·날짜 범위 등 다양한 조건 검색이 가능하며, 관리자·셀러·고객 등 모든
   * 롤의 주문 목록 UI, 통계에 사용됩니다.
   */
  export type IRequest = {
    /** 조회할 페이지 번호 (1base). 미입력시 1페이지 */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** 페이지당 레코드 수. 생략 시 시스템 기본(100) 적용 */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** 주문 상태(Placed/Paid/Delivered 등). 여러 상태를 콤마로 구분해서 다중검색 지원 가능 */
    status?: string | null;

    /** 조회 대상 채널(스토어프론트) 식별자. 관리자/sys 계정이 전체 주문 검색 시 이용 */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /** 주문 소유자(고객) ID */
    user_id?: (string & tags.Format<"uuid">) | null;

    /** 주문번호. 부분일치 쿼리 지원 */
    order_number?: string | null;

    /** 주문생성 필터 (시작) */
    date_from?: (string & tags.Format<"date-time">) | null;

    /** 주문생성 필터 (끝) */
    date_to?: (string & tags.Format<"date-time">) | null;

    /** 정렬 필드(기본: placed_at desc, 옵션: status, order_number 등) */
    sort?: string | null;
  };

  /**
   * Creation payload for an order. This type contains only normalized, atomic
   * fields required to initiate a new order in the system. Maps directly to
   * the database model and references related entities by FK where
   * appropriate.
   *
   * Implements the requirements for supporting legal/business workflow, full
   * auditability, and compliance as specified in Cart & Order requirements.
   */
  export type ICreate = {
    /**
     * ID of the user placing the order. References the users.id column.
     *
     * This property ties the order record to its owner for permission,
     * fulfillment, and analytics purposes, following the normalization and
     * PK/FK conventions set by the database schema.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * ID of the channel/storefront the order is being placed on. References
     * the channels.id column.
     *
     * This field supports multi-channel separation for operational and
     * analytic needs, fully normalized to avoid duplication.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * ID of the originating cart, if the order was placed as a result of
     * converting a cart. References the carts.id column.
     *
     * This supports the cart→order transition logic and tracks abandoned
     * carts and migration, in compliance with the requirements.
     */
    cart_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Canonical order number (unique per channel). Used for customer
     * reference and order tracking.
     *
     * Fulfills the requirement for legal compliance, order visibility, and
     * unique identification in every workflow. Normalized, not calculated.
     */
    order_number: string;

    /**
     * Array of all order items being purchased (products/variants,
     * quantity, note per item, etc).
     *
     * This field supports the normalization of purchase detail away from
     * order summary, logging the specifics for fulfillment and audit.
     */
    items: IOrderItem.ICreate[];

    /**
     * Order status at creation (e.g., Placed, Awaiting Payment).
     *
     * Fulfills decoupled, normalized order workflow tracking.
     */
    status: string;

    /**
     * Timestamp of order placement.
     *
     * Normalizes order lifecycle event; supports compliance and
     * traceability.
     */
    placed_at: string & tags.Format<"date-time">;

    /**
     * Optional business/admin memo for special handling or instructions.
     *
     * This field does not affect fundamental normalization or traceability.
     */
    note?: string | null;
  };

  /**
   * Update payload for existing order entity. Allows full or partial
   * replacement of updatable, normalized atomic fields. Ensures only
   * business-compliant order data is mutated, and logs proper audit entries
   * for all transitions. Downstream effect: triggers snapshot/audit update,
   * may fire workflow hooks.
   */
  export type IUpdate = {
    /**
     * Updated status for the order (e.g., Paid, Shipped, Cancelled,
     * Completed). If transitioning between legal workflow statuses, check
     * for compliance and log transition in order_status_histories.
     */
    status?: string;

    /**
     * Update for order-level memo. For business fulfillment tracking and
     * admin notes.
     */
    note?: string | null;

    /**
     * Timestamp if order is to be marked as completed in this update.
     *
     * Used for workflow transitions and downstream effects such as
     * fulfillment or analytics.
     */
    completed_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Timestamp if the order is being cancelled as part of this update.
     *
     * Reflects legal requirement for cancellation logging.
     */
    cancelled_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Array of updated order items (product/variant, quantity, notes).
     * Normalized so that the full array of items may be replaced or
     * modified per audit trail rules.
     */
    items?: IOrderItem.IUpdate[] | null;
  };
}

import { tags } from "typia";

/**
 * Comprehensive audit log record for any action/system/user event.
 *
 * Aligns with audit_logs Prisma table: Strict column mapping, full traceability
 * and compliance.
 *
 * Includes actor/target, event type, reason/context, timestamps for complete
 * forensics and legal export.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOrderAuditLog = {
  /**
   * Audit log record unique identifier (primary key).
   *
   * Refers to the single audit log entry in the audit_logs table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the user who is the target of this event.
   *
   * Links audit actions to the affected user; always provided, cannot be
   * null.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Type of the audited event (e.g., 'login', 'order_change',
   * 'consent_withdraw').
   *
   * Codifies action for compliance/trace/meta queries. Sourced from the
   * event_type column in the Prisma schema.
   */
  event_type: string;

  /**
   * Short, human-readable explanation for the event. May be null.
   *
   * Admin audit UI, compliance note, or freeform context.
   */
  event_reason?: string;

  /**
   * Serialized metadata providing additional context (often JSON; may be
   * null).
   *
   * Records extra details for compliance or debugging/audit tools.
   */
  event_context?: string;

  /**
   * UUID of the admin/system/user who performed the event. Nullable for
   * system events.
   *
   * Null if system (automated, background process).
   */
  actor_id?: string & tags.Format<"uuid">;

  /** When log entry was created. Audit trail—never null. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IOrderAuditLog {
  /**
   * Request body type for paginated, filterable audit log searches.
   *
   * All filters are optional and can be combined for advanced analytics or
   * compliance queries. Pagination is supported via `page` and `limit`
   * fields. This structure is tuned for high-throughput audit log search UIs
   * and compliance dashboards.
   *
   * Field names and types align with the columns from the audit_logs Prisma
   * table.
   */
  export type IRequest = {
    /** Optional filter: Restrict logs to this user (by UUID). */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter: Only include audit logs matching this event type
     * (e.g., 'login', 'order_change').
     */
    event_type?: string;

    /**
     * Optional filter: Only show logs initiated by this actor (e.g.,
     * admin/escalated system).
     */
    actor_id?: string & tags.Format<"uuid">;

    /** Include only audit logs created at or after this datetime. */
    created_after?: string & tags.Format<"date-time">;

    /** Include only audit logs created before this datetime. */
    created_before?: string & tags.Format<"date-time">;

    /** Pagination: Current page number (1-based, optional, default=1). */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Pagination: Number of records per page (optional, default=100). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.Maximum<1000> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Request body for creating a new audit log entry.
   *
   * Satisfies compliance by logging all key details of user/system/admin
   * action.
   */
  export type ICreate = {
    /**
     * User ID (UUID) the event is associated with.
     *
     * Required for proper audit reference.
     */
    user_id: string & tags.Format<"uuid">;

    /** Type of event to record in audit log (e.g., 'login', 'order_edit'). */
    event_type: string;

    /**
     * Optional comment/reason/description for the event in human-readable
     * form.
     */
    event_reason?: string;

    /**
     * Optional context detail (usually JSON, e.g., parameters, metadata,
     * change snapshot, etc.).
     */
    event_context?: string;

    /**
     * UUID of the actor who performed this event (admin/system/user).
     * Nullable for auto/system events.
     */
    actor_id?: string & tags.Format<"uuid">;
  };

  /**
   * Only fields allowed to be updated after creation: explanation/annotation
   * metadata.
   *
   * Permits compliance-driven corrections/annotations (never mutates main
   * audit data).
   */
  export type IUpdate = {
    /**
     * Optional new audit reason, e.g. after review/annotation—cannot alter
     * the original event.
     *
     * Allows for compliance-based annotation or context correction.
     */
    event_reason?: string;

    /** Optional updated context JSON (addendum/correction). */
    event_context?: string;
  };
}

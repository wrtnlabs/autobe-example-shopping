import { tags } from "typia";

/**
 * Normalized record of a line item in an order (individual SKUs/variants,
 * quantity, reference to order and variant). Matches the atomic database row.
 * All order items are immutable audit records after order is completed, not
 * destroyed but soft-deleted if removed.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOrderItem = {
  /**
   * Primary key: unique identifier of the order item, from the order_items.id
   * column.
   */
  id: string & tags.Format<"uuid">;

  /** Foreign key referencing the parent order (order_items.order_id). */
  order_id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the product variant purchased
   * (order_items.product_variant_id).
   */
  product_variant_id: string & tags.Format<"uuid">;

  /** Number of units purchased for this variant in the order. */
  quantity: number &
    tags.Type<"int32"> &
    tags.JsonSchemaPlugin<{
      format: "int32";
    }>;

  /** Optional memo per item â€“ e.g. gift message or special handling. */
  note?: string | null;

  /** Timestamp of item creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last modification. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion (data not removed for compliance purposes). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IOrderItem {
  /**
   * Filter/search/pagination structure for listing order items. Fields
   * represent all typical search or filter requirements according to the
   * order_items schema and analytics/business needs.
   */
  export type IRequest = {
    /**
     * Filter item listing by associated order. Implements the need to fetch
     * items by order context according to the normalized order_items
     * schema.
     */
    order_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter for cart/order items by specific product_variant. Enables
     * lookup of all orders containing a particular SKU variant.
     */
    product_variant_id?: (string & tags.Format<"uuid">) | null;

    /** Filter: Return items with creation datetime at or after this value. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Filter: Return items with creation datetime at or before this value. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** Page number for pagination; starts from 1. */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /**
     * Number of items to return per page. Used in scalable APIs for UI
     * display or analytics.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;
  };

  /**
   * Payload to add a single item to an order in the creation step. Restricts
   * to product variant, quantity, and memo/notes. Follows normalized data
   * principles, with all relation handled at the top level (orders -> items
   * array).
   */
  export type ICreate = {
    /**
     * ID of the product variant this item is for. Fulfills the need for
     * SKU-level detail control as described in
     * order_items.product_variant_id.
     */
    product_variant_id: string & tags.Format<"uuid">;

    /** The ordered quantity for this variant. */
    quantity: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Optional memo on this item (special instructions, e.g., gift
     * message).
     */
    note?: string | null;
  };

  /**
   * Payload type for mutation/update of an order item during order update
   * flows. Only quantity and note are mutable; references remain the same for
   * auditability.
   */
  export type IUpdate = {
    /**
     * ID of the order item to update. Used for replacement or update
     * semantics on an existing order item during order update workflows.
     */
    id: string & tags.Format<"uuid">;

    /**
     * New quantity for this order item. If omitted, quantity is not
     * changed. SET NULLable for partial update scenarios.
     */
    quantity?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /** Update for item-level memo/instructions. */
    note?: string | null;
  };
}

import { tags } from "typia";

/**
 * Represents a history/audit record for a single status transition on an order.
 *
 * Each row is atomic, references all responsible parties, preserves immutable
 * audit trail for regulatory/rollback evidence.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IOrderStatusHistory = {
  /** Primary key for the order status change record. */
  id: string & tags.Format<"uuid">;

  /** Order ID to which this status change record applies. */
  order_id: string & tags.Format<"uuid">;

  /**
   * ID of the user/admin who performed the action. Used for audit trail and
   * legal compliance.
   */
  actor_id: string & tags.Format<"uuid">;

  /** Previous status of the order before the transition. */
  from_status: string;

  /** New status value after the transition. */
  to_status: string;

  /**
   * Optional comment regarding the reason for the status change (e.g.,
   * 'Auto-cancelled due to payment timeout').
   */
  comment?: string | null;

  /** Timestamp for when this status transition occurred. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IOrderStatusHistory {
  /**
   * Filter/search/pagination request data for browsing order status
   * histories. Fields map directly to the normalized status history table and
   * support advanced audit, compliance, and dashboard workflows.
   */
  export type IRequest = {
    /**
     * Filter status history by order. Fetch status transitions for a
     * specific order.
     */
    order_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Filter by the user/admin who triggered the change. Used in audit
     * trails and compliance workflows.
     */
    actor_id?: (string & tags.Format<"uuid">) | null;

    /** Filter for transitions from a specific status. */
    from_status?: string | null;

    /** Filter for transitions to a specific status. */
    to_status?: string | null;

    /** Lower bound for created_at (event occurred after this time). */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Upper bound for created_at (event occurred before this time). */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** Pagination: page number (starts at 1). */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /** Pagination: number of results per page. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;
  };

  /**
   * Payload type used to log a new order status history transition. Every
   * field is atomic and normalized per schema documentation. Required for
   * compliance, legal, and audit mandates.
   */
  export type ICreate = {
    /** Order to which this transition event applies. */
    order_id: string & tags.Format<"uuid">;

    /** ID of user/admin performing this action. */
    actor_id: string & tags.Format<"uuid">;

    /** Status before the change occurred. */
    from_status: string;

    /** Status after the change. */
    to_status: string;

    /**
     * Memo or detail explaining why this transition occurred for
     * audit/analytics.
     */
    comment?: string | null;

    /** Timestamp for this transition. Required for strict audit chains. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Payload for updating order status history record. Typically only the
   * comment field is mutable for correction or annotation. All changes must
   * be strictly audit-logged for compliance.
   */
  export type IUpdate = {
    /**
     * Optional additional explanation for the status transition, or reason
     * for post-facto correction.
     */
    comment?: string | null;
  };
}

import { tags } from "typia";

/**
 * Product attribute record—represents a resolved option-value for a specific
 * SKU (variant) within a product. Implements normalization and
 * extensibility—used for variant analytics, attribute filtering, and SKU
 * search. All assignments are strictly enforced at variant creation/edit time
 * in product onboarding/admin workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductAttribute = {
  /**
   * Primary key for the product attribute row. Generated by system and
   * uniquely identifies the variant-option-value mapping.
   */
  id: string & tags.Format<"uuid">;

  /**
   * References the product variant (SKU) that realizes this option value.
   * Enforces SKU-attribute normalization for analytics and search.
   */
  variant_id: string & tags.Format<"uuid">;

  /**
   * References the option assigned to this variant (product_options.id).
   * Enforces atomic variant-option reference.
   */
  option_id: string & tags.Format<"uuid">;

  /**
   * The specific value resolved for the option on this variant (e.g., 'Red',
   * 'L'). Strict per 3NF.
   *
   * Value is i18n and facetable for advanced search and analytics.
   */
  value: string;
};
export namespace IProductAttribute {
  /**
   * Request body schema for listing, searching, or batch querying product
   * attribute assignments to variants. Used for analytics/reporting or admin
   * SKU management, follows product_attributes table's schema.
   */
  export type IRequest = {
    /**
     * Filter attributes by a specific product variant
     * (product_variants.id).
     *
     * Restricts query to attributes belonging to a particular SKU.
     */
    variant_id?: string & tags.Format<"uuid">;

    /**
     * Filter by option_id (product_options.id), for bulk queries on a
     * single option context.
     */
    option_id?: string & tags.Format<"uuid">;

    /**
     * Filter attributes by value (e.g., all variants having 'Red' as the
     * color).
     *
     * Supports substring or exact match as per i18n rules.
     */
    value?: string;

    /** Pagination: results page number to fetch. Defaults to 1 if omitted. */
    page?: number & tags.Type<"int32">;

    /**
     * Pagination: number of results per page in the response. Default:
     * system or UI configuration.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Request schema for creating a new product attribute for a variant and
   * option association. All fields are atomic, enforcing strict
   * variant-option-value mappings as in the product_attributes table.
   * Validation ensures referential integrity and value constraints per
   * product catalog rules.
   */
  export type ICreate = {
    /**
     * The unique identifier for the variant to which this attribute is
     * assigned. FK to product_variants.id; required.
     */
    variant_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier for the option this attribute applies to. FK to
     * product_options.id. Required at creation.
     */
    option_id: string & tags.Format<"uuid">;

    /**
     * The atomic value for the attribute, respecting i18n and catalog
     * discovery rules. Presents the realized aspect for the variant (e.g.,
     * 'Blue', 'XL').
     */
    value: string;
  };

  /**
   * Represents an update to a single product attribute record.
   *
   * Used to change the value selection of a variant's option realization.
   * Refers to the atomic attribute-value in the product_attributes Prisma
   * table. All updates are tracked/audited for product variant configuration
   * management.
   */
  export type IUpdate = {
    /**
     * The updated value for the product attribute. Corresponds to the
     * atomic attribute value of a variant option, such as 'Red' or 'L'.
     *
     * Fulfills flexibility for SKU configuration. Must comply with
     * normalization rules and value constraints.
     */
    value: string;
  };
}

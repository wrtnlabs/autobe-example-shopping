import { tags } from "typia";

/**
 * Product bulletin post entity.
 *
 * Represents an announcement, FAQ, or notice tied to a specific product.
 * Atomic, never includes denormalized user/product data except through FK.
 * Fulfills engagement board, announcement, and moderator flows. All attributes
 * comply with the product_bulletins table schema (see ERD).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductBulletin = {
  /** Primary key (product_bulletins.id, see ERD EngagementBoards). */
  id: string & tags.Format<"uuid">;

  /** Foreign key reference to products.id (bulletin is about this product). */
  product_id: string & tags.Format<"uuid">;

  /** User who posted the bulletin (users.id in Users domain). */
  author_id: string & tags.Format<"uuid">;

  /** Bulletin title/headline, markdown allowed per config. */
  title: string;

  /** Bulletin content, markdown accepted. */
  body: string;

  /** Creation timestamp for sorting/audit. */
  created_at: string & tags.Format<"date-time">;

  /** Soft deleted timestamp; indicates archived/removed/rollback status. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IProductBulletin {
  /**
   * Request structure for searching/listing product bulletin posts with
   * paging/filter options.
   */
  export type IRequest = {
    /**
     * Filter: Only bulletins for this product will be included if set.
     * References products.id.
     */
    product_id?: string & tags.Format<"uuid">;

    /** Filter: Only bulletins by this author. */
    author_id?: string & tags.Format<"uuid">;

    /** Start datetime for created_at filtering */
    date_from?: string & tags.Format<"date-time">;

    /** End datetime for created_at filtering */
    date_to?: string & tags.Format<"date-time">;

    /** Page number for pagination */
    page?: number &
      tags.Type<"int32"> &
      tags.Default<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Number of entries per page (max 200) */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<20> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Sort by created_at or title */
    sort_by?: "created_at" | "title";

    /** Sort direction */
    sort_order?: "asc" | "desc";

    /**
     * If true, include soft-deleted bulletins in results. For
     * admins/moderators only.
     */
    show_deleted?: boolean;
  };

  /**
   * Request body for creating product bulletin/announcement posts.
   *
   * Mapped to EngagementBoards.product_bulletins for admins/sellers. All
   * fields are atomic (no nesting/user data directly).
   */
  export type ICreate = {
    /** ID of the product the bulletin is about (products.id). */
    product_id: string & tags.Format<"uuid">;

    /** Title/headline for the bulletin post. */
    title: string;

    /** Content in markdown/plaintext as required. */
    body: string;
  };

  /**
   * Payload structure for updating a product bulletin post
   * (announcement/FAQ/news board entry) for a specific product. Matches
   * update semantics of product_bulletins entity as required by audit and
   * workflow. Enforces normalization at all levels, with strict field-level
   * documentation. Intended to be used by admins or original authors for
   * editing product announcements, updates, or pinned FAQ articles. Only
   * editable fields per business workflow are included here.
   */
  export type IUpdate = {
    /**
     * Updates the bulletin post title.
     *
     * Corresponds to 'title' in the product_bulletins table. Typically used
     * when an admin or author modifies the announcement headline for
     * clarity or correction. String, required; fully normalized as per DB
     * schema. Example: 'Holiday Delivery Notice'.
     */
    title: string;

    /**
     * The primary body/content of the bulletin in markdown or plain text.
     *
     * Represents the 'body' column in product_bulletins. Used for the main
     * content of the announcement; can be multiline, supports rich
     * formatting in markdown where allowed by the platform. Always required
     * and follows field normalization.
     */
    body: string;
  };

  /**
   * Confirms outcome of a soft-delete (archived) operation for a product
   * bulletin post. Used in product_bulletins management flows. Includes PK,
   * deletion timestamp, and status flag. Maps to soft delete schema logic for
   * compliance and legal workflow.
   */
  export type ISoftDeleteResult = {
    /**
     * Unique identifier for the product bulletin post, sets the context for
     * deletion confirmation.
     *
     * This is the primary key referencing product_bulletins.id in the DB
     * schema.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Timestamp (ISO8601, UTC) when the bulletin was soft-deleted
     * (archived/hid for compliance).
     *
     * Mirrors the 'deleted_at' column in product_bulletins. Used for legal
     * audit and UI reporting. Null if not deleted, otherwise set at time of
     * deletion.
     */
    deleted_at: string & tags.Format<"date-time">;

    /**
     * Flag indicating whether the soft-delete operation succeeded.
     *
     * Used as a UI/API shortcut for confirming soft-deletion in
     * management/dashboard UX.
     */
    success: boolean;
  };
}

import { tags } from "typia";

/**
 * Represents a sellable or promotional grouping of product variants as a
 * bundled entity. Implements the requirement for flexible, composable bundles
 * in the AI Shopping Mall backend, as described in the Product Domain (F1). All
 * data is strictly normalized: variant composition, parent product, and audit
 * timestamps are atomic fields.
 *
 * Key behaviors include immutable creation (no cascade on delete, only soft
 * delete flag). Used to model "Gift Sets", multipacks, and combination offers.
 * All updates are auditable; deletion only ever logical, never physical,
 * meeting legal and compliance requirements.
 *
 * Referenced directly in advanced catalog, analytics, and order workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductBundle = {
  /**
   * The unique identifier for the product bundle. Referenced by the
   * 'product_bundles' Prisma schema as the PK.
   *
   * Immutable system-generated field; required for update and retrieval
   * flows.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier for the product that owns this bundle. Foreign key
   * relation to 'products.id', complying with 3NF.
   *
   * Mandatory on creation, cannot be modified after creation. Ensures
   * bundle-product linkage is immutable for audit/compliance.
   */
  product_id: string & tags.Format<"uuid">;

  /**
   * The unique identifier for the product variant included in this bundle.
   * Foreign key to 'product_variants.id'.
   *
   * Required at creation. Maintains normalized data for bundle composition.
   */
  variant_id: string & tags.Format<"uuid">;

  /**
   * Number of units of the variant in this bundle as stored in the
   * 'product_bundles' schema.
   *
   * Required and must be greater than 0; cannot be negative. Reflects
   * business rules for bundled sales.
   */
  quantity: number & tags.Type<"int32">;

  /**
   * Timestamp when this product bundle was created. Atomic, immutable, and
   * required field as per audit/compliance requirements in the product
   * domain.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this product bundle was last updated. Atomic and required
   * for audit trail. Tracked per modification in product administration
   * workflows.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete marker (nullable) for compliance/audit. Indicates this bundle
   * has been logically deleted but not physically removed from the DB.
   *
   * Must be present for rollback and audit trails.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IProductBundle {
  /**
   * Request for listing/querying product bundles. Used by
   * batch/analytics/merchandising UIs. Supports standard pagination and
   * bundle-level filtering. See bundle ERD/prisma for official mapping.
   */
  export type IRequest = {
    /** Optional filter: parent product UUID. Used for searching bundles. */
    product_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter: component variant UUID. Used in inventory or
     * merchandising APIs.
     */
    variant_id?: string & tags.Format<"uuid">;

    /** Filter for bundles created after this timestamp. */
    created_from?: string & tags.Format<"date-time">;

    /** Filter for bundles created before this timestamp. */
    created_to?: string & tags.Format<"date-time">;

    /** Page number for pagination (default 1). */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Page size/limit for pagination (default 20/100). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Request body schema for creating a new product bundle as required by the
   * Product Domain F1/F3 requirements. All fields are atomic; only foreign
   * key references and normalized quantity field are allowed.
   *
   * This schema enforces strict validation, including reference existence and
   * quantity is greater than zero. Mutations generate audit entries and
   * initial timestamps.
   */
  export type ICreate = {
    /**
     * The owner product's ID. Foreign key to 'products.id'; required on new
     * bundle creation.
     *
     * Inset per onboarding in the product_bundles table as required by the
     * Product Domain documentation.
     */
    product_id: string & tags.Format<"uuid">;

    /**
     * The ID of the product variant to include in this bundle. Foreign key
     * to 'product_variants.id'.
     *
     * Ensures 3NF compliance and enables bundle-variant relationship.
     */
    variant_id: string & tags.Format<"uuid">;

    /**
     * Number of units of the variant in this bundle, as an atomic integer
     * per the 'product_bundles' schema.
     *
     * Must be a positive integer.
     */
    quantity: number & tags.Type<"int32">;
  };

  /**
   * Object structure for updating a product bundle entity. Allows mutable
   * updates for quantity (and optionally variant, if policy allows).
   * Product_id and bundle ID are immutable.
   *
   * All operations are strictly audit-logged, and mutable only under business
   * rule constraints, according to the Product Domain requirements.
   */
  export type IUpdate = {
    /**
     * Optional update for the included product variant. Changing the
     * variant_id will enforce referential integrity with the
     * product_variants table. Most commonly, this is fixed after creation
     * for compliance, but allowed per business rule in some workflows.
     */
    variant_id?: string & tags.Format<"uuid">;

    /**
     * Optional update for the quantity of the variant in the bundle. Must
     * remain a positive value. Reflects adjustments in merchandising or
     * operational flows.
     */
    quantity?: number & tags.Type<"int32">;
  };
}

import { tags } from "typia";

/**
 * Represents a single, atomic assignment of a product to a category within the
 * AI Shopping Mall Backend. This supports multi-category and multi-channel
 * product catalogs and satisfies advanced merchandising, search, and compliance
 * requirements. This type aligns with the 'product_category_assignments' table
 * in the Prisma schema, holding references to both product and category, and
 * the assignment audit timestamp for regulatory traceability and analytics. It
 * is core to scalable e-commerce catalog design, ensures strict 3NF (atomic
 * references only), and never denormalizes product/category properties.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductCategoryAssignments = {
  /**
   * Unique identifier for the product-category assignment record. This ID is
   * the primary key for the assignment and is used to track the relationship
   * between a product and a category. Referenced from the Prisma
   * 'product_category_assignments' table.
   *
   * It ensures each assignment is atomic and auditable, supporting advanced
   * catalog management and regulatory compliance.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier for the assigned product. Matches a row in the
   * 'products' table. This property links a product to a category through
   * this assignment, allowing products to appear in multiple categories.
   * Maintains 3NF normalization and supports flexible catalog structures as
   * described in AI Shopping Mall's requirements.
   */
  product_id: string & tags.Format<"uuid">;

  /**
   * The unique identifier for the linked category. Refers to a row in the
   * 'categories' table. Multiple assignments with different category_ids
   * enable multi-category product display and merchandising per channel.
   */
  category_id: string & tags.Format<"uuid">;

  /**
   * Timestamp for when this product-category assignment was created. Ensures
   * full auditability and supports full historical tracking as required by
   * compliance. Tracks the moment of assignment for analytics and rollback
   * purposes.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IProductCategoryAssignments {
  /**
   * IProductCategoryAssignments.IRequest is the request body schema for
   * querying, searching, or paginating product-category assignments (M:N
   * joins between products and categories). Each property is an atomic search
   * or filter field, supporting batch retrieval and auditing for
   * merchandising, compliance, or bulk analytics needs.
   */
  export type IRequest = {
    /** Filter for assignments related to a specific product. */
    product_id?: string & tags.Format<"uuid">;

    /** Filter for assignments relating to a specific category. */
    category_id?: string & tags.Format<"uuid">;

    /** Start filter for assignment creation timestamp range. */
    created_after?: string & tags.Format<"date-time">;

    /** End filter for assignment creation timestamp. */
    created_before?: string & tags.Format<"date-time">;

    /** Requested results page, for pagination. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Number of results per page. */
    page_size?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Request body schema for creating a new product-category assignment. Used
   * in POST operations to add a product (by id) to a category (by id),
   * supporting dynamic and scalable product-to-category relationships as
   * described in commerce requirements. Ensures business rules, uniqueness,
   * and atomicity per the Prisma schema. Full auditability is enforced at
   * creation.
   */
  export type ICreate = {
    /**
     * The UUID of the product to assign. Must refer to an active product in
     * the catalog. Ensures atomic linkage to the 'products' table,
     * maintaining 3NF and supporting category-enabled merchandising
     * workflows.
     */
    product_id: string & tags.Format<"uuid">;

    /**
     * The UUID of the target category. Must refer to an active and valid
     * category in the system. Aligns with 'categories' table, enabling
     * flexible channel/category-optimized organization.
     */
    category_id: string & tags.Format<"uuid">;
  };

  /**
   * Schema for updating a product-category assignment entity. This request
   * body is used in PUT operations to support movement or correction of
   * product-to-category relationships, while preserving full audit trails and
   * referential integrity. All changes are constrained by business/validation
   * logic and must not create duplicates.
   */
  export type IUpdate = {
    /**
     * (Optional) The updated product ID for this assignment. If provided,
     * changes the product this assignment applies to. Normally changed only
     * for correction; uniqueness and referential constraints are enforced.
     * Must refer to a valid product.
     */
    product_id?: string & tags.Format<"uuid">;

    /**
     * (Optional) The updated category ID for this assignment. Allows
     * re-assignment of a product to a different category via update, for
     * correction or bulk/automated changes. Validates against current
     * categories and business rules.
     */
    category_id?: string & tags.Format<"uuid">;
  };
}

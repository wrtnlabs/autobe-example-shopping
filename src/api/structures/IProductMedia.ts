import { tags } from "typia";

/**
 * Atomic reference for product-related media/attachment entry.
 *
 * Implements catalog/gallery/media compliance for product merchandising in rich
 * e-commerce flows. Strict normalization: never stores blob/content inline,
 * only attachment metadata references.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductMedia = {
  /**
   * Unique identifier for the product_media entry (Prisma PK).
   *
   * Links to a discrete media/attachment instance for a product (not content
   * blob; only metadata/pointer).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent product UUID for the media item (reference for catalog rendering,
   * compliance association).
   */
  product_id: string & tags.Format<"uuid">;

  /**
   * Foreign key to attachments table. Media record references externalized
   * attachment metadata for delivery and CDN mapping.
   */
  attachment_id: string & tags.Format<"uuid">;

  /**
   * Optional link to a specific product_snapshot (enables historical gallery
   * reconstruction for immutable product states). May be null for current or
   * unversioned assets.
   */
  snapshot_id?: string & tags.Format<"uuid">;

  /**
   * Display order (1-based) for UX carousel/gallery. Controls ordering in
   * administration/presentation interfaces.
   *
   * Atomic, required for repeatable display.
   */
  sort_order: number & tags.Type<"int32">;

  /**
   * Media category/type string: e.g., 'image', 'video', 'doc'. Required for
   * content type discrimination (admin/content moderation and
   * accessibility).
   */
  type: string;

  /**
   * Optional alt text metadata for accessibility and SEO compliance
   * (i18n-capable if leveraged in presentation).
   */
  alt_text?: string;
};
export namespace IProductMedia {
  /**
   * Advanced search, filter, and pagination options for product media
   * gallery/image/video attachments.
   *
   * Implements requirements for rich content handling and accessibility (alt
   * text) in product merchandising UIs.
   */
  export type IRequest = {
    /**
     * Filter: UUID of product to which media is linked. Enables
     * product-specific gallery queries or admin audits.
     */
    product_id?: string & tags.Format<"uuid">;

    /**
     * Filter by product_snapshot ID. Supports historical gallery or
     * rollback view for specific product snapshot version.
     */
    snapshot_id?: string & tags.Format<"uuid">;

    /**
     * Media file type (e.g., 'image', 'video', 'doc'). Query-discriminator
     * parameter used for filtering media by category or supporting
     * content-specific UI rendering.
     */
    type?: string;

    /**
     * Search filter for accessibility/alt text description. Used for
     * compliance/a11y and admin moderation workflows.
     */
    alt_text?: string;

    /**
     * Ordering index for search or administration tools. Controls
     * presentation sequence in gallery/UX.
     *
     * Optional; may be null to disable ordering.
     */
    sort_order?: number & tags.Type<"int32">;

    /** Pagination: current page number to retrieve. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Pagination: records per page, default 100. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * Creation request for product media/attachment entity. Required for adding
   * new image/video/doc reference for catalog display and compliance needs.
   */
  export type ICreate = {
    /** UUID reference to the product entity owned by this media item. */
    product_id: string & tags.Format<"uuid">;

    /**
     * UUID of the attachment file to associate (i.e., uploaded asset in
     * attachments table).
     */
    attachment_id: string & tags.Format<"uuid">;

    /**
     * Optional snapshot reference ID for point-in-time gallery creation
     * (immutable product state context). Null if not historical gallery
     * asset.
     */
    snapshot_id?: string & tags.Format<"uuid">;

    /**
     * UI presentation order for the media item. Used for gallery/carousel
     * displays and admin ordering. Required if multiple media configured.
     */
    sort_order: number & tags.Type<"int32">;

    /**
     * String indicating media type (image/video/doc). Used for content
     * filtering, API validation, and UX presentation.
     */
    type: string;

    /** Optional alt text for accessibility. */
    alt_text?: string;
  };

  /**
   * Mutable field update structure for a product media asset. Controls
   * metadata or presentation properties (never content blob/attachment
   * directly).
   */
  export type IUpdate = {
    /**
     * UUID of the attachment file to re-link (switch to a new asset for
     * this media record).
     */
    attachment_id?: string & tags.Format<"uuid">;

    /**
     * UI order for gallery display sequence. Changes the
     * carousel/image/video order.
     */
    sort_order?: number & tags.Type<"int32">;

    /**
     * Change of media type (to adjust content rendering/validation or
     * correct incorrect metadata).
     */
    type?: string;

    /** Updated accessibility metadata for this media item. */
    alt_text?: string;
  };
}

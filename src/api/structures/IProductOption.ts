import { tags } from "typia";

/**
 * Schema representing a single option/choice definition for a product (e.g.,
 * size, color). All fields are atomic and reflect full normalization, enabling
 * dynamic variant/option configuration in the AI Shopping Mall system.
 *
 * Refer to 'product_options' Prisma table for explanation of individual fields
 * and their role in SKU management, i18n, and merchandising. Optionally linked
 * with attributes via product_attributes.
 *
 * Critical for product onboarding, variant creation, and catalog search
 * workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductOption = {
  /**
   * Primary key for the product option. Unique ID generated by the system,
   * mapped from 'product_options.id'.
   *
   * Immutable, required for record referencing.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the owning product. Enforces normalization of
   * option definition to the associated product entity.
   */
  product_id: string & tags.Format<"uuid">;

  /**
   * Display name (label) for the option. Implements i18n, GIN search index,
   * and merchandising requirements for advanced product filtering.
   */
  name: string;

  /**
   * Boolean for whether the option is mandatory for all variants of this
   * product (see 'required' in product_options). Validation enforced by
   * business rules at variant creation.
   */
  required: boolean;

  /**
   * Ordering index for option display in variant configuration or product
   * UIs. Required for flexible merchandising and admin UX.
   */
  sort_order: number & tags.Type<"int32">;
};
export namespace IProductOption {
  /**
   * Request body for advanced search, filtering, and pagination of product
   * options for catalog management UI or integration. Fields correspond to
   * atomic, filterable columns in the product_options table.
   */
  export type IRequest = {
    /**
     * Filter by owning product's ID, referencing 'products.id'. Restricts
     * listed options to those for the specified product.
     */
    product_id?: string & tags.Format<"uuid">;

    /**
     * Optional filter on whether the option is required for variant
     * completion. Implements search for required/optional product options.
     */
    required?: boolean;

    /**
     * Search or filter by the option display name, supporting i18n
     * substring queries. GIN/trgm search for advanced product management
     * UI.
     */
    name?: string;

    /**
     * Pagination parameter: which page to retrieve in paginated results.
     *
     * Defaults to 1 if not specified.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Pagination parameter: number of option records per page (batch size).
     *
     * Defaults to a platform-configured value (e.g., 50 or 100).
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Object representing user/admin request to create a new product option for
   * a given product, strictly normalized and fully validated as per
   * 'product_options' Prisma schema and Product Domain requirements.
   */
  export type ICreate = {
    /**
     * ID of the parent product to which this option is added. Required for
     * strict parent-child relationship in the product_options table.
     */
    product_id: string & tags.Format<"uuid">;

    /**
     * Name of the option (e.g., 'Color', 'Size'), supporting i18n and
     * merchandising display.
     */
    name: string;

    /**
     * Flag indicating whether this option is required for all variants of
     * the parent product. Used in UI validation and attribute assignment
     * business logic.
     */
    required: boolean;

    /**
     * Specifies the UI display order for this option among available
     * product options. Must be a non-negative integer for presentation
     * logic.
     */
    sort_order: number & tags.Type<"int32">;
  };

  /**
   * Object schema for updating attributes of a product option (ID and parent
   * references are immutable). Changes are strictly audit-logged and
   * validated for business logic and referential integrity per the
   * product_options model.
   */
  export type IUpdate = {
    /** Mutable display name for the product option (i18n, merchandising). */
    name?: string;

    /**
     * Modifiable flag indicating if this option is required after creation
     * (business rules enforcedâ€”cannot unset if variants depend on it).
     */
    required?: boolean;

    /**
     * Modifiable field to reorder the option's display in admin/UI context;
     * must remain non-negative.
     */
    sort_order?: number & tags.Type<"int32">;
  };
}

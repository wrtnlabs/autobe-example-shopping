import { tags } from "typia";

/**
 * Atomic resource entity for a product review (review table row). Includes
 * essential fields: product, snapshot (version), author, rating, content, audit
 * meta. Used for full-detail view, analytics, auditing, and review export
 * dashboards. Matches business rules for Product Domain engagement and
 * transparency.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductReview = {
  /**
   * UUID primary key for the product review.
   *
   * Product_reviews.id in DB.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the product being reviewed (FK to products).
   *
   * Product_reviews.product_id.
   */
  product_id: string & tags.Format<"uuid">;

  /**
   * Snapshot association (FK to product_snapshots), identifying the exact
   * product version being reviewed.
   *
   * Ensures immutable review-record traceability.
   */
  product_snapshot_id: string & tags.Format<"uuid">;

  /**
   * Reference to user who authored the review (FK to users table).
   *
   * Product_reviews.author_id.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Star rating given by customer. Atomic, required, 1-5 range.
   *
   * Product_reviews.rating.
   */
  rating: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;

  /**
   * Short headline or summary sentence for the review (optional).
   *
   * Product_reviews.title, nullable.
   */
  title?: string;

  /**
   * Body/markdown content of the review. Must follow schema definition for
   * product_reviews.body. Always required.
   */
  body: string;

  /**
   * Timestamp (UTC, ISO8601) when review was written.
   *
   * Product_reviews.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (nullable) when review was deleted/archived. Null if review is
   * live.
   *
   * Product_reviews.deleted_at; controls soft-delete state.
   */
  deleted_at?: string & tags.Format<"date-time">;
};
export namespace IProductReview {
  /**
   * Request/query object for paginated, filtered searching/lists of product
   * reviews. Parameters match filtering needs for product_reviews table:
   * product, snapshot, author, star rating, time window search, deleted-only
   * etc. Pagination uses IPage.IRequest standard fields (page, limit). Used
   * for UX searching, admin dashboards, analytics reviews, and external
   * export/report flows.
   */
  export type IRequest = {
    /**
     * Limits search to reviews for one product.
     *
     * References product_reviews.product_id. Optional, allows filtering of
     * reviews by their associated product.
     */
    product_id?: string & tags.Format<"uuid">;

    /**
     * Optional: filter reviews tied to a particular product version
     * (snapshot).
     *
     * References product_reviews.product_snapshot_id in the DB. Supports
     * point-in-time review context for historical transparency.
     */
    product_snapshot_id?: string & tags.Format<"uuid">;

    /**
     * Filter reviews to those written by this specific user
     * (reviewer/customer/member).
     *
     * Maps directly to product_reviews.author_id. Used for account pages,
     * self-service, or moderation of one user's reviews.
     */
    author_id?: string & tags.Format<"uuid">;

    /**
     * Optionally filter for a specific star rating (1-5).
     *
     * References product_reviews.rating. Useful for searching only 5-star
     * or low reviews for analytics/moderation/dashboard.
     */
    rating?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;

    /**
     * Restrict search to reviews created after this date/time (ISO8601
     * UTC).
     *
     * For pagination/analytics, corresponds to product_reviews.created_at.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Restrict search to reviews created before this date/time (ISO8601
     * UTC).
     *
     * Used to bound result set by time.
     */
    created_to?: string & tags.Format<"date-time">;

    /**
     * If true, includes soft-deleted reviews in the result.
     *
     * If false/null, only active (not deleted) reviews are returned.
     */
    deleted?: boolean;

    /**
     * Request this page (starts at 1). See standard IPage/IPage.IRequest
     * definition.
     *
     * Used for paging, not included if not paginated.
     */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Maximum number of results per page (default=20, max=100 per business
     * config).
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;
  };

  /**
   * Payload for creating a new product review. Required fields per
   * product_reviews schema. Enforces audit, compliance, and engagement
   * policies for transparent product feedback. Used in review submission
   * APIs.
   */
  export type ICreate = {
    /** Product being reviewed (FK: products.id). Required. */
    product_id: string & tags.Format<"uuid">;

    /**
     * Snapshot of product being reviewed (FK: product_snapshots.id).
     * Required for point-in-time validity and compliance.
     */
    product_snapshot_id: string & tags.Format<"uuid">;

    /**
     * User (reviewer/customer) authoring the review (FK: users.id). May be
     * inferred or required by session context.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Star rating (required). Must be integer 1—5 inclusive. Maps to
     * product_reviews.rating.
     */
    rating: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;

    /**
     * Short headline/summary for review (optional). Maps to
     * product_reviews.title (nullable).
     */
    title?: string;

    /**
     * Full markdown/plaintext content of the review (required). Maps to
     * product_reviews.body.
     */
    body: string;
  };

  /**
   * Payload for updating an existing product review. Editable fields only as
   * per product_reviews schema—no foreign keys may change. Implements audit
   * logging and triggers snapshot of review version per compliance
   * requirements.
   */
  export type IUpdate = {
    /**
     * Headline or summary sentence to update. Nullable; omitting means no
     * change. Corresponds to product_reviews.title.
     */
    title?: string;

    /**
     * Updated body (markdown/plaintext) of the review. Required for update.
     * product_reviews.body field.
     */
    body: string;

    /**
     * New star rating (optional). product_reviews.rating. If omitted, not
     * changed; if present, must be integer 1-5.
     */
    rating?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>;
  };

  /**
   * Confirmation/result details for a soft-delete operation on a product
   * review. Used for audit/compliance logs and user feedback dialogs.
   * Structure ensures reference to affected review and final state.
   */
  export type ISoftDeleteResult = {
    /**
     * ID (primary key) of the review soft-deleted.
     *
     * Product_reviews.id column.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Timestamp (UTC, ISO8601) when review was deleted (or nil/null if
     * unsuccessful).
     *
     * Product_reviews.deleted_at field.
     */
    deleted_at: string & tags.Format<"date-time">;

    /**
     * True if operation succeeded, false if not.
     *
     * Client usability/confirmation logic only.
     */
    success: boolean;
  };
}

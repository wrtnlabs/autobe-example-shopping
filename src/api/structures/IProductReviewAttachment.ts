import { tags } from "typia";

/**
 * Resource object representing media/file link for a product review
 * (EngagementBoards.product_review_attachments table). Fields represent all
 * atomic schema attributes and serve moderation, engagement, and UI rendering.
 * Used for all CRUD/dashboards managing review media.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IProductReviewAttachment = {
  /**
   * UUID primary key for this attachment reference.
   *
   * Mapped to product_review_attachments.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key for the owning product review.
   *
   * References product_review_attachments.review_id.
   */
  review_id: string & tags.Format<"uuid">;

  /**
   * Foreign key for physical/media attachment asset.
   *
   * References product_review_attachments.attachment_id.
   */
  attachment_id: string & tags.Format<"uuid">;

  /**
   * The display order for this attachment in the review. See sequence
   * semantics in product_review_attachments.table.
   */
  sequence: number & tags.Type<"int32">;
};
export namespace IProductReviewAttachment {
  /**
   * Search and pagination structure for product review attachment listings.
   * Implements bulk/multi-query semantics for
   * EngagementBoards.product_review_attachments table. Filters to any
   * combination of review/query and paging. Standardizes
   * IPage<IProductReviewAttachment> usage with review-based subqueries.
   */
  export type IRequest = {
    /**
     * Filter attachments to a specific review.
     *
     * FK to product_review_attachments.review_id.
     */
    review_id?: string & tags.Format<"uuid">;

    /**
     * Filter/search for a particular linked attachment instance.
     *
     * Product_review_attachments.attachment_id.
     */
    attachment_id?: string & tags.Format<"uuid">;

    /**
     * Optional: search for specific order/sequence of attachments for
     * display/bundling.
     */
    sequence?: number & tags.Type<"int32">;

    /** Page number for pagination. See standard IPage.IRequest spec. */
    page?: number & tags.Type<"int32">;

    /**
     * Results per page (pagination); default, min, and max defined per
     * business rules.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Payload for creating a new review attachment, linking uploaded media to a
   * specific review entity. Follows EngagementBoards schema; all fields
   * mandatory for atomic/normalized create.
   */
  export type ICreate = {
    /**
     * The product review to attach this media/file to.
     *
     * Required: product_review_attachments.review_id.
     */
    review_id: string & tags.Format<"uuid">;

    /**
     * The physical/media attachment file or asset to associate with the
     * review.
     *
     * Required: product_review_attachments.attachment_id.
     */
    attachment_id: string & tags.Format<"uuid">;

    /**
     * Display order for this attachment among all attachments for a review.
     * Used to present images/files in sequence.
     *
     * Required: product_review_attachments.sequence.
     */
    sequence: number & tags.Type<"int32">;
  };

  /**
   * Product review attachment update request object.
   *
   * Represents the fields allowed for update in a product review attachment.
   * It enables reordering (sequence), changing the referenced attachment (if
   * business logic allows), and is used by the author, moderators, or
   * administrators in review moderation, correction, or media replacement
   * flows. Enforces constraints from the product_review_attachments table in
   * the EngagementBoards domain.
   *
   * All fields are atomic and only permissible by authorized users, with
   * audit logs required for every change under audit/compliance
   * requirements.
   */
  export type IUpdate = {
    /**
     * The order of this attachment in the review's media list. Respects
     * uniqueness within a review. Derived from 'sequence' in
     * product_review_attachments table. Must be a positive integer.
     *
     * Used to adjust the display order of media for UI purposes and enables
     * admins/moderators or the author to reorder attachments in a review.
     * Audited on change.
     */
    sequence?: number & tags.Type<"int32">;

    /**
     * Attachment file to associate with this review attachment. Must
     * reference an existing attachments record.
     *
     * Enables replacement of an image or file in a review with another one
     * (only allowed by workflow/business logic). From 'attachment_id' in
     * product_review_attachments. All permission and size checks enforced
     * externally.
     */
    attachment_id?: string & tags.Format<"uuid">;
  };
}

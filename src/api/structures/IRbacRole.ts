import { tags } from "typia";

/**
 * RBAC role definition entity, as in Prisma rbac_roles. Used for admin/staff
 * UI, assignment, and compliance/risk audit. Contains all atomic role fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IRbacRole = {
  /**
   * Unique identifier (primary key) for the RBAC role.
   *
   * References rbac_roles.id column in Prisma.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Role code—unique string identifier for RBAC logic and assignment.
   *
   * E.g., 'seller', 'customer', 'admin'. Directly mapped to rbac_roles.code.
   */
  code: string;

  /**
   * (Optional) Admin or help text description for the role.
   *
   * Mapped from rbac_roles.description and used for RBAC dashboard and
   * documentation.
   */
  description?: string;

  /**
   * Flag for system-generated/builtin roles (true) or admin-added roles
   * (false).
   *
   * Prisma: rbac_roles.is_builtin.
   */
  is_builtin: boolean;

  /**
   * Role creation timestamp.
   *
   * Prisma: rbac_roles.created_at (full audit trail).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for last update to the role.
   *
   * References rbac_roles.updated_at for audit and compliance.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IRbacRole {
  /**
   * Search and filtering parameters for admin/paged RBAC role queries. Allows
   * full-text, code, and system/builtin filtering as required for RBAC
   * audit.
   */
  export type IRequest = {
    /**
     * Filter by unique role code (e.g., customer, seller, admin,
     * super_admin).
     *
     * Directly references rbac_roles.code for search/filter UI.
     */
    code?: string;

    /**
     * Full-text search by description/comment for the role.
     *
     * Used for convenience in admin role filtering (Prisma:
     * rbac_roles.description).
     */
    description?: string;

    /**
     * Limit to system-created (true) or admin-defined (false) roles only.
     *
     * Prisma: rbac_roles.is_builtin.
     */
    is_builtin?: boolean;

    /**
     * Start date filter for role creation window.
     *
     * References rbac_roles.created_at (lower bound).
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * End date filter for role creation window.
     *
     * References rbac_roles.created_at (upper bound).
     */
    created_to?: string & tags.Format<"date-time">;

    /** Pagination: maximum number of results to return. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Pagination: index to start at for paging. */
    offset?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Payload for defining a new RBAC role (admin role creation form). Contains
   * code and optional description; is_builtin is usually set false for custom
   * roles.
   */
  export type ICreate = {
    /**
     * Unique role code to be created—used for RBAC assignment (e.g., admin,
     * moderator, reviewer).
     *
     * References rbac_roles.code. Must be a unique string.
     */
    code: string;

    /**
     * (Optional) Admin help/UX description used for RBAC audit and
     * dashboard labeling.
     *
     * Mapped to rbac_roles.description.
     */
    description?: string;

    /**
     * Flag to mark as system/builtin role (false for admin-defined/custom
     * roles).
     *
     * Mapped to rbac_roles.is_builtin (true/false).
     */
    is_builtin?: boolean;
  };

  /**
   * Fields allowed in updating an RBAC role. All attributes mapped to Prisma
   * rbac_roles, but code/is_builtin updates may be restricted for certain
   * roles. Used for compliance, admin maintenance, or infrastructure
   * upgrades.
   */
  export type IUpdate = {
    /**
     * Update (rename) the unique role code, if required.
     *
     * Subject to code uniqueness in rbac_roles.code. Used for correcting or
     * retitling roles.
     */
    code?: string;

    /**
     * Change the role's help/UX description text.
     *
     * Updated for admin labels or documentation.
     */
    description?: string;

    /**
     * Flag role as system (true) or admin custom (false). Generally
     * reserved for system-level changes.
     */
    is_builtin?: boolean;
  };
}

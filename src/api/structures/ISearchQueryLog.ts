import { tags } from "typia";

/**
 * A single search query log as described by the Prisma 'search_query_logs'
 * table. Captures user/system search events for compliance, analytics, search
 * improvement, and auditing. Each record is atomic and holds all required
 * fields for traceability and export.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISearchQueryLog = {
  /**
   * Unique identifier for this search query log entry. Primary key in Prisma
   * 'search_query_logs' table. Used for analytics, deduplication, and
   * compliance investigations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * (Optional/null) The identifier for the user performing the search (may be
   * omitted for guests). Links to the 'users' table. Supports per-user
   * analytics, compliance, and privacy exports.
   */
  user_id?: string & tags.Format<"uuid">;

  /**
   * The natural language or raw search string entered by the user or system.
   * Essential for analytics, search optimization, and personalization
   * workflows. Indexed for auditing and business intelligence.
   */
  query: string;

  /**
   * The IETF language tag (e.g., 'en', 'ko-KR') for localization/analytics.
   * Enables i18n dashboards, reporting, and query analysis.
   */
  language: string;

  /**
   * (Optional) JSON-encoded string representing applied filters (e.g. price
   * range, category). 3NF: stored as a serialized blob for audit/context. Not
   * indexed; used for search experiment and deep analytics.
   */
  filters?: string;

  /**
   * Number of results returned to the user/system from this search operation.
   * Analyzed for UI/UX success metrics and search result tuning.
   */
  result_count: number & tags.Type<"int32">;

  /**
   * Timestamp marking the occurrence of this search. Essential for analytics
   * trends, peak-search reporting, anomaly investigation. Must be preserved
   * per GDPR, CCPA, etc.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ISearchQueryLog {
  /**
   * Request body structure for searching, filtering and paginating search
   * query logs. Used by analytics or admin dashboards to retrieve specific
   * slices of user/system search activity from the 'search_query_logs' table.
   * All fields are optional and may be combined for complex analytics and
   * compliance queries.
   */
  export type IRequest = {
    /**
     * (Optional) The UUID of the user who performed the search. Allows
     * search filtering by user; null for guest queries. Used for compliance
     * tracking, analytics, or internal investigation per audit
     * requirements.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * (Optional) Filter to only queries that match or contain this string
     * (or pattern, depending on search implementation). Supports full-text
     * search and analytics exploration.
     */
    query?: string;

    /**
     * (Optional) The IETF language tag (e.g., 'en', 'ko') specifying query
     * language for i18n/statistics. Enables filtered search and analytics
     * by language context.
     */
    language?: string;

    /**
     * (Optional) Filters logs created before this timestamp. Enables range
     * search for analytics or compliance export. Date/time in ISO8601
     * format.
     */
    created_before?: string & tags.Format<"date-time">;

    /**
     * (Optional) Filters logs created after this timestamp. Supports range
     * queries for reporting, investigation, or dashboard analytics.
     */
    created_after?: string & tags.Format<"date-time">;

    /**
     * (Optional) Minimum number of results returned by search queries. Used
     * for analytics on unsuccessful or highly successful searches.
     */
    result_count_min?: number & tags.Type<"int32">;

    /**
     * (Optional) Maximum number of results returned by search queries.
     * Allows focused audits on low-yield or over-broad queries.
     */
    result_count_max?: number & tags.Type<"int32">;

    /**
     * (Optional) Results page number (for pagination). Defaults to 1; used
     * alongside 'limit' for navigable searches.
     */
    page?: number & tags.Type<"int32">;

    /**
     * (Optional) Page size or maximum records per page. Allows scalable
     * reporting; default typically set to system configuration.
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Input schema for appending a new search query log to the
   * 'search_query_logs' table. Used for analytics, audit, and UI/UX reporting
   * in the AI Shopping Mall Backend.
   */
  export type ICreate = {
    /**
     * (Optional) References the user who submitted the query; required if
     * not a guest. Must match an existing 'users' table ID if present.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * The full text of the search query as entered by the user. Required
     * for analytics and compliance.
     */
    query: string;

    /**
     * The language/locale for the search event (IETF code, e.g., 'en-US').
     * Ensures accurate international analytics.
     */
    language: string;

    /**
     * (Optional) JSON-encoded string for applied filters at search time
     * (categories, price range, etc). Null for unfiltered searches.
     */
    filters?: string;

    /**
     * Total number of matched results for this query event. Used in
     * dashboard reporting, UI feedback, and search improvement.
     */
    result_count: number & tags.Type<"int32">;

    /**
     * Timestamp for when this search action took place. Used for ordering
     * and trend analysis. Format: ISO8601.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Schema for correcting or administratively annotating a search query log
   * record. Exposes only updatable fields; ID, timestamps, and user reference
   * are immutable. Used for compliance corrections or retroactive analytics
   * annotation.
   */
  export type IUpdate = {
    /**
     * (Optional) The updated search string, for correcting user/system
     * input or complying with metadata annotation. Used only under
     * compliance processes.
     */
    query?: string;

    /**
     * (Optional) Updated language/locale tag for the search event, for
     * correction or compliance/approval updates.
     */
    language?: string;

    /**
     * (Optional) Updated/added filters string, e.g., after review or
     * annotation.
     */
    filters?: string;

    /**
     * (Optional) Correction to the recorded result count, e.g., due to
     * indexing changes or error correction after-the-fact.
     */
    result_count?: number & tags.Type<"int32">;
  };

  /**
   * Response for soft delete actions on search query logs. Conveys the result
   * (success, not found, forbidden, etc.) and, if successful, records the
   * deletion timestamp. Used for audit, rollback, and compliance reporting.
   */
  export type IDeleteResponse = {
    /**
     * Indicates the result of the delete action; success if marked deleted,
     * other values if resource is missing or deletion fails. Standardized
     * for API contract.
     */
    status: "success" | "not_found" | "forbidden" | "error";

    /**
     * Timestamp when the log entry was soft deleted, if the action
     * succeeded. Used for compliance tracking, restoration, or audits.
     */
    deleted_at?: string & tags.Format<"date-time">;
  };
}

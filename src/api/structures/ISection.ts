import { tags } from "typia";

/**
 * Represents a Section entity within a channel (storefront/brand),
 * encapsulating navigation/grouping units for merchandising, campaigns, or
 * content areas per requirements. DTO is fully aligned with 'sections' table in
 * the Prisma DB schema and includes all normalized/required audit fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISection = {
  /** Primary key (UUID) for the Section. Prisma: sections.id */
  id: string & tags.Format<"uuid">;

  /** Owning Channel (storefront) ID. Prisma: sections.channel_id */
  channel_id: string & tags.Format<"uuid">;

  /**
   * Section code (unique within channel). Used for programmatic access,
   * configuration. Prisma: sections.code
   */
  code: string;

  /** Section name (end-user visible). Prisma: sections.name */
  name: string;

  /** Display order/priority within the channel. Prisma: sections.order */
  order: number &
    tags.Type<"int32"> &
    tags.JsonSchemaPlugin<{
      format: "int32";
    }>;

  /**
   * Optional JSON configuration for dynamic section parameters. Prisma:
   * sections.config
   */
  config?: string | null;

  /**
   * Creation timestamp. Used for audit/compliance history. Prisma:
   * sections.created_at
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update. Prisma: sections.updated_at */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp (null=active). Prisma: sections.deleted_at */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ISection {
  /**
   * Request body for listing/searching Section entities in the system, mapped
   * to PATCH /sections and matching the 'sections' Prisma table schema.
   * Implements normalized filters for channel/section assignment, display
   * order, and code uniqueness. Includes sort/order params for Section
   * navigation/UX operations.
   */
  export type IRequest = {
    /** Page number for pagination (zero-based, optional). */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Maximum results per page. Optional, defaults to 100. */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<100> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /**
     * Filter: confines results to a specific Channel by UUID. Prisma:
     * sections.channel_id
     */
    channel_id?: string & tags.Format<"uuid">;

    /** Filter: matches Section code (unique per channel). */
    code?: string;

    /** Partial/keyword search for user-facing Section name. */
    name?: string;

    /** Filter by display order value. */
    order?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Show soft-deleted sections (deleted_at not null) as well when true. */
    includeDeleted?: boolean;

    /** Sort field. Defaults to order ascending. */
    sortBy?: "order" | "name" | "code" | "created_at" | "updated_at";

    /** Sort direction: asc or desc. */
    sortDir?: "asc" | "desc";
  };

  /**
   * Request type for creating a new Section entity (POST /sections). Includes
   * only non-nullable, creatable fields per the 'sections' schema. Audit
   * fields are implicitly handled by backend.
   */
  export type ICreate = {
    /**
     * Owning Channel (UUID) in which this Section will be created. Prisma:
     * sections.channel_id
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * Unique code for section, scoped per channel. Required for section
     * creation. Prisma: sections.code
     */
    code: string;

    /** Section display name, required for UX. Prisma: sections.name */
    name: string;

    /**
     * Display order/priority in the channel (lower=earlier). Prisma:
     * sections.order
     */
    order: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Optional JSON configuration for custom section settings. Prisma:
     * sections.config
     */
    config?: string | null;
  };

  /**
   * Request body for updating a Section in the backend (PUT /sections/{id}).
   * Only mutable Section fields are present; immutable properties (id,
   * channel_id, code, created_at) are not included as per PEM (Prisma Entity
   * Model) compliance.
   */
  export type IUpdate = {
    /** New display name for the Section. Optional. */
    name?: string;

    /**
     * New display order/priority for the Section within the channel.
     * Optional.
     */
    order?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Updated JSON configuration for the Section (if customizable).
     * Optional.
     */
    config?: string | null;

    /**
     * Soft delete/un-delete timestamp for compliance flows. Optional:
     * direct setting is only allowed by system/admin with elevated rights.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}

import { tags } from "typia";

/**
 * 판매자 마스터 엔티티. sellers 테이블의 모든 원자 속성 매핑, 파생/관계형 데이터 별도 관리.
 *
 * 실명 온보딩, 권한 변화, 다채널 할당, 온보딩 이력, 컴플라이언스 추적 등 쇼핑몰 사업자/관리자 백엔드의 핵심 도메인 엔티티.
 *
 * 모든 속성은 PRISMA 스키마 코멘트 및 테이블 정의에 따라 작성되어야 하며, RBAC 정책 하에서 상세 설명, 상태관리, 신고/정지
 * 이력, 온보딩 추적을 위해 반드시 존재한다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ISeller = {
  /** 판매자 고유 식별자(UUID), sellers 테이블 PK. */
  id: string & tags.Format<"uuid">;

  /** 판매 소유 유저 id. 사용자 통합 인증 구조와 연계됨. */
  user_id: string & tags.Format<"uuid">;

  /** 판매자 표시명/사업자명. 스토어 및 상품 정보에 표시. */
  nickname: string;

  /** 상태값(예: 'pending', 'active', 'suspended' 등) — 온보딩, 정지, 이력 등 워크플로우 관리 필드. */
  status: string;

  /** 등록시각. 온보딩 시작 시점, 불변. 컴플라이언스/추적용. */
  created_at: string & tags.Format<"date-time">;

  /** 최종 업데이트 시각. 정보 수정/권한 변경 등 즉시 반영. */
  updated_at: string & tags.Format<"date-time">;

  /** 논리적 삭제/아카이브 시점. 규정상 삭제 기록(소프트 딜리트). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ISeller {
  /**
   * 판매자 목록/검색/필터링 요청용 파라미터 프레임.
   *
   * 요구사항(판매자 대량 검색, Admin/Fraud/온보딩 대시보드 통합)에 따라, 페이지네이션, 상태별, 기간별, 채널별 등 다양한
   * 조건 지원. 모든 필드는 Prisma sellers 테이블 컬럼과 정확히 매핑되며, RBAC 정책 하에서 판매가능/정지/보류
   * 판매자, 닉네임, 생성일자 범위 등 정밀 제어 및 통계를 위해 사용된다.
   */
  export type IRequest = {
    /** 판매자 상태(예: 'pending', 'active', 'suspended'). 상태별 검색/필터링 조건. */
    status?: string | null;

    /** 판매자 표시명(닉네임) 부분일치/검색. */
    nickname?: string | null;

    /** 사용자 UUID로 특정 판매자(계정 기반) 필터링. */
    user_id?: (string & tags.Format<"uuid">) | null;

    /** 생성일 이후 검색 조건(시작일). */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** 생성일 이전 검색 조건(종료일). */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** 특정 채널/스토어 소속(또는 할당) 판매자만 조회. */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /** 페이지 번호. 기본값 1. */
    page?: number &
      tags.Type<"int32"> &
      tags.Default<1> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** 페이지당 결과 수(최대 200). */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<20> &
      tags.Minimum<1> &
      tags.Maximum<200> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** 정렬 기준. 기본값 'created_at'. */
    order?: "created_at" | "nickname" | "status";

    /** 정렬 방향. 기본값 desc. */
    direction?: "asc" | "desc";
  };

  /**
   * 신규 판매자 엔티티 생성용 데이터 타입. 온보딩 단계/관리자 등록 모두 사용.
   *
   * 입력 필드 전체가 sellers 테이블과 일치, 하위 및 관계형 데이터는 별도 처리.
   */
  export type ICreate = {
    /** 소유 사용자의 UUID. sellers.user_id. 유일성 보장됨. */
    user_id: string & tags.Format<"uuid">;

    /** 판매자 표시/사업자명. 중복 허용하나 검색/구분 정보. */
    nickname: string;

    /** 온보딩 시작 상태값(예: pending, active, suspended 등). */
    status: string;
  };

  /**
   * 판매자 정보 수정(온보딩/정보변경/관리)에서 사용되는 Update 요청용 타입.
   *
   * 닉네임, 상태 등 제한된 필드만 수정하며, sellers PK(user_id)는 불변, 관계형 데이터는 별도 관리.
   */
  export type IUpdate = {
    /** 판매자 닉네임(수정 허용). */
    nickname?: string;

    /** 상태값. RBAC 정책(일반판매자는 해당 필드 수정 불가)이 적용됨. */
    status?: string;
  };

  /**
   * 판매자 논리적 삭제(soft delete) 요청 결과 타입.
   *
   * 성공/실패 플래그, 삭제 타임스탬프 등 리턴.
   */
  export type ISoftDeleteResult = {
    /** 논리적 삭제 처리 성공 여부. */
    success: boolean;

    /** 삭제 처리 완료 시각(ISO8601). */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}

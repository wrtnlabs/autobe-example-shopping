import { tags } from "typia";

/**
 * ITags is the primary tag entity, as defined in the tags schema table.
 * Implements all normalized fields, audit timestamps, and business constraints
 * required by scalable e-commerce tagging systems. Tag uniqueness and
 * normalization follow database schema and requirements design. Supports
 * advanced search, batch export, compliance audit, and user-facing tag
 * selection workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITags = {
  /** Primary key. Unique tag identifier (tags.id field). */
  id: string & tags.Format<"uuid">;

  /**
   * Associated channel (tags.channel_id) enabling channel-scoped tag
   * taxonomies.
   */
  channel_id: string & tags.Format<"uuid">;

  /**
   * Tag business code (tags.code field). Uniqueness is enforced per channel
   * for robust tagging.
   */
  code: string;

  /**
   * Tag display label as shown to users/admins (tags.name field). Enables
   * localization/i18n.
   */
  name: string;

  /** Tag creation timestamp. Used for tag lifecycle management. */
  created_at: string & tags.Format<"date-time">;

  /** Tag update timestamp. Used for versioning and audit workflows. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp (if present). Used for audit/compliance/database
   * lifecycle.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ITags {
  /**
   * ITags.IRequest provides filtering, search, and pagination options for tag
   * list API queries. The UX can use this structure to enable faceted,
   * scalable exploration and analytics over the dynamic tag system. All
   * fields follow strict normalization for robust, audit-friendly query
   * implementations. Channel, full-text, and date search support are included
   * as per requirements for powerful tagging workflows.
   */
  export type IRequest = {
    /**
     * Channel filter for tag query, limiting tags to a specific channel
     * context. Used for channel-unique taxonomy and compliance with
     * per-channel customization.
     */
    channel_id?: string & tags.Format<"uuid">;

    /**
     * Filter for tag code pattern or equality. Used for searching or batch
     * lookup.
     */
    code?: string;

    /**
     * Filter for tag display name match, supporting full-text search and
     * GIN index lookup.
     */
    name?: string;

    /** Start filter for tag creation timestamp range. */
    created_after?: string & tags.Format<"date-time">;

    /** End filter for tag creation timestamp range. */
    created_before?: string & tags.Format<"date-time">;

    /** Query flag. If true, only returns tags that are not soft deleted. */
    deleted_at_none?: boolean;

    /** Requested results page (for pagination). */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Number of results per page. */
    page_size?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * ITags.ICreate is the payload for creating a new tag record in the system.
   * It matches tags table schema and business normalization, enforcing
   * channel context and name/code rules as per requirements. All values
   * atomic and suitable for audit and uniqueness validation.
   */
  export type ICreate = {
    /**
     * Associated channel for this tag (tags.channel_id). Enforces
     * per-channel taxonomy separation as outlined in requirements.
     */
    channel_id: string & tags.Format<"uuid">;

    /**
     * Business/functional tag code to assign (tags.code). Must be unique in
     * channel scope.
     */
    code: string;

    /**
     * Visible label for admin/user display (tags.name). May be localized
     * externally.
     */
    name: string;
  };

  /**
   * ITags.IUpdate is the update (PATCH/PUT) payload for editing a tag's
   * properties. Only tag name is typically updatable; code/channel are
   * immutable after creation per requirements and schema. Supports audit and
   * rollback workflows as designed. All fields atomic and normalized.
   */
  export type IUpdate = {
    /**
     * Updated display label for the tag. Only updatable field for
     * business/UX flows.
     */
    name?: string;
  };
}

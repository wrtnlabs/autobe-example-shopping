import { tags } from "typia";

/**
 * Representation of system-user to external provider authentication mapping, as
 * in Prisma user_external_auths.
 *
 * Includes identity attribute mappings, linkage date, and references for
 * SSO/federation management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserExternalAuth = {
  /**
   * Unique identifier of mapping entry (user_external_auths.id).
   *
   * Primary key for reference and API targeting.
   */
  id: string & tags.Format<"uuid">;

  /**
   * FK reference to system user (users.id).
   *
   * Direct association with the authenticated domain user.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * External provider code (e.g., google, apple, naver).
   *
   * Maps to user_external_auths.provider in Prisma.
   */
  provider: string;

  /**
   * User identifier assigned by external provider.
   *
   * Atomic string used for federated login and SSO compliance.
   */
  external_user_id: string;

  /**
   * Timestamp when this mapping was established.
   *
   * Sourced from user_external_auths.linked_at.
   */
  linked_at: string & tags.Format<"date-time">;
};
export namespace IUserExternalAuth {
  /**
   * Search and filtering fields for querying user_external_auths records.
   *
   * Includes parameters for provider, user id, external id, and date window
   * pagination. Used for admin or compliance review.
   */
  export type IRequest = {
    /**
     * Filter by external authentication provider name (e.g., google,
     * apple). Used for narrowing search in user_external_auths.
     *
     * Corresponds to Prisma user_external_auths.provider.
     */
    provider?: string;

    /**
     * Filter by associated user.
     *
     * References users.id foreign key as in user_external_auths.user_id.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Filter by external provider user identifier.
     *
     * Used for audit/lookup, as per user_external_auths.external_user_id.
     */
    external_user_id?: string;

    /** Start date for linked_at range query. */
    linked_from?: string & tags.Format<"date-time">;

    /** End date for linked_at range query. */
    linked_to?: string & tags.Format<"date-time">;

    /** Pagination: max number of records to return. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Pagination: record index to start from. */
    offset?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Payload for creating a system-user to external provider authentication
   * mapping.
   *
   * All fields correspond to unique constraint or identity column in
   * user_external_auths.
   */
  export type ICreate = {
    /**
     * System user to associate with this external authentication
     * (users.id).
     *
     * Required for link creation in user_external_auths.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * External provider name (e.g., google, apple, naver).
     *
     * Matches external login provider as required in user_external_auths.
     */
    provider: string;

    /**
     * Unique identifier/user key from the external provider side.
     *
     * Atomic identity string per SSO/OAuth flows.
     */
    external_user_id: string;
  };

  /**
   * Fields permitted for updating user_external_auths mapping entries.
   *
   * Generally, mappings are immutable, but may allow changes for SSO
   * migration/admin correction. Mapped to columns in user_external_auths.
   */
  export type IUpdate = {
    /**
     * (Optional) Change the external provider name.
     *
     * Generally immutable after creation. Only allowed if required by
     * migration.
     */
    provider?: string;

    /**
     * (Optional) Modify linked external user identifier.
     *
     * Permits account merge or correction in rare admin flows.
     */
    external_user_id?: string;
  };
}

import { tags } from "typia";

/**
 * Atomic event for user identity verification as part of KYC/KYB, onboarding,
 * and compliance workflow. Strict audit, full regulatory chain, and
 * privacy-safe handling of all fields. All artifacts may be versioned or
 * exported as required for regional compliance requests.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserIdentityVerification = {
  /**
   * Primary verification event PK (user_identity_verifications.id)
   *
   * Fulfills legal audit chain for onboarding or compliance event. Each
   * operation is unique, versionable, and traceable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User under verification (users.id). Links to compliance, identity, and
   * audit flows.
   */
  user_id: string & tags.Format<"uuid">;

  /** KYC/KYB verification provider (e.g., 'Stripe', 'PASS Auth'). */
  provider: string;

  /**
   * Verification type (KYC, business_license, bank, etc). Granular business
   * marker for compliance audit flows.
   */
  type: string;

  /**
   * Request payload summary/opaque value (encrypted/hashed). Required by law
   * for successful compliance audits; data-retention restricted.
   */
  request_payload?: string | null;

  /**
   * Providerâ€™s response/audit info (encrypted/anonymized). Immutable by
   * compliance policy.
   */
  response_payload?: string | null;

  /** Outcome marker: success/failure/pending/etc. */
  status: string;

  /**
   * External system/provider reference key, for cross-audit or provider
   * review.
   */
  reference_id?: string | null;

  /**
   * Timestamp of successful outcome. Fulfills audit and legal compliance
   * trace.
   */
  verified_at?: (string & tags.Format<"date-time">) | null;

  /** Event request/initiation datetime. Audit requirement, analytics. */
  requested_at: string & tags.Format<"date-time">;

  /**
   * Finish/close timestamp (null if pending). Distinguishes open/incomplete
   * verifications.
   */
  completed_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IUserIdentityVerification {
  /**
   * Request/search DTO for user identity verification (compliance UI, legal
   * export, audit reporting). Input types reflect all compliance-centric user
   * info workflows and regulatory access-logging.
   */
  export type IRequest = {
    /**
     * Filter: user identity checking (users.id). For audit/admin escalation
     * view.
     */
    user_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Verification provider name. For filtering reviews by external KYC
     * providers.
     */
    provider?: string | null;

    /** Verification type filter (KYC, bank, license, etc). */
    type?: string | null;

    /** Filter by success/failure/pending, etc. For compliance review UIs. */
    status?: string | null;

    /** Requested date-after for filtering historical logs. */
    date_after?: (string & tags.Format<"date-time">) | null;

    /** Requested date-before filter for filtered export. */
    date_before?: (string & tags.Format<"date-time">) | null;

    /** Paging - current page (default 1). */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** Page size (default 100). */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;
  };

  /**
   * DTO for creating a user identity verification audit trail event. Strictly
   * for append-only tracking of compliance, onboarding, or regulatory
   * escalation, per GDPR/AML/PCI requirements.
   */
  export type ICreate = {
    /**
     * User being verified (users.id). Presentation for compliance/legal
     * export workflows.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Verification provider (e.g., third-party KYC service or module code).
     * Used to restrict by jurisdiction, config, etc.
     */
    provider: string;

    /**
     * Type/category of verification (KYC, bank, tax, business_license,
     * etc). Enforces audit trail linkage to business flows.
     */
    type: string;

    /**
     * Optional reference for external provider cross-linking; supports
     * audit export.
     */
    reference_id?: string | null;

    /**
     * Opaque/encrypted payload, e.g., PII, consent, or thresholds. Handles
     * privacy by storing in eligible form only.
     */
    request_payload?: string | null;
  };

  /**
   * Attributes for updating a user identity verification audit event, as
   * defined in the Prisma schema user_identity_verifications.
   *
   * Allows updates such as marking a verification attempt as completed,
   * setting outcome, or updating provider payload references. Every mutable
   * field corresponds to a normalized field in the database.
   */
  export type IUpdate = {
    /**
     * External provider name (e.g., 'Stripe ID', 'PASS Auth').
     *
     * Used to indicate the verification system applied to this check.
     * Sourced from user_identity_verifications.provider in Prisma.
     */
    provider: string;

    /**
     * (Optional) Request payload sent to the verification provider,
     * typically encrypted or hashed for privacy.
     *
     * Reflects normalized input data as audit evidence. Sourced from
     * user_identity_verifications.request_payload.
     */
    request_payload?: string;

    /**
     * (Optional) Response received from the identity provider,
     * encrypted/anonymized.
     *
     * Reference for audit and regulatory export. Sourced from
     * user_identity_verifications.response_payload.
     */
    response_payload?: string;

    /**
     * Outcome code of the verification event (e.g., 'success', 'pending',
     * 'failure').
     *
     * Directly mapped from user_identity_verifications.status in the Prisma
     * table.
     */
    status: string;

    /**
     * Timestamp when verification passed. Nullable. Used to indicate
     * completion or current status.
     *
     * Sourced from user_identity_verifications.verified_at.
     */
    verified_at?: string & tags.Format<"date-time">;

    /**
     * Timestamp when verification completed (if applicable).
     *
     * Sourced from user_identity_verifications.completed_at.
     */
    completed_at?: string & tags.Format<"date-time">;
  };
}

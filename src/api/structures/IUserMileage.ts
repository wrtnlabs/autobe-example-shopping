import { tags } from "typia";

/**
 * Atomic representation of user mileage event (user_mileages table).
 *
 * Covers a single earn/redeem/bonus/expire, fully audit-trailed and compliant
 * to regulatory requirements. All attributes strictly normalized as per
 * schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserMileage = {
  /**
   * Primary key identifier for the mileage event.
   *
   * From 'id' in user_mileages. Immutable, system-assigned.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the owning user.
   *
   * From 'user_id' in user_mileages. Used for access control and analytics.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Mileage event type: 'earn', 'redeem', 'bonus', or 'expire'.
   *
   * From 'mileage_type'. Business logic differentiates point accrual vs.
   * spending/expiration.
   */
  mileage_type: string;

  /**
   * Amount of mileage (points) affected in this event. Positive for accrual,
   * negative for redemption/expire.
   *
   * From 'amount'. All per-event, never an aggregate.
   */
  amount: number &
    tags.JsonSchemaPlugin<{
      format: "double";
    }>;

  /**
   * Short event description or reference reason.
   *
   * From 'description' in user_mileages. Optional for flex labeling.
   */
  description?: string;

  /**
   * Event status: 'pending', 'completed', 'expired', 'revoked', etc.
   *
   * Direct from 'status' in user_mileages. Used for workflow and compliance
   * audit.
   */
  status: string;

  /**
   * Event creation timestamp.
   *
   * From 'created_at' in user_mileages. Immutable, used for analytics/export.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of soft deletion, if deleted. Null if active.
   *
   * From 'deleted_at'. Compliance/audit purposes only.
   */
  deleted_at?: string & tags.Format<"date-time">;
};
export namespace IUserMileage {
  /**
   * Search and filter request schema for user mileage event listing
   * (user_mileages Prisma table).
   *
   * Allows advanced querying over user, type, time, and event status for
   * large-scale audit, analytics, or user dashboard features.
   */
  export type IRequest = {
    /**
     * Unique ID of the target user. Used to filter mileage events for a
     * specific user.
     *
     * Matches the 'user_id' column in user_mileages. Critical for
     * compliance filtering during analytics or admin reporting.
     */
    user_id?: string & tags.Format<"uuid">;

    /**
     * Mileage event type ('earn', 'redeem', 'bonus', 'expire'). Filters by
     * event category for analytics or user history.
     *
     * References the 'mileage_type' field in user_mileages. Enables
     * breakdown of point accrual and use patterns.
     */
    mileage_type?: string;

    /**
     * Event status to filter by, such as 'pending', 'completed', 'expired'.
     *
     * As defined in 'status' for user_mileages. Useful in showing
     * actionable or historical mileage events.
     */
    status?: string;

    /**
     * Filter for entries containing a certain description substring (free
     * text query).
     *
     * Relates to the 'description' field in user_mileages. Useful for
     * analytics or retention tracking.
     */
    description?: string;

    /**
     * Return mileage events created after this timestamp.
     *
     * References 'created_at' in user_mileages. Useful for time window
     * analytics or compliance export.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Return mileage events before this timestamp.
     *
     * References 'created_at' in user_mileages. Useful for auditing and
     * regulatory request time range.
     */
    created_to?: string & tags.Format<"date-time">;

    /** Page number for paginated results. Optional, default 1. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /**
     * Number of results per page (pagination limit). Optional, default is
     * system-configured.
     */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Creation request for user mileage event (user_mileages Prisma table).
   *
   * Supplies all atomic, required properties for a new event.
   * Authorization/validation determined by user role, system integrations,
   * and audit policies. See schema for more details.
   */
  export type ICreate = {
    /**
     * UUID of the user earning/redeeming/adjusting mileage points.
     *
     * From 'user_id' in user_mileages. Must match an existing user. Checked
     * for RBAC and compliance.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Type of mileage event to create: 'earn', 'redeem', 'bonus', 'expire'.
     *
     * Must be valid code as per business logic in 'mileage_type' column of
     * user_mileages.
     */
    mileage_type: string;

    /**
     * Amount of mileage (points) to assign in this event. Positive for
     * earning, negative for redemption/expire.
     *
     * Maps to 'amount'. Must pass business validation.
     */
    amount: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /**
     * Optional description or reason/memo for this mileage event.
     *
     * Enables internal/external reference.
     */
    description?: string;

    /**
     * Initial status for the event (e.g., 'pending', 'completed').
     *
     * As per 'status' column in user_mileages. Controls workflow/audit
     * trails.
     */
    status: string;
  };

  /**
   * Update request for user mileage event row. Only metadata and status
   * fields are modifiable; type/amount are immutable after completion.
   *
   * RBAC-securedâ€”only users with sufficient privilege (user, admin, system)
   * may update. See user_mileages schema for field mutability and
   * restrictions.
   */
  export type IUpdate = {
    /**
     * (Optional) Revised memo or description for audit/history context.
     *
     * From the 'description' field in user_mileages. Used for updating
     * event notes.
     */
    description?: string;

    /**
     * (Optional) New status ('completed', 'pending', 'expired', etc.).
     *
     * From 'status'. Updates event workflow state for compliance reporting
     * or reversal actions.
     */
    status?: string;
  };
}

import { tags } from "typia";

/**
 * Represents an authenticated (persistent) session record in the system,
 * implementing secure, cross-device, cross-platform login management. Core to
 * all user authentication and RBAC flows, supports full audit, device
 * management, and regulatory export/erasure. Fulfills the normalized
 * requirements from `user_sessions` table.
 *
 * Every session can be searched, revoked, or audited based on anomaly
 * detection, legal, or user demand. Underpins account security, trusted device
 * lists, and multi-factor logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IUserSession = {
  /**
   * Primary key - unique identifier for the session. Reflects
   * `users_sessions.id`.
   *
   * This is the canonical session record reference throughout the system, is
   * not user-facing and is essential for audits, token validation, and unique
   * device management.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the user (referencing users.id) who owns this session. Used for
   * RBAC, account management, and cross-device workflows.
   *
   * This property links the session to the account identity (customer,
   * seller, admin, etc.), supports user session audits, and relates directly
   * to GDPR/CCPA regulatory data export/erasure flows.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Hashed (never cleartext) representation of the login/session token. The
   * actual session or JWT provided to the browser/app is never returned via
   * API.
   *
   * Critical for enforcing persistent authentication, session validation,
   * device trust lists, and for security event traceability.
   */
  token_hash: string;

  /**
   * Optional snapshot of the session's originating IP address, for compliance
   * and anomaly analysis.
   *
   * Used for abnormal activity detection, region-based security alerts, and
   * analytics.
   */
  ip_address?: string | null;

  /**
   * String representing client software/device initiating the session (e.g.,
   * 'Chrome 123.0 on MacOS').
   *
   * Supports device management, fraud detection, and compliance grade audit.
   */
  user_agent?: string | null;

  /**
   * Datetime at which the session will expire, triggering token refresh or
   * forced sign-out.
   *
   * Null if no expiry set (configurable by business rules). Enables
   * GDPR-compliant auto-purge and anti-tampering enforcement.
   */
  expires_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Datetime of session creation, as required by audit, anomaly, and login
   * analytics.
   *
   * Presented in ISODate format with timezone for cross-region regulatory
   * compliance.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * If set, signals the session has been explicitly revoked (by user, admin,
   * or automatic anomaly/Throttling logic).
   *
   * Revoked sessions are no longer available for interactive use, but
   * preserved for compliance and incident reports.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IUserSession {
  /**
   * 사용자 세션(user_sessions) 검색/필터/페이징 요청을 위한 파라미터 타입입니다.
   *
   * User_sessions 테이블에서 로그인/디바이스 기록을 여러 조건(사용자ID, 상태, IP, User-Agent, 만료여부) 및
   * 페이지네이션 파라미터로 조회할 때 활용됩니다.
   */
  export type IRequest = {
    /**
     * 조회/검색 대상 사용자(user)의 고유 식별자(users.id 참조).
     *
     * 입력 시 해당 사용자의 세션만 필터링해 조회.
     */
    user_id?: string & tags.Format<"uuid">;

    /** 세션 상태 필터(active/revoked/expired 등). */
    status?: string;

    /** 검색 대상 세션이 기록한 IP주소(부분/정확 일치 모두 지원). */
    ip_address?: string;

    /** 검색 필터용 브라우저/OS User-Agent(부분/정확 일치). */
    user_agent?: string;

    /** 만료된 세션 포함 여부. true면 만료 포함, false면 미포함. */
    expired?: boolean;

    /** 페이지 번호(1부터 시작). */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** 페이지당 목록 수. 미입력 시 기본값 사용. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Session creation DTO for persistent login/auth flows. Used to establish a
   * new session for a user. Aligns with security/session management best
   * practices and supports mandatory audit fields.
   */
  export type ICreate = {
    /**
     * ID of the user (users.id) who is creating this session. Ties the
     * session to a unique identity required for authentication flows.
     *
     * Enforced as non-null for audit, session/user mapping, and device
     * analytics. Required in every session creation.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Hashed representation of the session token (never cleartext).
     * Essential for plug-in authentication subsystems (SSO, JWT,
     * federated). Usually the output of a secure hashing algorithm.
     *
     * Presented by the session management logic or authentication
     * middleware, compliant with security best practices.
     */
    token_hash: string;

    /**
     * Originating IP address for session establishment.
     *
     * Recommended for anomaly/fraud detection. Optional for basic session
     * flows, but included for compliance.
     */
    ip_address?: string | null;

    /**
     * Device/browser description string. Filled at session creation for
     * device management and multi-device trace.
     *
     * Nullable for non-browser flows or where device info cannot be
     * established.
     */
    user_agent?: string | null;

    /**
     * Optional expiration time for the session (ISO Date string). Sessions
     * without expiry may be valid until revoke/forced expire per policy.
     *
     * Critical for compliance with retention and session length policies.
     */
    expires_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Update payload for an existing session. Supports advanced device
   * activity, compliance features, or explicit session revocation policy.
   *
   * All update operations are fully audited and support robust security
   * enforcement.
   */
  export type IUpdate = {
    /** Update IP address for anomaly, risk, or new device detection. */
    ip_address?: string | null;

    /**
     * Update device or client representation (for compliance or re-auth
     * after device change).
     */
    user_agent?: string | null;

    /**
     * Optional new expiration date/time; enforces session timeouts or
     * extends the period. Null to unset/expire session immediately.
     */
    expires_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Timestamp to mark session as revoked. Once set, session tokens are
     * invalid (forced logout).
     */
    revoked_at?: (string & tags.Format<"date-time">) | null;
  };
}

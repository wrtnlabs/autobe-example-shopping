import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIAimallBackendCouponRedemption } from "../../../../../api/structures/IPageIAimallBackendCouponRedemption";
import { IAimallBackendCouponRedemption } from "../../../../../api/structures/IAimallBackendCouponRedemption";

@Controller("/aimall-backend/administrator/coupons/:couponId/couponRedemptions")
export class Aimall_backendAdministratorCouponsCouponredemptionsController {
  /**
   * Get all redemption events for a coupon
   * (aimall_backend_coupon_redemptions).
   *
   * Return a list of all redemption events/attempts relating to a specific
   * coupon. The aimall_backend_coupon_redemptions table is traversed using
   * couponId as a foreign key. Each event includes customer, campaign, order,
   * status, timestamps, and possible product references for the redemption.
   * This data supports compliance, fraud IR, and auditing required by
   * operations and support teams. Accessible to admin/support audiences only,
   * and errors include not-found or insufficient privilege.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon for which to retrieve
   *   all redemption events.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<IPageIAimallBackendCouponRedemption> {
    couponId;
    return typia.random<IPageIAimallBackendCouponRedemption>();
  }

  /**
   * Create a new coupon redemption event (aimall_backend_coupon_redemptions).
   *
   * Insert a new redemption event for a coupon. Used in scenarios such as
   * logging a manual admin redemption, error correction, or documenting an
   * attempted redemption as part of IR/audit. Accepts required fields to
   * create IAimallBackendCouponRedemption.ICreate. Responds with the new
   * record. Strict role validation and business logic around coupon
   * state/eligibility apply. Returns full new entity; errors for ineligible
   * coupon or malformed input.
   *
   * @param connection
   * @param couponId Coupon to which this redemption record belongs.
   * @param body Redemption record details required for creation.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendCouponRedemption.ICreate,
  ): Promise<IAimallBackendCouponRedemption> {
    couponId;
    body;
    return typia.random<IAimallBackendCouponRedemption>();
  }

  /**
   * Advanced, paginated/searchable coupon redemption event listing
   * (aimall_backend_coupon_redemptions).
   *
   * Offer paginated, filterable search over all coupon redemptions linked to
   * a couponId. The body enables flexible filtering (e.g. by date, status,
   * customer, orderId) for support, audit, or analytic workflows. Only
   * admin/support roles can perform this, given possible data sensitivity
   * about failed/investigated redemptions. Returns paged set of coupon
   * redemption records from aimall_backend_coupon_redemptions, with
   * error/validation handling for search constraints.
   *
   * @param connection
   * @param couponId Coupon whose redemption records to search/filter.
   * @param body Redemption event search and filter criteria for given coupon.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async search(
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendCouponRedemption.IRequest,
  ): Promise<IPageIAimallBackendCouponRedemption> {
    couponId;
    body;
    return typia.random<IPageIAimallBackendCouponRedemption>();
  }

  /**
   * Fetch full details for a single coupon redemption event
   * (aimall_backend_coupon_redemptions).
   *
   * Fetch all details for a single coupon redemption event tied to couponId
   * and couponRedemptionId (primary/event key). The information exposed
   * includes all context provided by the aimall_backend_coupon_redemptions
   * record (customer, campaign, status, time, references to linked
   * order/product). Used for audit, troubleshooting, or analytic drilldowns.
   * Available to admin/support audiences only. Handles not-found and
   * unauthorized cases.
   *
   * @param connection
   * @param couponId Coupon for which the redemption record is fetched.
   * @param couponRedemptionId Redemption event unique id (primary key).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":couponRedemptionId")
  public async at(
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("couponRedemptionId")
    couponRedemptionId: string & tags.Format<"uuid">,
  ): Promise<IAimallBackendCouponRedemption> {
    couponId;
    couponRedemptionId;
    return typia.random<IAimallBackendCouponRedemption>();
  }

  /**
   * Update fields on a coupon redemption record
   * (aimall_backend_coupon_redemptions).
   *
   * Allows administrators or support to update mutable fields of a redemption
   * event for a coupon. Use cases include updating redemption status
   * (success/fail/invalid), fixing customer association, or adding audit
   * evidence. Responds with updated record. Operation is tracked for
   * compliance, and update is only permitted if allowed by business/state
   * logic. Returns error for attempts to modify immutable or forbidden
   * fields, or for invalid identifiers.
   *
   * @param connection
   * @param couponId Coupon containing the redemption event.
   * @param couponRedemptionId Redemption event record unique ID.
   * @param body Update body with allowed mutable fields for coupon
   *   redemption.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":couponRedemptionId")
  public async update(
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("couponRedemptionId")
    couponRedemptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendCouponRedemption.IUpdate,
  ): Promise<IAimallBackendCouponRedemption> {
    couponId;
    couponRedemptionId;
    body;
    return typia.random<IAimallBackendCouponRedemption>();
  }

  /**
   * Permanently remove a coupon redemption event
   * (aimall_backend_coupon_redemptions).
   *
   * Hard delete of a coupon redemption record from the event/audit log. Only
   * available to admin/support roles with permissible access. Not permitted
   * for resolved/closed/caseful fraud events. Immediate removal from
   * underlying storage. Tracks the operation for auditing. Returns no
   * content. Failures for unauthorized, forbidden, or locked redemption
   * events.
   *
   * @param connection
   * @param couponId Coupon under which the redemption event is deleted.
   * @param couponRedemptionId Redemption event unique identifier to delete.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":couponRedemptionId")
  public async erase(
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("couponRedemptionId")
    couponRedemptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    couponId;
    couponRedemptionId;
    return typia.random<void>();
  }
}

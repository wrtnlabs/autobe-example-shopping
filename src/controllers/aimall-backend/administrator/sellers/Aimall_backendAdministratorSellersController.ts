import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIAimallBackendSeller } from "../../../../api/structures/IPageIAimallBackendSeller";
import { IAimallBackendSeller } from "../../../../api/structures/IAimallBackendSeller";

@Controller("/aimall-backend/administrator/sellers")
export class Aimall_backendAdministratorSellersController {
  /**
   * Fetch all sellers (aimall_backend_sellers).
   *
   * Fetch all registered sellers from the aimall_backend_sellers table. Each
   * seller entry includes business_name, email, contact_phone, status, and
   * audit timestamps.
   *
   * This is typically used by administrators to oversee merchant onboarding
   * and by business intelligence tools. Permission checks enable different
   * result scopes (all sellers for admin; own record for seller).
   *
   * Results may be returned as a paginated list. Errors cover unauthorized
   * access and internal errors.
   *
   * @param connection
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async index(): Promise<IPageIAimallBackendSeller> {
    return typia.random<IPageIAimallBackendSeller>();
  }

  /**
   * Register a new seller account (aimall_backend_sellers).
   *
   * Register a new seller and create their record in aimall_backend_sellers.
   * The payload must include all required business and contact data. Business
   * rules enforce data uniqueness constraints (e.g., no duplicate emails).
   *
   * Typical use-case: new merchant onboarding. Available to self-registering
   * merchants or authorized admin staff per policy. Created sellers are
   * returned in full detail as stored.
   *
   * Error cases: missing or invalid input, duplicate entry, or policy
   * violation on onboarding limits.
   *
   * @param connection
   * @param body Data for a new seller onboarding per
   *   IAimallBackendSeller.ICreate.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IAimallBackendSeller.ICreate,
  ): Promise<IAimallBackendSeller> {
    body;
    return typia.random<IAimallBackendSeller>();
  }

  /**
   * Search/filter sellers with paging (aimall_backend_sellers).
   *
   * Search, filter, and paginate the list of sellers via
   * aimall_backend_sellers. Supports complex criteria such as business_name
   * partial match, status selection, or range queries for created_at.
   *
   * Available only to users with admin roles due to sensitive nature and data
   * visibility requirements. This endpoint supports management consoles and
   * reporting tools needing fine-grained control.
   *
   * Errors include invalid filter parameters, out-of-bound pagination, or
   * unauthorized access.
   *
   * @param connection
   * @param body Request with filter, sort, and paging for seller search.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: IAimallBackendSeller.IRequest,
  ): Promise<IPageIAimallBackendSeller> {
    body;
    return typia.random<IPageIAimallBackendSeller>();
  }

  /**
   * Fetch a single seller record by sellerId (aimall_backend_sellers).
   *
   * Retrieve a specific seller's detailed information using their unique
   * sellerId. Returns all schema fields such as business_name, email,
   * contact_phone, status, created/updated timestamps.
   *
   * This endpoint is used by admins for merchant monitoring and by sellers to
   * fetch their own account record. Access is restricted by role: sellers can
   * access their accounts; admins can access any seller.
   *
   * Handles errors such as missing sellerId or insufficient permissions.
   *
   * @param connection
   * @param sellerId The unique identifier (UUID) for the seller to fetch.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":sellerId")
  public async at(
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IAimallBackendSeller> {
    sellerId;
    return typia.random<IAimallBackendSeller>();
  }

  /**
   * Update a seller's data (aimall_backend_sellers).
   *
   * Update the details of an existing seller. Supply the sellerId and update
   * fields to apply. This directly modifies aimall_backend_sellers fields for
   * the record.
   *
   * Role constraints: only admin may edit other sellers; self-edit requires
   * owner match. Changes are moderated for compliance if necessary.
   *
   * Error responses for non-existent sellerId or access violation are
   * possible.
   *
   * @param connection
   * @param sellerId The unique identifier (UUID) of the seller to update.
   * @param body Fields and values to update for the target seller.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":sellerId")
  public async update(
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendSeller.IUpdate,
  ): Promise<IAimallBackendSeller> {
    sellerId;
    body;
    return typia.random<IAimallBackendSeller>();
  }

  /**
   * Hard delete a seller's account (aimall_backend_sellers).
   *
   * Delete the seller's account by sellerId. This operation removes the row
   * from aimall_backend_sellers as a hard delete (no soft delete field in the
   * schema).
   *
   * Only admin role may perform deletion to ensure compliance and
   * auditability. Related data (products, orders) must be managed to preserve
   * integrity according to business rules.
   *
   * Errors can arise from missing sellerId or policy violations (e.g.,
   * attempted unauthorized deletion).
   *
   * @param connection
   * @param sellerId The unique identifier (UUID) of the seller account to
   *   delete.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":sellerId")
  public async erase(
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    sellerId;
    return typia.random<void>();
  }
}

import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIAimallBackendCategory } from "../../../../api/structures/IPageIAimallBackendCategory";
import { IAimallBackendCategory } from "../../../../api/structures/IAimallBackendCategory";

@Controller("/aimall-backend/customer/categories")
export class Aimall_backendCustomerCategoriesController {
  /**
   * List all product categories for taxonomy management and selection.
   *
   * Fetches all product taxonomy categories. Response includes all categories
   * and their hierarchical context (parent_id, depth, name). Data is strictly
   * normalized; no product or summary data is included. Useful for populating
   * category selectors or displaying the product taxonomy. If paginated,
   * response structure is IPageIAimallBackendCategory. Permissions: available
   * to all customers, sellers, or administrators; administrators may see
   * hidden/system categories as well by additional filtering if supported.
   *
   * @param connection
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async index(): Promise<IPageIAimallBackendCategory> {
    return typia.random<IPageIAimallBackendCategory>();
  }

  /**
   * Search or filter paginated categories for admin or advanced user
   * scenarios.
   *
   * Retrieves a filtered and paginated list of product categories according
   * to supplied query parameters. Allows advanced search on category name,
   * depth, or parent_id. Response contains page of categories and supports
   * sorting configuration. Used by administrators or catalog managers in
   * taxonomy administration. Returns 403 for forbidden, 422 for invalid
   * parameters. Security: customer, seller, or administrator role required.
   *
   * @param connection
   * @param body Filter/search parameters for querying categories, including
   *   pagination, keyword, and sort settings.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: IAimallBackendCategory.IRequest,
  ): Promise<IPageIAimallBackendCategory> {
    body;
    return typia.random<IPageIAimallBackendCategory>();
  }

  /**
   * Fetch one category by its ID for detailed viewing or update.
   *
   * Retrieves details for a specific product category, returning all atomic
   * fields (name, depth, parent_id). Returns 404 if not found. Permissions:
   * customer, seller, or administrator as appropriate for catalog access.
   * Error scenarios include non-existent ID, lack of permission, or database
   * error.
   *
   * @param connection
   * @param categoryId Unique identifier of the product category.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IAimallBackendCategory> {
    categoryId;
    return typia.random<IAimallBackendCategory>();
  }
}

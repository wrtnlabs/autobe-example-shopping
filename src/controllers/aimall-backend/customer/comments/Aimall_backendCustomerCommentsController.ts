import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IAimallBackendComment } from "../../../../api/structures/IAimallBackendComment";

@Controller("/aimall-backend/customer/comments")
export class Aimall_backendCustomerCommentsController {
  /**
   * Create a new community comment (aimall_backend_comments).
   *
   * Create a new community comment as an authenticated customer. Provide body
   * text, privacy status (is_private), references to post or review, and (if
   * threaded) parent_id. Ownership is set to the authenticated customer.
   *
   * This operation is restricted to logged-in customers; administrators may
   * have elevated capabilities through different endpoints. Validation and
   * error handling are enforced by the schema.
   *
   * @param connection
   * @param body Creation details for the new comment (see
   *   aimall_backend_comments).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IAimallBackendComment.ICreate,
  ): Promise<IAimallBackendComment> {
    body;
    return typia.random<IAimallBackendComment>();
  }

  /**
   * Update a single comment (by commentId) in aimall_backend_comments.
   *
   * Modify body text, privacy flag, or soft-delete a specific comment (UUID)
   * in the aimall_backend_comments table. Accepts an update DTO with allowed
   * properties. Only the comment's author (customer) or administrator may
   * perform the update based on permissions.
   *
   * Attempting to update an unauthorized comment is denied. Use soft-delete
   * (deleted_at) for logical removal.
   *
   * @param connection
   * @param commentId UUID of the comment to update.
   * @param body Fields to modify (see IAimallBackendComment.IUpdate).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendComment.IUpdate,
  ): Promise<IAimallBackendComment> {
    commentId;
    body;
    return typia.random<IAimallBackendComment>();
  }

  /**
   * Soft-delete (logical delete) a comment by commentId in
   * aimall_backend_comments.
   *
   * Logically delete a comment by setting deleted_at for the target UUID in
   * aimall_backend_comments. Deletion is restricted to ownership (customer)
   * or administrator role. Hard deletion is disallowed in this schema;
   * logical (soft) deletion is tracked for compliance and audit retention.
   *
   * @param connection
   * @param commentId UUID PK of the comment to soft-delete.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    commentId;
    return typia.random<void>();
  }
}

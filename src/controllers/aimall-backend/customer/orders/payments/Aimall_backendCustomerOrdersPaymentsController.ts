import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIAimallBackendPayment } from "../../../../../api/structures/IPageIAimallBackendPayment";
import { IAimallBackendPayment } from "../../../../../api/structures/IAimallBackendPayment";

@Controller("/aimall-backend/customer/orders/:orderId/payments")
export class Aimall_backendCustomerOrdersPaymentsController {
  /**
   * Retrieve a list of payment transactions for the specified order from
   * aimall_backend_payments.
   *
   * Retrieve a list of all payment transactions made for a specific order
   * from the aimall_backend_payments table. This operation enables the
   * querying of multiple types of payment events tied to a single order,
   * reflecting the real-world scenario where an order may be paid through
   * several different channels (e.g., credit card, coupon, points). By
   * providing the orderId as a path parameter, users can access all related
   * payment records, which support business audit, reporting, and
   * reconciliation.
   *
   * Access is strictly enforced: only users with appropriate roles (the
   * ordering customer, involved seller, or platform administrator) are
   * authorized to view payment details, ensuring no leakage of transaction or
   * PII data. This endpoint is commonly paired with order retrieval and
   * payment audit tools for robust financial tracking.
   *
   * @param connection
   * @param orderId Unique identifier of the order whose payments are being
   *   retrieved.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IPageIAimallBackendPayment> {
    orderId;
    return typia.random<IPageIAimallBackendPayment>();
  }

  /**
   * Create a payment transaction associated with the specified order in
   * aimall_backend_payments.
   *
   * Create a new payment transaction for a specific order by submitting full
   * payment details (method, amount, currency, optional external TX code) in
   * the request body. The payment is linked to the specified order using the
   * orderId path parameter. Only parties directly involved in the order
   * (usually the customer or the seller) are permitted to use this endpoint,
   * protecting financial integrity and preventing unauthorized billing
   * events.
   *
   * Business validation ensures the cumulative payment amount matches the
   * expected order total after payment creation. The returned response body
   * provides the complete payment record, linking to follow-up actions such
   * as refunds or transaction confirmation.
   *
   * @param connection
   * @param orderId Unique identifier of the target order under which the
   *   payment is being created.
   * @param body Payment transaction creation data, including method, amount,
   *   and currency.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendPayment.ICreate,
  ): Promise<IAimallBackendPayment> {
    orderId;
    body;
    return typia.random<IAimallBackendPayment>();
  }

  /**
   * Retrieve detailed information about a specific payment for an order from
   * aimall_backend_payments.
   *
   * Fetch the details of a specific payment tied to an order from the
   * aimall_backend_payments table. This operation supports scenarios
   * including detailed customer receipts, refund request validation, and
   * financial audit investigations. The endpoint requires both orderId and
   * paymentId via path, ensuring linkage and data integrity.
   *
   * Appropriate access control is enforced to prohibit unauthorized viewing
   * of sensitive payment details. Combined with the payment list endpoints,
   * this API forms the basis of robust financial transparency and customer
   * service functions.
   *
   * @param connection
   * @param orderId Unique identifier of the target order.
   * @param paymentId Unique identifier of the specific payment transaction to
   *   retrieve.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":paymentId")
  public async at(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<IAimallBackendPayment> {
    orderId;
    paymentId;
    return typia.random<IAimallBackendPayment>();
  }
}

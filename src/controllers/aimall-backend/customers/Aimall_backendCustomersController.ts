import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";

import { IAimallBackendCustomer } from "../../../api/structures/IAimallBackendCustomer";

@Controller("/aimall-backend/customers")
export class Aimall_backendCustomersController {
  /**
   * Register (create) a new customer account (aimall_backend_customers
   * table).
   *
   * Register a new customer in the system backend. All required atomic fields
   * from IAimallBackendCustomer.ICreate must be supplied - including email
   * (unique), phone (unique), password_hash (nullable for external accounts),
   * and status. After validation, system inserts and returns the full
   * customer object including assigned id, audit timestamps, and all
   * supplied/derived values.
   *
   * Typically used by registration APIs (for end-users) or backoffice tools
   * (admin bulk input). Uniqueness of email/phone is enforced by constraints
   * in the model. Additional logic (email/SMS verification, onboarding, or
   * third-party OAuth linkage) may be triggered as part of higher layer
   * workflows.
   *
   * @param connection
   * @param body Payload with all required info for creating a new customer
   *   (per IAimallBackendCustomer.ICreate schema).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedBody()
    body: IAimallBackendCustomer.ICreate,
  ): Promise<IAimallBackendCustomer> {
    body;
    return typia.random<IAimallBackendCustomer>();
  }
}

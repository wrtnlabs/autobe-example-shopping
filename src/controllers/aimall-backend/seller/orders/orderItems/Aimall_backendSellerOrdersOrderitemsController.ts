import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IPageIAimallBackendOrderItem } from "../../../../../api/structures/IPageIAimallBackendOrderItem";
import { IAimallBackendOrderItem } from "../../../../../api/structures/IAimallBackendOrderItem";

@Controller("/aimall-backend/seller/orders/:orderId/orderItems")
export class Aimall_backendSellerOrdersOrderitemsController {
  /**
   * List all order items for an order (Order Items table).
   *
   * Fetches all item lines associated with a single order, using the order's
   * UUID. The API enumerates over all records in the
   * 'aimall_backend_order_items' table for the specified order. Each item
   * provides full details as per schemaâ€”product linkage, option/SKU,
   * quantity, item and total prices.
   *
   * Permissioned for sellers, administrators, and owning customers. Related
   * endpoints provide item creation, mutation, or deletion inside an order.
   * Security ensures only actors with a business relationship to the order
   * may view item-level detail.
   *
   * @param connection
   * @param orderId The UUID of the parent order whose items are listed.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async index(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IPageIAimallBackendOrderItem> {
    orderId;
    return typia.random<IPageIAimallBackendOrderItem>();
  }

  /**
   * Add a new order item to an order (Order Items table).
   *
   * Adds a new order item line to an existing order using the parent order's
   * UUID. Input payload must supply all fields as per the
   * 'aimall_backend_order_items' schema (product, SKU/option, item name,
   * quantity, unit/total price). Use case includes administrator corrections,
   * seller adjustment after customer request, or test data.
   *
   * Order state is validated to reject additions for immutable or already
   * delivered orders. Permissions ensure only sellers/administrators and the
   * owning customer (where allowed) may mutate items in an open order.
   *
   * @param connection
   * @param orderId UUID of the order to which a new item is added.
   * @param body Fields required to create an order item.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async create(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendOrderItem.ICreate,
  ): Promise<IAimallBackendOrderItem> {
    orderId;
    body;
    return typia.random<IAimallBackendOrderItem>();
  }

  /**
   * Search/filter order items for a specific order (Order Items table).
   *
   * Allows advanced searching and filtering among all item lines of a
   * specified order. Enables queries such as filtering by product, SKU,
   * quantity, or item price. Best suited for administrative, seller, or
   * analytic case management; full support for pagination and complex search
   * as per request body parameters. Results mirror the relation schema fields
   * exactly.
   *
   * Only accessible to actors with rights to the parent order, ensuring all
   * item-level queries are scoped in business logic.
   *
   * @param connection
   * @param orderId UUID of the parent order whose items are being searched.
   * @param body Search/filter and pagination parameters for order items
   *   within an order.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async search(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendOrderItem.IRequest,
  ): Promise<IPageIAimallBackendOrderItem> {
    orderId;
    body;
    return typia.random<IPageIAimallBackendOrderItem>();
  }

  /**
   * Retrieve details of a single order item in an order (Order Items table).
   *
   * Gets the complete atomic details for a single order item, restricted to
   * users/roles with access to its parent order. Returns the exact schema
   * structure for one item: product, option (if applicable), item name,
   * quantity, and all price fields. Used by order inspection,
   * returns/replacement processing, or fulfillment dashboards.
   *
   * Endpoint validates both parent order and order item existence before
   * loading, and blocks access unless the actor has rights to both.
   *
   * @param connection
   * @param orderId UUID of the parent order to which the item belongs.
   * @param orderItemId UUID of the order item to retrieve.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":orderItemId")
  public async at(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<IAimallBackendOrderItem> {
    orderId;
    orderItemId;
    return typia.random<IAimallBackendOrderItem>();
  }

  /**
   * Update details of an order item (Order Items table).
   *
   * Edits the details of a specific order item, as referenced by both parent
   * order and item UUIDs. Only attributes present in the corresponding schema
   * (product, option, quantity, name, prices) may be modified. The mutation
   * is disallowed for finalized/archived orders. Permissions are checked for
   * the seller of record, administrators, or customers where policies
   * permit.
   *
   * All updates are logged for audit/compliance. Endpoint strictly validates
   * the linkage between provided orderId and orderItemId, and returns errors
   * if these do not match or are not found.
   *
   * @param connection
   * @param orderId UUID of the parent order containing the item to be
   *   updated.
   * @param orderItemId UUID of the order item to update.
   * @param body Fields to update on the referenced order item.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":orderItemId")
  public async update(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendOrderItem.IUpdate,
  ): Promise<IAimallBackendOrderItem> {
    orderId;
    orderItemId;
    body;
    return typia.random<IAimallBackendOrderItem>();
  }

  /**
   * Delete/remove a single order item from an order (Order Items table).
   *
   * Removes a single order item line from a given order record, specified by
   * both parent order UUID and order item UUID. Only possible if the parent
   * order is open and mutable. The action does not affect the parent order's
   * existence but will cause recalculation of total amounts in subsequent
   * operations.
   *
   * Permitted for sellers/administrators and, in some business workflows, the
   * order-owning customer. Operation returns an appropriate confirmation or
   * error if not found or not permissible.
   *
   * @param connection
   * @param orderId UUID of the parent order from which the item will be
   *   removed.
   * @param orderItemId UUID of the order item to delete.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":orderItemId")
  public async erase(
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("orderItemId")
    orderItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    orderId;
    orderItemId;
    return typia.random<void>();
  }
}

import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";

import { IAimallBackendSeller } from "../../../../api/structures/IAimallBackendSeller";

@Controller("/aimall-backend/seller/sellers/:sellerId")
export class Aimall_backendSellerSellersController {
  /**
   * Fetch a single seller record by sellerId (aimall_backend_sellers).
   *
   * Retrieve a specific seller's detailed information using their unique
   * sellerId. Returns all schema fields such as business_name, email,
   * contact_phone, status, created/updated timestamps.
   *
   * This endpoint is used by admins for merchant monitoring and by sellers to
   * fetch their own account record. Access is restricted by role: sellers can
   * access their accounts; admins can access any seller.
   *
   * Handles errors such as missing sellerId or insufficient permissions.
   *
   * @param connection
   * @param sellerId The unique identifier (UUID) for the seller to fetch.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IAimallBackendSeller> {
    sellerId;
    return typia.random<IAimallBackendSeller>();
  }

  /**
   * Update a seller's data (aimall_backend_sellers).
   *
   * Update the details of an existing seller. Supply the sellerId and update
   * fields to apply. This directly modifies aimall_backend_sellers fields for
   * the record.
   *
   * Role constraints: only admin may edit other sellers; self-edit requires
   * owner match. Changes are moderated for compliance if necessary.
   *
   * Error responses for non-existent sellerId or access violation are
   * possible.
   *
   * @param connection
   * @param sellerId The unique identifier (UUID) of the seller to update.
   * @param body Fields and values to update for the target seller.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put()
  public async update(
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAimallBackendSeller.IUpdate,
  ): Promise<IAimallBackendSeller> {
    sellerId;
    body;
    return typia.random<IAimallBackendSeller>();
  }
}

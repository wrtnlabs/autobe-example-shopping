import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAimallBackendOrder } from "@ORGANIZATION/PROJECT-api/lib/structures/IAimallBackendOrder";

/**
 * Validate administrator's capability to create an order for a guest/anonymous
 * session.
 *
 * The purpose of this test is to verify the business logic or API policy
 * surrounding the creation of orders by administrators where the order is for a
 * 'guest' (i.e., not tied to a registered customer).
 *
 * Step-by-step process:
 *
 * 1. Attempt to create an order as administrator, supplying a randomly generated
 *    (likely non-existent) customer_id to simulate a guest checkout, along with
 *    fully random but valid required fields.
 * 2. If the API allows guest/anonymous order creation, verify the order is created
 *    and its fields match the input.
 * 3. If the API rejects such order (e.g., due to foreign key enforcement or
 *    business policy), verify a meaningful error is returned.
 * 4. Negative path: Attempt to create an order with a syntactically invalid
 *    customer_id (bad UUID format), and ensure the API returns a validation
 *    error.
 */
export async function test_api_aimall_backend_administrator_orders_test_admin_create_order_for_guest_or_anonymous_session(
  connection: api.IConnection,
) {
  // 1. Attempt to create an order with a random, likely non-existent customer_id (simulated guest case)
  const orderInput: IAimallBackendOrder.ICreate = {
    customer_id: typia.random<string & tags.Format<"uuid">>(),
    seller_id: typia.random<string & tags.Format<"uuid">>(),
    address_id: typia.random<string & tags.Format<"uuid">>(),
    order_status: "pending",
    total_amount: 12345,
    currency: "KRW",
  };

  let createdOrder: IAimallBackendOrder | null = null;
  let createError: unknown = null;
  try {
    createdOrder =
      await api.functional.aimall_backend.administrator.orders.create(
        connection,
        {
          body: orderInput,
        },
      );
    typia.assert(createdOrder);
  } catch (err) {
    createError = err;
  }

  // 2. Validation: If creation succeeded, verify major fields match
  if (createdOrder) {
    TestValidator.equals("customer_id matches for admin-inserted guest order")(
      createdOrder.customer_id,
    )(orderInput.customer_id);
    TestValidator.equals("seller_id matches")(createdOrder.seller_id)(
      orderInput.seller_id,
    );
    TestValidator.equals("address_id matches")(createdOrder.address_id)(
      orderInput.address_id,
    );
    TestValidator.equals("order_status matches")(createdOrder.order_status)(
      orderInput.order_status,
    );
    TestValidator.equals("total_amount matches")(createdOrder.total_amount)(
      orderInput.total_amount,
    );
    TestValidator.equals("currency matches")(createdOrder.currency)(
      orderInput.currency,
    );
    // No check for order_number, created_at, updated_at/autogenerated fields
  } else {
    TestValidator.predicate(
      "order creation as guest should fail if not allowed",
    )(!!createError);
  }

  // 3. Negative path: try with invalid UUID for customer_id
  const badInput: IAimallBackendOrder.ICreate = {
    ...orderInput,
    customer_id: "invalid-uuid" as any, // For runtime, simulate type violation
  };
  await TestValidator.error(
    "should reject order creation with invalid customer_id format",
  )(async () => {
    await api.functional.aimall_backend.administrator.orders.create(
      connection,
      {
        body: badInput,
      },
    );
  });
}

import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IAimallBackendProduct } from "@ORGANIZATION/PROJECT-api/lib/structures/IAimallBackendProduct";

/**
 * Validate administrator-side enforcement of uniqueness constraints for product
 * creation.
 *
 * This test ensures that the backend prevents creation of multiple products
 * with the same title for the same seller (uniqueness constraint on seller_id +
 * title).
 *
 * 1. Create a new product as administrator with specific seller_id, category_id,
 *    and title.
 * 2. Attempt to create a second product (admin-side) for the same seller_id and
 *    same title (with all other values valid, but at least differing id if
 *    autogenerated).
 * 3. The second creation attempt should fail with a conflict/validation error
 *    indicating uniqueness constraint violation.
 * 4. Optionally, verify that a product with same title but a different seller_id
 *    is still allowed.
 */
export async function test_api_aimall_backend_administrator_products_test_admin_create_product_with_duplicate_data_enforcement(
  connection: api.IConnection,
) {
  // 1. Prepare static seller_id, category_id, and title
  const sellerId: string = typia.random<string & tags.Format<"uuid">>();
  const categoryId: string = typia.random<string & tags.Format<"uuid">>();
  const title: string = RandomGenerator.paragraph()(3);

  // 2. Create the first product
  const firstProduct =
    await api.functional.aimall_backend.administrator.products.create(
      connection,
      {
        body: {
          category_id: categoryId,
          seller_id: sellerId,
          title,
          description: RandomGenerator.content()()(),
          main_thumbnail_uri: undefined,
          status: "active",
        } satisfies IAimallBackendProduct.ICreate,
      },
    );
  typia.assert(firstProduct);

  // 3. Attempt to create the duplicate product (should fail)
  await TestValidator.error("duplicate product by title and seller_id")(
    async () => {
      await api.functional.aimall_backend.administrator.products.create(
        connection,
        {
          body: {
            category_id: categoryId,
            seller_id: sellerId,
            title, // Duplicate title for same seller
            description: RandomGenerator.content()()(),
            main_thumbnail_uri: undefined,
            status: "active",
          } satisfies IAimallBackendProduct.ICreate,
        },
      );
    },
  );

  // 4. Optionally, check that creating a product with the same title but different seller_id succeeds
  const newSellerId: string = typia.random<string & tags.Format<"uuid">>();
  const otherProduct =
    await api.functional.aimall_backend.administrator.products.create(
      connection,
      {
        body: {
          category_id: categoryId,
          seller_id: newSellerId,
          title,
          description: RandomGenerator.content()()(),
          main_thumbnail_uri: undefined,
          status: "active",
        } satisfies IAimallBackendProduct.ICreate,
      },
    );
  typia.assert(otherProduct);
  // Confirm seller_id is different
  TestValidator.notEquals("seller_id should differ")(otherProduct.seller_id)(
    firstProduct.seller_id,
  );
  // Title should be the same
  TestValidator.equals("title should match")(otherProduct.title)(title);
}
